//
// Generated by Bluespec Compiler (build 39ae402)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_enq                        O     1
// canEnq                         O     1
// RDY_canEnq                     O     1 const
// RDY_setRobEnqTime              O     1 const
// dispatchData                   O    93
// RDY_dispatchData               O     1
// RDY_doDispatch                 O     1
// RDY_setRegReady_0_put          O     1 const
// RDY_setRegReady_1_put          O     1 const
// RDY_setRegReady_2_put          O     1 const
// RDY_setRegReady_3_put          O     1 const
// RDY_setRegReady_4_put          O     1 const
// approximateCount               O     3 reg
// RDY_approximateCount           O     1 const
// isFull_ehrPort0                O     1
// RDY_isFull_ehrPort0            O     1 const
// RDY_specUpdate_incorrectSpeculation  O     1 const
// RDY_specUpdate_correctSpeculation  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// enq_x                          I    93
// setRobEnqTime_t                I     5
// setRegReady_0_put              I     8
// setRegReady_1_put              I     8
// setRegReady_2_put              I     8
// setRegReady_3_put              I     8
// setRegReady_4_put              I     8
// specUpdate_incorrectSpeculation_kill_all  I     1
// specUpdate_incorrectSpeculation_kill_tag  I     2
// specUpdate_correctSpeculation_mask  I     4
// EN_enq                         I     1
// EN_setRobEnqTime               I     1
// EN_doDispatch                  I     1
// EN_setRegReady_0_put           I     1
// EN_setRegReady_1_put           I     1
// EN_setRegReady_2_put           I     1
// EN_setRegReady_3_put           I     1
// EN_setRegReady_4_put           I     1
// EN_specUpdate_incorrectSpeculation  I     1
// EN_specUpdate_correctSpeculation  I     1
//
// Combinational paths from inputs to outputs:
//   (setRobEnqTime_t, EN_setRobEnqTime) -> dispatchData
//   (setRobEnqTime_t, EN_setRobEnqTime) -> RDY_dispatchData
//   (setRobEnqTime_t, EN_setRobEnqTime) -> RDY_doDispatch
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkReservationStationMem(CLK,
			       RST_N,

			       enq_x,
			       EN_enq,
			       RDY_enq,

			       canEnq,
			       RDY_canEnq,

			       setRobEnqTime_t,
			       EN_setRobEnqTime,
			       RDY_setRobEnqTime,

			       dispatchData,
			       RDY_dispatchData,

			       EN_doDispatch,
			       RDY_doDispatch,

			       setRegReady_0_put,
			       EN_setRegReady_0_put,
			       RDY_setRegReady_0_put,

			       setRegReady_1_put,
			       EN_setRegReady_1_put,
			       RDY_setRegReady_1_put,

			       setRegReady_2_put,
			       EN_setRegReady_2_put,
			       RDY_setRegReady_2_put,

			       setRegReady_3_put,
			       EN_setRegReady_3_put,
			       RDY_setRegReady_3_put,

			       setRegReady_4_put,
			       EN_setRegReady_4_put,
			       RDY_setRegReady_4_put,

			       approximateCount,
			       RDY_approximateCount,

			       isFull_ehrPort0,
			       RDY_isFull_ehrPort0,

			       specUpdate_incorrectSpeculation_kill_all,
			       specUpdate_incorrectSpeculation_kill_tag,
			       EN_specUpdate_incorrectSpeculation,
			       RDY_specUpdate_incorrectSpeculation,

			       specUpdate_correctSpeculation_mask,
			       EN_specUpdate_correctSpeculation,
			       RDY_specUpdate_correctSpeculation);
  input  CLK;
  input  RST_N;

  // action method enq
  input  [92 : 0] enq_x;
  input  EN_enq;
  output RDY_enq;

  // value method canEnq
  output canEnq;
  output RDY_canEnq;

  // action method setRobEnqTime
  input  [4 : 0] setRobEnqTime_t;
  input  EN_setRobEnqTime;
  output RDY_setRobEnqTime;

  // value method dispatchData
  output [92 : 0] dispatchData;
  output RDY_dispatchData;

  // action method doDispatch
  input  EN_doDispatch;
  output RDY_doDispatch;

  // action method setRegReady_0_put
  input  [7 : 0] setRegReady_0_put;
  input  EN_setRegReady_0_put;
  output RDY_setRegReady_0_put;

  // action method setRegReady_1_put
  input  [7 : 0] setRegReady_1_put;
  input  EN_setRegReady_1_put;
  output RDY_setRegReady_1_put;

  // action method setRegReady_2_put
  input  [7 : 0] setRegReady_2_put;
  input  EN_setRegReady_2_put;
  output RDY_setRegReady_2_put;

  // action method setRegReady_3_put
  input  [7 : 0] setRegReady_3_put;
  input  EN_setRegReady_3_put;
  output RDY_setRegReady_3_put;

  // action method setRegReady_4_put
  input  [7 : 0] setRegReady_4_put;
  input  EN_setRegReady_4_put;
  output RDY_setRegReady_4_put;

  // value method approximateCount
  output [2 : 0] approximateCount;
  output RDY_approximateCount;

  // value method isFull_ehrPort0
  output isFull_ehrPort0;
  output RDY_isFull_ehrPort0;

  // action method specUpdate_incorrectSpeculation
  input  specUpdate_incorrectSpeculation_kill_all;
  input  [1 : 0] specUpdate_incorrectSpeculation_kill_tag;
  input  EN_specUpdate_incorrectSpeculation;
  output RDY_specUpdate_incorrectSpeculation;

  // action method specUpdate_correctSpeculation
  input  [3 : 0] specUpdate_correctSpeculation_mask;
  input  EN_specUpdate_correctSpeculation;
  output RDY_specUpdate_correctSpeculation;

  // signals for module outputs
  reg RDY_doDispatch;
  wire [92 : 0] dispatchData;
  wire [2 : 0] approximateCount;
  wire RDY_approximateCount,
       RDY_canEnq,
       RDY_dispatchData,
       RDY_enq,
       RDY_isFull_ehrPort0,
       RDY_setRegReady_0_put,
       RDY_setRegReady_1_put,
       RDY_setRegReady_2_put,
       RDY_setRegReady_3_put,
       RDY_setRegReady_4_put,
       RDY_setRobEnqTime,
       RDY_specUpdate_correctSpeculation,
       RDY_specUpdate_incorrectSpeculation,
       canEnq,
       isFull_ehrPort0;

  // inlined wires
  wire [3 : 0] m_regs_ready_0_lat_0$wget,
	       m_regs_ready_0_lat_1$wget,
	       m_regs_ready_0_lat_2$wget,
	       m_regs_ready_0_lat_3$wget,
	       m_regs_ready_0_lat_4$wget,
	       m_regs_ready_1_lat_0$wget,
	       m_regs_ready_1_lat_1$wget,
	       m_regs_ready_1_lat_2$wget,
	       m_regs_ready_1_lat_3$wget,
	       m_regs_ready_1_lat_4$wget,
	       m_regs_ready_2_lat_0$wget,
	       m_regs_ready_2_lat_1$wget,
	       m_regs_ready_2_lat_2$wget,
	       m_regs_ready_2_lat_3$wget,
	       m_regs_ready_2_lat_4$wget,
	       m_regs_ready_3_lat_0$wget,
	       m_regs_ready_3_lat_1$wget,
	       m_regs_ready_3_lat_2$wget,
	       m_regs_ready_3_lat_3$wget,
	       m_regs_ready_3_lat_4$wget;
  wire [2 : 0] m_enqP_wire$wget;
  wire m_ready_wire_0$wget,
       m_ready_wire_1$wget,
       m_ready_wire_2$wget,
       m_ready_wire_3$wget,
       m_valid_0_lat_0$whas,
       m_valid_0_lat_1$whas,
       m_valid_1_lat_0$whas,
       m_valid_1_lat_1$whas,
       m_valid_2_lat_0$whas,
       m_valid_2_lat_1$whas,
       m_valid_3_lat_0$whas,
       m_valid_3_lat_1$whas;

  // register m_data_0
  reg [38 : 0] m_data_0;
  wire [38 : 0] m_data_0$D_IN;
  wire m_data_0$EN;

  // register m_data_1
  reg [38 : 0] m_data_1;
  wire [38 : 0] m_data_1$D_IN;
  wire m_data_1$EN;

  // register m_data_2
  reg [38 : 0] m_data_2;
  wire [38 : 0] m_data_2$D_IN;
  wire m_data_2$EN;

  // register m_data_3
  reg [38 : 0] m_data_3;
  wire [38 : 0] m_data_3$D_IN;
  wire m_data_3$EN;

  // register m_regs_0
  reg [32 : 0] m_regs_0;
  wire [32 : 0] m_regs_0$D_IN;
  wire m_regs_0$EN;

  // register m_regs_1
  reg [32 : 0] m_regs_1;
  wire [32 : 0] m_regs_1$D_IN;
  wire m_regs_1$EN;

  // register m_regs_2
  reg [32 : 0] m_regs_2;
  wire [32 : 0] m_regs_2$D_IN;
  wire m_regs_2$EN;

  // register m_regs_3
  reg [32 : 0] m_regs_3;
  wire [32 : 0] m_regs_3$D_IN;
  wire m_regs_3$EN;

  // register m_regs_ready_0_rl
  reg [3 : 0] m_regs_ready_0_rl;
  wire [3 : 0] m_regs_ready_0_rl$D_IN;
  wire m_regs_ready_0_rl$EN;

  // register m_regs_ready_1_rl
  reg [3 : 0] m_regs_ready_1_rl;
  wire [3 : 0] m_regs_ready_1_rl$D_IN;
  wire m_regs_ready_1_rl$EN;

  // register m_regs_ready_2_rl
  reg [3 : 0] m_regs_ready_2_rl;
  wire [3 : 0] m_regs_ready_2_rl$D_IN;
  wire m_regs_ready_2_rl$EN;

  // register m_regs_ready_3_rl
  reg [3 : 0] m_regs_ready_3_rl;
  wire [3 : 0] m_regs_ready_3_rl$D_IN;
  wire m_regs_ready_3_rl$EN;

  // register m_spec_bits_0_rl
  reg [3 : 0] m_spec_bits_0_rl;
  wire [3 : 0] m_spec_bits_0_rl$D_IN;
  wire m_spec_bits_0_rl$EN;

  // register m_spec_bits_1_rl
  reg [3 : 0] m_spec_bits_1_rl;
  wire [3 : 0] m_spec_bits_1_rl$D_IN;
  wire m_spec_bits_1_rl$EN;

  // register m_spec_bits_2_rl
  reg [3 : 0] m_spec_bits_2_rl;
  wire [3 : 0] m_spec_bits_2_rl$D_IN;
  wire m_spec_bits_2_rl$EN;

  // register m_spec_bits_3_rl
  reg [3 : 0] m_spec_bits_3_rl;
  wire [3 : 0] m_spec_bits_3_rl$D_IN;
  wire m_spec_bits_3_rl$EN;

  // register m_spec_tag_0
  reg [2 : 0] m_spec_tag_0;
  wire [2 : 0] m_spec_tag_0$D_IN;
  wire m_spec_tag_0$EN;

  // register m_spec_tag_1
  reg [2 : 0] m_spec_tag_1;
  wire [2 : 0] m_spec_tag_1$D_IN;
  wire m_spec_tag_1$EN;

  // register m_spec_tag_2
  reg [2 : 0] m_spec_tag_2;
  wire [2 : 0] m_spec_tag_2$D_IN;
  wire m_spec_tag_2$EN;

  // register m_spec_tag_3
  reg [2 : 0] m_spec_tag_3;
  wire [2 : 0] m_spec_tag_3$D_IN;
  wire m_spec_tag_3$EN;

  // register m_tag_0
  reg [9 : 0] m_tag_0;
  wire [9 : 0] m_tag_0$D_IN;
  wire m_tag_0$EN;

  // register m_tag_1
  reg [9 : 0] m_tag_1;
  wire [9 : 0] m_tag_1$D_IN;
  wire m_tag_1$EN;

  // register m_tag_2
  reg [9 : 0] m_tag_2;
  wire [9 : 0] m_tag_2$D_IN;
  wire m_tag_2$EN;

  // register m_tag_3
  reg [9 : 0] m_tag_3;
  wire [9 : 0] m_tag_3$D_IN;
  wire m_tag_3$EN;

  // register m_validEntryCount
  reg [2 : 0] m_validEntryCount;
  wire [2 : 0] m_validEntryCount$D_IN;
  wire m_validEntryCount$EN;

  // register m_valid_0_rl
  reg m_valid_0_rl;
  wire m_valid_0_rl$D_IN, m_valid_0_rl$EN;

  // register m_valid_1_rl
  reg m_valid_1_rl;
  wire m_valid_1_rl$D_IN, m_valid_1_rl$EN;

  // register m_valid_2_rl
  reg m_valid_2_rl;
  wire m_valid_2_rl$D_IN, m_valid_2_rl$EN;

  // register m_valid_3_rl
  reg m_valid_3_rl;
  wire m_valid_3_rl$D_IN, m_valid_3_rl$EN;

  // ports of submodule m_regs_ready_0_dummy2_0
  wire m_regs_ready_0_dummy2_0$D_IN,
       m_regs_ready_0_dummy2_0$EN,
       m_regs_ready_0_dummy2_0$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_1
  wire m_regs_ready_0_dummy2_1$D_IN,
       m_regs_ready_0_dummy2_1$EN,
       m_regs_ready_0_dummy2_1$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_2
  wire m_regs_ready_0_dummy2_2$D_IN,
       m_regs_ready_0_dummy2_2$EN,
       m_regs_ready_0_dummy2_2$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_3
  wire m_regs_ready_0_dummy2_3$D_IN,
       m_regs_ready_0_dummy2_3$EN,
       m_regs_ready_0_dummy2_3$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_4
  wire m_regs_ready_0_dummy2_4$D_IN,
       m_regs_ready_0_dummy2_4$EN,
       m_regs_ready_0_dummy2_4$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_5
  wire m_regs_ready_0_dummy2_5$D_IN,
       m_regs_ready_0_dummy2_5$EN,
       m_regs_ready_0_dummy2_5$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_0
  wire m_regs_ready_1_dummy2_0$D_IN,
       m_regs_ready_1_dummy2_0$EN,
       m_regs_ready_1_dummy2_0$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_1
  wire m_regs_ready_1_dummy2_1$D_IN,
       m_regs_ready_1_dummy2_1$EN,
       m_regs_ready_1_dummy2_1$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_2
  wire m_regs_ready_1_dummy2_2$D_IN,
       m_regs_ready_1_dummy2_2$EN,
       m_regs_ready_1_dummy2_2$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_3
  wire m_regs_ready_1_dummy2_3$D_IN,
       m_regs_ready_1_dummy2_3$EN,
       m_regs_ready_1_dummy2_3$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_4
  wire m_regs_ready_1_dummy2_4$D_IN,
       m_regs_ready_1_dummy2_4$EN,
       m_regs_ready_1_dummy2_4$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_5
  wire m_regs_ready_1_dummy2_5$D_IN,
       m_regs_ready_1_dummy2_5$EN,
       m_regs_ready_1_dummy2_5$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_0
  wire m_regs_ready_2_dummy2_0$D_IN,
       m_regs_ready_2_dummy2_0$EN,
       m_regs_ready_2_dummy2_0$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_1
  wire m_regs_ready_2_dummy2_1$D_IN,
       m_regs_ready_2_dummy2_1$EN,
       m_regs_ready_2_dummy2_1$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_2
  wire m_regs_ready_2_dummy2_2$D_IN,
       m_regs_ready_2_dummy2_2$EN,
       m_regs_ready_2_dummy2_2$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_3
  wire m_regs_ready_2_dummy2_3$D_IN,
       m_regs_ready_2_dummy2_3$EN,
       m_regs_ready_2_dummy2_3$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_4
  wire m_regs_ready_2_dummy2_4$D_IN,
       m_regs_ready_2_dummy2_4$EN,
       m_regs_ready_2_dummy2_4$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_5
  wire m_regs_ready_2_dummy2_5$D_IN,
       m_regs_ready_2_dummy2_5$EN,
       m_regs_ready_2_dummy2_5$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_0
  wire m_regs_ready_3_dummy2_0$D_IN,
       m_regs_ready_3_dummy2_0$EN,
       m_regs_ready_3_dummy2_0$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_1
  wire m_regs_ready_3_dummy2_1$D_IN,
       m_regs_ready_3_dummy2_1$EN,
       m_regs_ready_3_dummy2_1$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_2
  wire m_regs_ready_3_dummy2_2$D_IN,
       m_regs_ready_3_dummy2_2$EN,
       m_regs_ready_3_dummy2_2$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_3
  wire m_regs_ready_3_dummy2_3$D_IN,
       m_regs_ready_3_dummy2_3$EN,
       m_regs_ready_3_dummy2_3$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_4
  wire m_regs_ready_3_dummy2_4$D_IN,
       m_regs_ready_3_dummy2_4$EN,
       m_regs_ready_3_dummy2_4$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_5
  wire m_regs_ready_3_dummy2_5$D_IN,
       m_regs_ready_3_dummy2_5$EN,
       m_regs_ready_3_dummy2_5$Q_OUT;

  // ports of submodule m_spec_bits_0_dummy2_0
  wire m_spec_bits_0_dummy2_0$D_IN,
       m_spec_bits_0_dummy2_0$EN,
       m_spec_bits_0_dummy2_0$Q_OUT;

  // ports of submodule m_spec_bits_0_dummy2_1
  wire m_spec_bits_0_dummy2_1$D_IN,
       m_spec_bits_0_dummy2_1$EN,
       m_spec_bits_0_dummy2_1$Q_OUT;

  // ports of submodule m_spec_bits_1_dummy2_0
  wire m_spec_bits_1_dummy2_0$D_IN,
       m_spec_bits_1_dummy2_0$EN,
       m_spec_bits_1_dummy2_0$Q_OUT;

  // ports of submodule m_spec_bits_1_dummy2_1
  wire m_spec_bits_1_dummy2_1$D_IN,
       m_spec_bits_1_dummy2_1$EN,
       m_spec_bits_1_dummy2_1$Q_OUT;

  // ports of submodule m_spec_bits_2_dummy2_0
  wire m_spec_bits_2_dummy2_0$D_IN,
       m_spec_bits_2_dummy2_0$EN,
       m_spec_bits_2_dummy2_0$Q_OUT;

  // ports of submodule m_spec_bits_2_dummy2_1
  wire m_spec_bits_2_dummy2_1$D_IN,
       m_spec_bits_2_dummy2_1$EN,
       m_spec_bits_2_dummy2_1$Q_OUT;

  // ports of submodule m_spec_bits_3_dummy2_0
  wire m_spec_bits_3_dummy2_0$D_IN,
       m_spec_bits_3_dummy2_0$EN,
       m_spec_bits_3_dummy2_0$Q_OUT;

  // ports of submodule m_spec_bits_3_dummy2_1
  wire m_spec_bits_3_dummy2_1$D_IN,
       m_spec_bits_3_dummy2_1$EN,
       m_spec_bits_3_dummy2_1$Q_OUT;

  // ports of submodule m_valid_0_dummy2_0
  wire m_valid_0_dummy2_0$D_IN,
       m_valid_0_dummy2_0$EN,
       m_valid_0_dummy2_0$Q_OUT;

  // ports of submodule m_valid_0_dummy2_1
  wire m_valid_0_dummy2_1$D_IN,
       m_valid_0_dummy2_1$EN,
       m_valid_0_dummy2_1$Q_OUT;

  // ports of submodule m_valid_1_dummy2_0
  wire m_valid_1_dummy2_0$D_IN,
       m_valid_1_dummy2_0$EN,
       m_valid_1_dummy2_0$Q_OUT;

  // ports of submodule m_valid_1_dummy2_1
  wire m_valid_1_dummy2_1$D_IN,
       m_valid_1_dummy2_1$EN,
       m_valid_1_dummy2_1$Q_OUT;

  // ports of submodule m_valid_2_dummy2_0
  wire m_valid_2_dummy2_0$D_IN,
       m_valid_2_dummy2_0$EN,
       m_valid_2_dummy2_0$Q_OUT;

  // ports of submodule m_valid_2_dummy2_1
  wire m_valid_2_dummy2_1$D_IN,
       m_valid_2_dummy2_1$EN,
       m_valid_2_dummy2_1$Q_OUT;

  // ports of submodule m_valid_3_dummy2_0
  wire m_valid_3_dummy2_0$D_IN,
       m_valid_3_dummy2_0$EN,
       m_valid_3_dummy2_0$Q_OUT;

  // ports of submodule m_valid_3_dummy2_1
  wire m_valid_3_dummy2_1$D_IN,
       m_valid_3_dummy2_1$EN,
       m_valid_3_dummy2_1$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_m_regs_ready_0_canon,
       CAN_FIRE_RL_m_regs_ready_1_canon,
       CAN_FIRE_RL_m_regs_ready_2_canon,
       CAN_FIRE_RL_m_regs_ready_3_canon,
       CAN_FIRE_RL_m_setReadyWire,
       CAN_FIRE_RL_m_setWireForEnq,
       CAN_FIRE_RL_m_spec_bits_0_canon,
       CAN_FIRE_RL_m_spec_bits_1_canon,
       CAN_FIRE_RL_m_spec_bits_2_canon,
       CAN_FIRE_RL_m_spec_bits_3_canon,
       CAN_FIRE_RL_m_valid_0_canon,
       CAN_FIRE_RL_m_valid_1_canon,
       CAN_FIRE_RL_m_valid_2_canon,
       CAN_FIRE_RL_m_valid_3_canon,
       CAN_FIRE_doDispatch,
       CAN_FIRE_enq,
       CAN_FIRE_setRegReady_0_put,
       CAN_FIRE_setRegReady_1_put,
       CAN_FIRE_setRegReady_2_put,
       CAN_FIRE_setRegReady_3_put,
       CAN_FIRE_setRegReady_4_put,
       CAN_FIRE_setRobEnqTime,
       CAN_FIRE_specUpdate_correctSpeculation,
       CAN_FIRE_specUpdate_incorrectSpeculation,
       WILL_FIRE_RL_m_regs_ready_0_canon,
       WILL_FIRE_RL_m_regs_ready_1_canon,
       WILL_FIRE_RL_m_regs_ready_2_canon,
       WILL_FIRE_RL_m_regs_ready_3_canon,
       WILL_FIRE_RL_m_setReadyWire,
       WILL_FIRE_RL_m_setWireForEnq,
       WILL_FIRE_RL_m_spec_bits_0_canon,
       WILL_FIRE_RL_m_spec_bits_1_canon,
       WILL_FIRE_RL_m_spec_bits_2_canon,
       WILL_FIRE_RL_m_spec_bits_3_canon,
       WILL_FIRE_RL_m_valid_0_canon,
       WILL_FIRE_RL_m_valid_1_canon,
       WILL_FIRE_RL_m_valid_2_canon,
       WILL_FIRE_RL_m_valid_3_canon,
       WILL_FIRE_doDispatch,
       WILL_FIRE_enq,
       WILL_FIRE_setRegReady_0_put,
       WILL_FIRE_setRegReady_1_put,
       WILL_FIRE_setRegReady_2_put,
       WILL_FIRE_setRegReady_3_put,
       WILL_FIRE_setRegReady_4_put,
       WILL_FIRE_setRobEnqTime,
       WILL_FIRE_specUpdate_correctSpeculation,
       WILL_FIRE_specUpdate_incorrectSpeculation;

  // inputs to muxes for submodule ports
  wire MUX_m_valid_0_dummy2_0$write_1__SEL_1,
       MUX_m_valid_0_dummy2_0$write_1__SEL_2,
       MUX_m_valid_1_dummy2_0$write_1__SEL_1,
       MUX_m_valid_1_dummy2_0$write_1__SEL_2,
       MUX_m_valid_2_dummy2_0$write_1__SEL_1,
       MUX_m_valid_2_dummy2_0$write_1__SEL_2,
       MUX_m_valid_3_dummy2_0$write_1__SEL_1,
       MUX_m_valid_3_dummy2_0$write_1__SEL_2;

  // remaining internal signals
  reg [31 : 0] SEL_ARR_m_data_0_86_BITS_35_TO_4_53_m_data_1_8_ETC___d358;
  reg [6 : 0] SEL_ARR_m_regs_0_85_BITS_15_TO_9_37_m_regs_1_8_ETC___d442,
	      SEL_ARR_m_regs_0_85_BITS_23_TO_17_18_m_regs_1__ETC___d423,
	      SEL_ARR_m_regs_0_85_BITS_31_TO_25_00_m_regs_1__ETC___d405,
	      SEL_ARR_m_regs_0_85_BITS_7_TO_1_55_m_regs_1_88_ETC___d460;
  reg [5 : 0] SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d346,
	      SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d347;
  reg [4 : 0] SEL_ARR_m_tag_0_08_BITS_4_TO_0_09_m_tag_1_17_B_ETC___d484;
  reg [3 : 0] SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__86_AND_ETC___d503,
	      SEL_ARR_m_tag_0_08_BITS_8_TO_5_77_m_tag_1_17_B_ETC___d482;
  reg [2 : 0] SEL_ARR_m_data_0_86_BITS_2_TO_0_70_m_data_1_88_ETC___d375,
	      SEL_ARR_m_data_0_86_BITS_38_TO_36_87_m_data_1__ETC___d352;
  reg [1 : 0] SEL_ARR_m_data_0_86_BITS_1_TO_0_76_m_data_1_88_ETC___d381,
	      SEL_ARR_m_spec_tag_0_04_BITS_1_TO_0_19_m_spec__ETC___d524;
  reg SEL_ARR_NOT_m_data_0_86_BIT_3_59_60_NOT_m_data_ETC___d368,
      SEL_ARR_NOT_m_regs_0_85_BIT_16_26_27_NOT_m_reg_ETC___d435,
      SEL_ARR_NOT_m_regs_0_85_BIT_24_07_08_NOT_m_reg_ETC___d416,
      SEL_ARR_NOT_m_regs_0_85_BIT_32_86_87_NOT_m_reg_ETC___d398,
      SEL_ARR_NOT_m_regs_0_85_BIT_8_44_45_NOT_m_regs_ETC___d453,
      SEL_ARR_NOT_m_spec_tag_0_04_BIT_2_05_06_NOT_m__ETC___d517,
      SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d327,
      SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d344,
      SEL_ARR_m_regs_0_85_BIT_0_61_m_regs_1_88_BIT_0_ETC___d466,
      SEL_ARR_m_tag_0_08_BIT_9_71_m_tag_1_17_BIT_9_7_ETC___d476;
  wire [35 : 0] SEL_ARR_m_data_0_86_BITS_35_TO_4_53_m_data_1_8_ETC___d384;
  wire [5 : 0] IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m_robEnqTi_ETC___d316,
	       IF_m_tag_1_17_BITS_4_TO_0_18_ULT_IF_m_robEnqTi_ETC___d322,
	       IF_m_tag_2_28_BITS_4_TO_0_29_ULT_IF_m_robEnqTi_ETC___d333,
	       IF_m_tag_3_34_BITS_4_TO_0_35_ULT_IF_m_robEnqTi_ETC___d339;
  wire [4 : 0] x__read__h24362;
  wire [3 : 0] IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d71,
	       IF_m_regs_ready_0_lat_3_whas__1_THEN_m_regs_re_ETC___d73,
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d90,
	       IF_m_regs_ready_1_lat_3_whas__0_THEN_m_regs_re_ETC___d92,
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d109,
	       IF_m_regs_ready_2_lat_3_whas__9_THEN_m_regs_re_ETC___d111,
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d128,
	       IF_m_regs_ready_3_lat_3_whas__18_THEN_m_regs_r_ETC___d130,
	       IF_m_spec_bits_0_lat_0_whas__1_THEN_m_spec_bit_ETC___d34,
	       IF_m_spec_bits_1_lat_0_whas__8_THEN_m_spec_bit_ETC___d41,
	       IF_m_spec_bits_2_lat_0_whas__5_THEN_m_spec_bit_ETC___d48,
	       IF_m_spec_bits_3_lat_0_whas__2_THEN_m_spec_bit_ETC___d55,
	       bs__h56524,
	       bs__h56712,
	       bs__h56900,
	       bs__h57076,
	       n__read__h57562,
	       n__read__h58002,
	       n__read__h58442,
	       n__read__h58870,
	       upd__h6225,
	       upd__h7154,
	       upd__h8083,
	       upd__h9012;
  wire [1 : 0] IF_NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_ETC___d325,
	       IF_NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_ETC___d342,
	       IF_SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10__ETC___d350,
	       a__h36862,
	       b__h36863,
	       idx__h36648;
  wire IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d646,
       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d655,
       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d664,
       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d668,
       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d792,
       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d801,
       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d810,
       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d814,
       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d934,
       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d943,
       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d952,
       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d956,
       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d682,
       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d691,
       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d700,
       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d704,
       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d827,
       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d836,
       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d845,
       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d849,
       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d968,
       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d977,
       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d986,
       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d990,
       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d718,
       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d727,
       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d736,
       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d740,
       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d862,
       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d871,
       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d880,
       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d884,
       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1002,
       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1011,
       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1020,
       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1024,
       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d754,
       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d763,
       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d772,
       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d776,
       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d897,
       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d906,
       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d915,
       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d919,
       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1036,
       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1045,
       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1054,
       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1058,
       NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d223,
       NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d297,
       NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d300,
       NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d238,
       NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d303,
       NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d306,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d648,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d657,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d666,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d684,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d693,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d702,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d720,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d729,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d738,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d756,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d765,
       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d774,
       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139,
       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d145,
       m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d643,
       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d790,
       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1073,
       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1082,
       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1091,
       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1095,
       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158,
       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d164,
       m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d679,
       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d825,
       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1106,
       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1115,
       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1124,
       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1128,
       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177,
       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d183,
       m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d715,
       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d860,
       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1139,
       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1148,
       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1157,
       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1161,
       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196,
       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d202,
       m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d751,
       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d895,
       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1172,
       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1181,
       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1190,
       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1194,
       m_valid_0_dummy2_0_read__09_AND_m_valid_0_dumm_ETC___d244,
       m_valid_2_dummy2_0_read__24_AND_m_valid_2_dumm_ETC___d249;

  // action method enq
  assign RDY_enq = m_enqP_wire$wget[2] ;
  assign CAN_FIRE_enq = m_enqP_wire$wget[2] ;
  assign WILL_FIRE_enq = EN_enq ;

  // value method canEnq
  assign canEnq = m_enqP_wire$wget[2] ;
  assign RDY_canEnq = 1'd1 ;

  // action method setRobEnqTime
  assign RDY_setRobEnqTime = 1'd1 ;
  assign CAN_FIRE_setRobEnqTime = 1'd1 ;
  assign WILL_FIRE_setRobEnqTime = EN_setRobEnqTime ;

  // value method dispatchData
  assign dispatchData =
	     { SEL_ARR_m_data_0_86_BITS_38_TO_36_87_m_data_1__ETC___d352,
	       SEL_ARR_m_data_0_86_BITS_35_TO_4_53_m_data_1_8_ETC___d384,
	       !SEL_ARR_NOT_m_regs_0_85_BIT_32_86_87_NOT_m_reg_ETC___d398,
	       SEL_ARR_m_regs_0_85_BITS_31_TO_25_00_m_regs_1__ETC___d405,
	       !SEL_ARR_NOT_m_regs_0_85_BIT_24_07_08_NOT_m_reg_ETC___d416,
	       SEL_ARR_m_regs_0_85_BITS_23_TO_17_18_m_regs_1__ETC___d423,
	       !SEL_ARR_NOT_m_regs_0_85_BIT_16_26_27_NOT_m_reg_ETC___d435,
	       SEL_ARR_m_regs_0_85_BITS_15_TO_9_37_m_regs_1_8_ETC___d442,
	       !SEL_ARR_NOT_m_regs_0_85_BIT_8_44_45_NOT_m_regs_ETC___d453,
	       SEL_ARR_m_regs_0_85_BITS_7_TO_1_55_m_regs_1_88_ETC___d460,
	       SEL_ARR_m_regs_0_85_BIT_0_61_m_regs_1_88_BIT_0_ETC___d466,
	       SEL_ARR_m_tag_0_08_BIT_9_71_m_tag_1_17_BIT_9_7_ETC___d476,
	       SEL_ARR_m_tag_0_08_BITS_8_TO_5_77_m_tag_1_17_B_ETC___d482,
	       SEL_ARR_m_tag_0_08_BITS_4_TO_0_09_m_tag_1_17_B_ETC___d484,
	       SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__86_AND_ETC___d503,
	       !SEL_ARR_NOT_m_spec_tag_0_04_BIT_2_05_06_NOT_m__ETC___d517,
	       SEL_ARR_m_spec_tag_0_04_BITS_1_TO_0_19_m_spec__ETC___d524,
	       4'd15 } ;
  assign RDY_dispatchData = RDY_doDispatch ;

  // action method doDispatch
  always@(idx__h36648 or
	  m_valid_0_dummy2_0$Q_OUT or
	  m_valid_0_dummy2_1$Q_OUT or
	  m_valid_0_rl or
	  m_ready_wire_0$wget or
	  m_valid_1_dummy2_0$Q_OUT or
	  m_valid_1_dummy2_1$Q_OUT or
	  m_valid_1_rl or
	  m_ready_wire_1$wget or
	  m_valid_2_dummy2_0$Q_OUT or
	  m_valid_2_dummy2_1$Q_OUT or
	  m_valid_2_rl or
	  m_ready_wire_2$wget or
	  m_valid_3_dummy2_0$Q_OUT or
	  m_valid_3_dummy2_1$Q_OUT or m_valid_3_rl or m_ready_wire_3$wget)
  begin
    case (idx__h36648)
      2'd0:
	  RDY_doDispatch =
	      m_valid_0_dummy2_0$Q_OUT && m_valid_0_dummy2_1$Q_OUT &&
	      m_valid_0_rl &&
	      m_ready_wire_0$wget;
      2'd1:
	  RDY_doDispatch =
	      m_valid_1_dummy2_0$Q_OUT && m_valid_1_dummy2_1$Q_OUT &&
	      m_valid_1_rl &&
	      m_ready_wire_1$wget;
      2'd2:
	  RDY_doDispatch =
	      m_valid_2_dummy2_0$Q_OUT && m_valid_2_dummy2_1$Q_OUT &&
	      m_valid_2_rl &&
	      m_ready_wire_2$wget;
      2'd3:
	  RDY_doDispatch =
	      m_valid_3_dummy2_0$Q_OUT && m_valid_3_dummy2_1$Q_OUT &&
	      m_valid_3_rl &&
	      m_ready_wire_3$wget;
    endcase
  end
  assign CAN_FIRE_doDispatch = RDY_doDispatch ;
  assign WILL_FIRE_doDispatch = EN_doDispatch ;

  // action method setRegReady_0_put
  assign RDY_setRegReady_0_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_0_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_0_put = EN_setRegReady_0_put ;

  // action method setRegReady_1_put
  assign RDY_setRegReady_1_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_1_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_1_put = EN_setRegReady_1_put ;

  // action method setRegReady_2_put
  assign RDY_setRegReady_2_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_2_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_2_put = EN_setRegReady_2_put ;

  // action method setRegReady_3_put
  assign RDY_setRegReady_3_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_3_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_3_put = EN_setRegReady_3_put ;

  // action method setRegReady_4_put
  assign RDY_setRegReady_4_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_4_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_4_put = EN_setRegReady_4_put ;

  // value method approximateCount
  assign approximateCount = m_validEntryCount ;
  assign RDY_approximateCount = 1'd1 ;

  // value method isFull_ehrPort0
  assign isFull_ehrPort0 =
	     m_valid_0_dummy2_0$Q_OUT && m_valid_0_dummy2_1$Q_OUT &&
	     m_valid_0_rl &&
	     m_valid_1_dummy2_0$Q_OUT &&
	     m_valid_1_dummy2_1$Q_OUT &&
	     m_valid_1_rl &&
	     m_valid_2_dummy2_0_read__24_AND_m_valid_2_dumm_ETC___d249 ;
  assign RDY_isFull_ehrPort0 = 1'd1 ;

  // action method specUpdate_incorrectSpeculation
  assign RDY_specUpdate_incorrectSpeculation = 1'd1 ;
  assign CAN_FIRE_specUpdate_incorrectSpeculation = 1'd1 ;
  assign WILL_FIRE_specUpdate_incorrectSpeculation =
	     EN_specUpdate_incorrectSpeculation ;

  // action method specUpdate_correctSpeculation
  assign RDY_specUpdate_correctSpeculation = 1'd1 ;
  assign CAN_FIRE_specUpdate_correctSpeculation = 1'd1 ;
  assign WILL_FIRE_specUpdate_correctSpeculation =
	     EN_specUpdate_correctSpeculation ;

  // submodule m_regs_ready_0_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_0(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_0$D_IN),
								  .EN(m_regs_ready_0_dummy2_0$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_0$Q_OUT));

  // submodule m_regs_ready_0_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_1(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_1$D_IN),
								  .EN(m_regs_ready_0_dummy2_1$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_1$Q_OUT));

  // submodule m_regs_ready_0_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_2(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_2$D_IN),
								  .EN(m_regs_ready_0_dummy2_2$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_2$Q_OUT));

  // submodule m_regs_ready_0_dummy2_3
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_3(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_3$D_IN),
								  .EN(m_regs_ready_0_dummy2_3$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_3$Q_OUT));

  // submodule m_regs_ready_0_dummy2_4
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_4(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_4$D_IN),
								  .EN(m_regs_ready_0_dummy2_4$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_4$Q_OUT));

  // submodule m_regs_ready_0_dummy2_5
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_5(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_5$D_IN),
								  .EN(m_regs_ready_0_dummy2_5$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_5$Q_OUT));

  // submodule m_regs_ready_1_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_0(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_0$D_IN),
								  .EN(m_regs_ready_1_dummy2_0$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_0$Q_OUT));

  // submodule m_regs_ready_1_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_1(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_1$D_IN),
								  .EN(m_regs_ready_1_dummy2_1$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_1$Q_OUT));

  // submodule m_regs_ready_1_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_2(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_2$D_IN),
								  .EN(m_regs_ready_1_dummy2_2$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_2$Q_OUT));

  // submodule m_regs_ready_1_dummy2_3
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_3(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_3$D_IN),
								  .EN(m_regs_ready_1_dummy2_3$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_3$Q_OUT));

  // submodule m_regs_ready_1_dummy2_4
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_4(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_4$D_IN),
								  .EN(m_regs_ready_1_dummy2_4$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_4$Q_OUT));

  // submodule m_regs_ready_1_dummy2_5
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_5(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_5$D_IN),
								  .EN(m_regs_ready_1_dummy2_5$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_5$Q_OUT));

  // submodule m_regs_ready_2_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_0(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_0$D_IN),
								  .EN(m_regs_ready_2_dummy2_0$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_0$Q_OUT));

  // submodule m_regs_ready_2_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_1(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_1$D_IN),
								  .EN(m_regs_ready_2_dummy2_1$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_1$Q_OUT));

  // submodule m_regs_ready_2_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_2(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_2$D_IN),
								  .EN(m_regs_ready_2_dummy2_2$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_2$Q_OUT));

  // submodule m_regs_ready_2_dummy2_3
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_3(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_3$D_IN),
								  .EN(m_regs_ready_2_dummy2_3$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_3$Q_OUT));

  // submodule m_regs_ready_2_dummy2_4
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_4(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_4$D_IN),
								  .EN(m_regs_ready_2_dummy2_4$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_4$Q_OUT));

  // submodule m_regs_ready_2_dummy2_5
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_5(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_5$D_IN),
								  .EN(m_regs_ready_2_dummy2_5$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_5$Q_OUT));

  // submodule m_regs_ready_3_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_0(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_0$D_IN),
								  .EN(m_regs_ready_3_dummy2_0$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_0$Q_OUT));

  // submodule m_regs_ready_3_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_1(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_1$D_IN),
								  .EN(m_regs_ready_3_dummy2_1$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_1$Q_OUT));

  // submodule m_regs_ready_3_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_2(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_2$D_IN),
								  .EN(m_regs_ready_3_dummy2_2$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_2$Q_OUT));

  // submodule m_regs_ready_3_dummy2_3
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_3(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_3$D_IN),
								  .EN(m_regs_ready_3_dummy2_3$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_3$Q_OUT));

  // submodule m_regs_ready_3_dummy2_4
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_4(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_4$D_IN),
								  .EN(m_regs_ready_3_dummy2_4$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_4$Q_OUT));

  // submodule m_regs_ready_3_dummy2_5
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_5(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_5$D_IN),
								  .EN(m_regs_ready_3_dummy2_5$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_5$Q_OUT));

  // submodule m_spec_bits_0_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_0_dummy2_0(.CLK(CLK),
								 .D_IN(m_spec_bits_0_dummy2_0$D_IN),
								 .EN(m_spec_bits_0_dummy2_0$EN),
								 .Q_OUT(m_spec_bits_0_dummy2_0$Q_OUT));

  // submodule m_spec_bits_0_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_0_dummy2_1(.CLK(CLK),
								 .D_IN(m_spec_bits_0_dummy2_1$D_IN),
								 .EN(m_spec_bits_0_dummy2_1$EN),
								 .Q_OUT(m_spec_bits_0_dummy2_1$Q_OUT));

  // submodule m_spec_bits_1_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_1_dummy2_0(.CLK(CLK),
								 .D_IN(m_spec_bits_1_dummy2_0$D_IN),
								 .EN(m_spec_bits_1_dummy2_0$EN),
								 .Q_OUT(m_spec_bits_1_dummy2_0$Q_OUT));

  // submodule m_spec_bits_1_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_1_dummy2_1(.CLK(CLK),
								 .D_IN(m_spec_bits_1_dummy2_1$D_IN),
								 .EN(m_spec_bits_1_dummy2_1$EN),
								 .Q_OUT(m_spec_bits_1_dummy2_1$Q_OUT));

  // submodule m_spec_bits_2_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_2_dummy2_0(.CLK(CLK),
								 .D_IN(m_spec_bits_2_dummy2_0$D_IN),
								 .EN(m_spec_bits_2_dummy2_0$EN),
								 .Q_OUT(m_spec_bits_2_dummy2_0$Q_OUT));

  // submodule m_spec_bits_2_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_2_dummy2_1(.CLK(CLK),
								 .D_IN(m_spec_bits_2_dummy2_1$D_IN),
								 .EN(m_spec_bits_2_dummy2_1$EN),
								 .Q_OUT(m_spec_bits_2_dummy2_1$Q_OUT));

  // submodule m_spec_bits_3_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_3_dummy2_0(.CLK(CLK),
								 .D_IN(m_spec_bits_3_dummy2_0$D_IN),
								 .EN(m_spec_bits_3_dummy2_0$EN),
								 .Q_OUT(m_spec_bits_3_dummy2_0$Q_OUT));

  // submodule m_spec_bits_3_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_3_dummy2_1(.CLK(CLK),
								 .D_IN(m_spec_bits_3_dummy2_1$D_IN),
								 .EN(m_spec_bits_3_dummy2_1$EN),
								 .Q_OUT(m_spec_bits_3_dummy2_1$Q_OUT));

  // submodule m_valid_0_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_0_dummy2_0(.CLK(CLK),
							     .D_IN(m_valid_0_dummy2_0$D_IN),
							     .EN(m_valid_0_dummy2_0$EN),
							     .Q_OUT(m_valid_0_dummy2_0$Q_OUT));

  // submodule m_valid_0_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_0_dummy2_1(.CLK(CLK),
							     .D_IN(m_valid_0_dummy2_1$D_IN),
							     .EN(m_valid_0_dummy2_1$EN),
							     .Q_OUT(m_valid_0_dummy2_1$Q_OUT));

  // submodule m_valid_1_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_1_dummy2_0(.CLK(CLK),
							     .D_IN(m_valid_1_dummy2_0$D_IN),
							     .EN(m_valid_1_dummy2_0$EN),
							     .Q_OUT(m_valid_1_dummy2_0$Q_OUT));

  // submodule m_valid_1_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_1_dummy2_1(.CLK(CLK),
							     .D_IN(m_valid_1_dummy2_1$D_IN),
							     .EN(m_valid_1_dummy2_1$EN),
							     .Q_OUT(m_valid_1_dummy2_1$Q_OUT));

  // submodule m_valid_2_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_2_dummy2_0(.CLK(CLK),
							     .D_IN(m_valid_2_dummy2_0$D_IN),
							     .EN(m_valid_2_dummy2_0$EN),
							     .Q_OUT(m_valid_2_dummy2_0$Q_OUT));

  // submodule m_valid_2_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_2_dummy2_1(.CLK(CLK),
							     .D_IN(m_valid_2_dummy2_1$D_IN),
							     .EN(m_valid_2_dummy2_1$EN),
							     .Q_OUT(m_valid_2_dummy2_1$Q_OUT));

  // submodule m_valid_3_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_3_dummy2_0(.CLK(CLK),
							     .D_IN(m_valid_3_dummy2_0$D_IN),
							     .EN(m_valid_3_dummy2_0$EN),
							     .Q_OUT(m_valid_3_dummy2_0$Q_OUT));

  // submodule m_valid_3_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_3_dummy2_1(.CLK(CLK),
							     .D_IN(m_valid_3_dummy2_1$D_IN),
							     .EN(m_valid_3_dummy2_1$EN),
							     .Q_OUT(m_valid_3_dummy2_1$Q_OUT));

  // rule RL_m_setReadyWire
  assign CAN_FIRE_RL_m_setReadyWire = 1'd1 ;
  assign WILL_FIRE_RL_m_setReadyWire = 1'd1 ;

  // rule RL_m_setWireForEnq
  assign CAN_FIRE_RL_m_setWireForEnq = 1'd1 ;
  assign WILL_FIRE_RL_m_setWireForEnq = 1'd1 ;

  // rule RL_m_valid_0_canon
  assign CAN_FIRE_RL_m_valid_0_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_valid_0_canon = 1'd1 ;

  // rule RL_m_valid_1_canon
  assign CAN_FIRE_RL_m_valid_1_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_valid_1_canon = 1'd1 ;

  // rule RL_m_valid_2_canon
  assign CAN_FIRE_RL_m_valid_2_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_valid_2_canon = 1'd1 ;

  // rule RL_m_valid_3_canon
  assign CAN_FIRE_RL_m_valid_3_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_valid_3_canon = 1'd1 ;

  // rule RL_m_spec_bits_0_canon
  assign CAN_FIRE_RL_m_spec_bits_0_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_spec_bits_0_canon = 1'd1 ;

  // rule RL_m_spec_bits_1_canon
  assign CAN_FIRE_RL_m_spec_bits_1_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_spec_bits_1_canon = 1'd1 ;

  // rule RL_m_spec_bits_2_canon
  assign CAN_FIRE_RL_m_spec_bits_2_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_spec_bits_2_canon = 1'd1 ;

  // rule RL_m_spec_bits_3_canon
  assign CAN_FIRE_RL_m_spec_bits_3_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_spec_bits_3_canon = 1'd1 ;

  // rule RL_m_regs_ready_0_canon
  assign CAN_FIRE_RL_m_regs_ready_0_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_regs_ready_0_canon = 1'd1 ;

  // rule RL_m_regs_ready_1_canon
  assign CAN_FIRE_RL_m_regs_ready_1_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_regs_ready_1_canon = 1'd1 ;

  // rule RL_m_regs_ready_2_canon
  assign CAN_FIRE_RL_m_regs_ready_2_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_regs_ready_2_canon = 1'd1 ;

  // rule RL_m_regs_ready_3_canon
  assign CAN_FIRE_RL_m_regs_ready_3_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_regs_ready_3_canon = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_m_valid_0_dummy2_0$write_1__SEL_1 =
	     EN_doDispatch && idx__h36648 == 2'd0 ;
  assign MUX_m_valid_0_dummy2_0$write_1__SEL_2 =
	     EN_specUpdate_incorrectSpeculation &&
	     (specUpdate_incorrectSpeculation_kill_all ||
	      bs__h56524[specUpdate_incorrectSpeculation_kill_tag]) ;
  assign MUX_m_valid_1_dummy2_0$write_1__SEL_1 =
	     EN_doDispatch && idx__h36648 == 2'd1 ;
  assign MUX_m_valid_1_dummy2_0$write_1__SEL_2 =
	     EN_specUpdate_incorrectSpeculation &&
	     (specUpdate_incorrectSpeculation_kill_all ||
	      bs__h56712[specUpdate_incorrectSpeculation_kill_tag]) ;
  assign MUX_m_valid_2_dummy2_0$write_1__SEL_1 =
	     EN_doDispatch && idx__h36648 == 2'd2 ;
  assign MUX_m_valid_2_dummy2_0$write_1__SEL_2 =
	     EN_specUpdate_incorrectSpeculation &&
	     (specUpdate_incorrectSpeculation_kill_all ||
	      bs__h56900[specUpdate_incorrectSpeculation_kill_tag]) ;
  assign MUX_m_valid_3_dummy2_0$write_1__SEL_1 =
	     EN_doDispatch && idx__h36648 == 2'd3 ;
  assign MUX_m_valid_3_dummy2_0$write_1__SEL_2 =
	     EN_specUpdate_incorrectSpeculation &&
	     (specUpdate_incorrectSpeculation_kill_all ||
	      bs__h57076[specUpdate_incorrectSpeculation_kill_tag]) ;

  // inlined wires
  assign m_valid_0_lat_0$whas =
	     MUX_m_valid_0_dummy2_0$write_1__SEL_1 ||
	     MUX_m_valid_0_dummy2_0$write_1__SEL_2 ;
  assign m_valid_0_lat_1$whas = EN_enq && m_enqP_wire$wget[1:0] == 2'd0 ;
  assign m_valid_1_lat_0$whas =
	     MUX_m_valid_1_dummy2_0$write_1__SEL_1 ||
	     MUX_m_valid_1_dummy2_0$write_1__SEL_2 ;
  assign m_valid_1_lat_1$whas = EN_enq && m_enqP_wire$wget[1:0] == 2'd1 ;
  assign m_valid_2_lat_0$whas =
	     MUX_m_valid_2_dummy2_0$write_1__SEL_1 ||
	     MUX_m_valid_2_dummy2_0$write_1__SEL_2 ;
  assign m_valid_2_lat_1$whas = EN_enq && m_enqP_wire$wget[1:0] == 2'd2 ;
  assign m_valid_3_lat_0$whas =
	     MUX_m_valid_3_dummy2_0$write_1__SEL_1 ||
	     MUX_m_valid_3_dummy2_0$write_1__SEL_2 ;
  assign m_valid_3_lat_1$whas = EN_enq && m_enqP_wire$wget[1:0] == 2'd3 ;
  assign m_regs_ready_0_lat_0$wget =
	     { !setRegReady_0_put[7] && !m_regs_0[32] ||
	       setRegReady_0_put[7] && m_regs_0[32] &&
	       setRegReady_0_put[6:0] == m_regs_0[31:25] ||
	       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d145,
	       !setRegReady_0_put[7] && !m_regs_0[24] ||
	       setRegReady_0_put[7] && m_regs_0[24] &&
	       setRegReady_0_put[6:0] == m_regs_0[23:17] ||
	       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       m_regs_ready_0_rl[2],
	       !setRegReady_0_put[7] && !m_regs_0[16] ||
	       setRegReady_0_put[7] && m_regs_0[16] &&
	       setRegReady_0_put[6:0] == m_regs_0[15:9] ||
	       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       m_regs_ready_0_rl[1],
	       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       m_regs_ready_0_rl[0] } ;
  assign m_regs_ready_0_lat_1$wget =
	     { NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d648,
	       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d657,
	       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d666,
	       m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d643 &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d668 } ;
  assign m_regs_ready_0_lat_2$wget =
	     { !setRegReady_2_put[7] && !m_regs_0[32] ||
	       setRegReady_2_put[7] && m_regs_0[32] &&
	       setRegReady_2_put[6:0] == m_regs_0[31:25] ||
	       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d790 &&
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d792,
	       !setRegReady_2_put[7] && !m_regs_0[24] ||
	       setRegReady_2_put[7] && m_regs_0[24] &&
	       setRegReady_2_put[6:0] == m_regs_0[23:17] ||
	       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d790 &&
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d801,
	       !setRegReady_2_put[7] && !m_regs_0[16] ||
	       setRegReady_2_put[7] && m_regs_0[16] &&
	       setRegReady_2_put[6:0] == m_regs_0[15:9] ||
	       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d790 &&
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d810,
	       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d790 &&
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d814 } ;
  assign m_regs_ready_0_lat_3$wget =
	     { !setRegReady_3_put[7] && !m_regs_0[32] ||
	       setRegReady_3_put[7] && m_regs_0[32] &&
	       setRegReady_3_put[6:0] == m_regs_0[31:25] ||
	       m_regs_ready_0_dummy2_3$Q_OUT &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d934,
	       !setRegReady_3_put[7] && !m_regs_0[24] ||
	       setRegReady_3_put[7] && m_regs_0[24] &&
	       setRegReady_3_put[6:0] == m_regs_0[23:17] ||
	       m_regs_ready_0_dummy2_3$Q_OUT &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d943,
	       !setRegReady_3_put[7] && !m_regs_0[16] ||
	       setRegReady_3_put[7] && m_regs_0[16] &&
	       setRegReady_3_put[6:0] == m_regs_0[15:9] ||
	       m_regs_ready_0_dummy2_3$Q_OUT &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d952,
	       m_regs_ready_0_dummy2_3$Q_OUT &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d956 } ;
  assign m_regs_ready_0_lat_4$wget =
	     { !setRegReady_4_put[7] && !m_regs_0[32] ||
	       setRegReady_4_put[7] && m_regs_0[32] &&
	       setRegReady_4_put[6:0] == m_regs_0[31:25] ||
	       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1073,
	       !setRegReady_4_put[7] && !m_regs_0[24] ||
	       setRegReady_4_put[7] && m_regs_0[24] &&
	       setRegReady_4_put[6:0] == m_regs_0[23:17] ||
	       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1082,
	       !setRegReady_4_put[7] && !m_regs_0[16] ||
	       setRegReady_4_put[7] && m_regs_0[16] &&
	       setRegReady_4_put[6:0] == m_regs_0[15:9] ||
	       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1091,
	       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1095 } ;
  assign m_regs_ready_1_lat_0$wget =
	     { !setRegReady_0_put[7] && !m_regs_1[32] ||
	       setRegReady_0_put[7] && m_regs_1[32] &&
	       setRegReady_0_put[6:0] == m_regs_1[31:25] ||
	       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d164,
	       !setRegReady_0_put[7] && !m_regs_1[24] ||
	       setRegReady_0_put[7] && m_regs_1[24] &&
	       setRegReady_0_put[6:0] == m_regs_1[23:17] ||
	       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       m_regs_ready_1_rl[2],
	       !setRegReady_0_put[7] && !m_regs_1[16] ||
	       setRegReady_0_put[7] && m_regs_1[16] &&
	       setRegReady_0_put[6:0] == m_regs_1[15:9] ||
	       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       m_regs_ready_1_rl[1],
	       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       m_regs_ready_1_rl[0] } ;
  assign m_regs_ready_1_lat_1$wget =
	     { NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d684,
	       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d693,
	       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d702,
	       m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d679 &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d704 } ;
  assign m_regs_ready_1_lat_2$wget =
	     { !setRegReady_2_put[7] && !m_regs_1[32] ||
	       setRegReady_2_put[7] && m_regs_1[32] &&
	       setRegReady_2_put[6:0] == m_regs_1[31:25] ||
	       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d825 &&
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d827,
	       !setRegReady_2_put[7] && !m_regs_1[24] ||
	       setRegReady_2_put[7] && m_regs_1[24] &&
	       setRegReady_2_put[6:0] == m_regs_1[23:17] ||
	       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d825 &&
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d836,
	       !setRegReady_2_put[7] && !m_regs_1[16] ||
	       setRegReady_2_put[7] && m_regs_1[16] &&
	       setRegReady_2_put[6:0] == m_regs_1[15:9] ||
	       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d825 &&
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d845,
	       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d825 &&
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d849 } ;
  assign m_regs_ready_1_lat_3$wget =
	     { !setRegReady_3_put[7] && !m_regs_1[32] ||
	       setRegReady_3_put[7] && m_regs_1[32] &&
	       setRegReady_3_put[6:0] == m_regs_1[31:25] ||
	       m_regs_ready_1_dummy2_3$Q_OUT &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d968,
	       !setRegReady_3_put[7] && !m_regs_1[24] ||
	       setRegReady_3_put[7] && m_regs_1[24] &&
	       setRegReady_3_put[6:0] == m_regs_1[23:17] ||
	       m_regs_ready_1_dummy2_3$Q_OUT &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d977,
	       !setRegReady_3_put[7] && !m_regs_1[16] ||
	       setRegReady_3_put[7] && m_regs_1[16] &&
	       setRegReady_3_put[6:0] == m_regs_1[15:9] ||
	       m_regs_ready_1_dummy2_3$Q_OUT &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d986,
	       m_regs_ready_1_dummy2_3$Q_OUT &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d990 } ;
  assign m_regs_ready_1_lat_4$wget =
	     { !setRegReady_4_put[7] && !m_regs_1[32] ||
	       setRegReady_4_put[7] && m_regs_1[32] &&
	       setRegReady_4_put[6:0] == m_regs_1[31:25] ||
	       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1106,
	       !setRegReady_4_put[7] && !m_regs_1[24] ||
	       setRegReady_4_put[7] && m_regs_1[24] &&
	       setRegReady_4_put[6:0] == m_regs_1[23:17] ||
	       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1115,
	       !setRegReady_4_put[7] && !m_regs_1[16] ||
	       setRegReady_4_put[7] && m_regs_1[16] &&
	       setRegReady_4_put[6:0] == m_regs_1[15:9] ||
	       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1124,
	       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1128 } ;
  assign m_regs_ready_2_lat_0$wget =
	     { !setRegReady_0_put[7] && !m_regs_2[32] ||
	       setRegReady_0_put[7] && m_regs_2[32] &&
	       setRegReady_0_put[6:0] == m_regs_2[31:25] ||
	       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d183,
	       !setRegReady_0_put[7] && !m_regs_2[24] ||
	       setRegReady_0_put[7] && m_regs_2[24] &&
	       setRegReady_0_put[6:0] == m_regs_2[23:17] ||
	       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       m_regs_ready_2_rl[2],
	       !setRegReady_0_put[7] && !m_regs_2[16] ||
	       setRegReady_0_put[7] && m_regs_2[16] &&
	       setRegReady_0_put[6:0] == m_regs_2[15:9] ||
	       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       m_regs_ready_2_rl[1],
	       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       m_regs_ready_2_rl[0] } ;
  assign m_regs_ready_2_lat_1$wget =
	     { NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d720,
	       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d729,
	       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d738,
	       m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d715 &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d740 } ;
  assign m_regs_ready_2_lat_2$wget =
	     { !setRegReady_2_put[7] && !m_regs_2[32] ||
	       setRegReady_2_put[7] && m_regs_2[32] &&
	       setRegReady_2_put[6:0] == m_regs_2[31:25] ||
	       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d860 &&
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d862,
	       !setRegReady_2_put[7] && !m_regs_2[24] ||
	       setRegReady_2_put[7] && m_regs_2[24] &&
	       setRegReady_2_put[6:0] == m_regs_2[23:17] ||
	       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d860 &&
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d871,
	       !setRegReady_2_put[7] && !m_regs_2[16] ||
	       setRegReady_2_put[7] && m_regs_2[16] &&
	       setRegReady_2_put[6:0] == m_regs_2[15:9] ||
	       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d860 &&
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d880,
	       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d860 &&
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d884 } ;
  assign m_regs_ready_2_lat_3$wget =
	     { !setRegReady_3_put[7] && !m_regs_2[32] ||
	       setRegReady_3_put[7] && m_regs_2[32] &&
	       setRegReady_3_put[6:0] == m_regs_2[31:25] ||
	       m_regs_ready_2_dummy2_3$Q_OUT &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1002,
	       !setRegReady_3_put[7] && !m_regs_2[24] ||
	       setRegReady_3_put[7] && m_regs_2[24] &&
	       setRegReady_3_put[6:0] == m_regs_2[23:17] ||
	       m_regs_ready_2_dummy2_3$Q_OUT &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1011,
	       !setRegReady_3_put[7] && !m_regs_2[16] ||
	       setRegReady_3_put[7] && m_regs_2[16] &&
	       setRegReady_3_put[6:0] == m_regs_2[15:9] ||
	       m_regs_ready_2_dummy2_3$Q_OUT &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1020,
	       m_regs_ready_2_dummy2_3$Q_OUT &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1024 } ;
  assign m_regs_ready_2_lat_4$wget =
	     { !setRegReady_4_put[7] && !m_regs_2[32] ||
	       setRegReady_4_put[7] && m_regs_2[32] &&
	       setRegReady_4_put[6:0] == m_regs_2[31:25] ||
	       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1139,
	       !setRegReady_4_put[7] && !m_regs_2[24] ||
	       setRegReady_4_put[7] && m_regs_2[24] &&
	       setRegReady_4_put[6:0] == m_regs_2[23:17] ||
	       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1148,
	       !setRegReady_4_put[7] && !m_regs_2[16] ||
	       setRegReady_4_put[7] && m_regs_2[16] &&
	       setRegReady_4_put[6:0] == m_regs_2[15:9] ||
	       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1157,
	       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1161 } ;
  assign m_regs_ready_3_lat_0$wget =
	     { !setRegReady_0_put[7] && !m_regs_3[32] ||
	       setRegReady_0_put[7] && m_regs_3[32] &&
	       setRegReady_0_put[6:0] == m_regs_3[31:25] ||
	       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d202,
	       !setRegReady_0_put[7] && !m_regs_3[24] ||
	       setRegReady_0_put[7] && m_regs_3[24] &&
	       setRegReady_0_put[6:0] == m_regs_3[23:17] ||
	       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       m_regs_ready_3_rl[2],
	       !setRegReady_0_put[7] && !m_regs_3[16] ||
	       setRegReady_0_put[7] && m_regs_3[16] &&
	       setRegReady_0_put[6:0] == m_regs_3[15:9] ||
	       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       m_regs_ready_3_rl[1],
	       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       m_regs_ready_3_rl[0] } ;
  assign m_regs_ready_3_lat_1$wget =
	     { NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d756,
	       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d765,
	       NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d774,
	       m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d751 &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d776 } ;
  assign m_regs_ready_3_lat_2$wget =
	     { !setRegReady_2_put[7] && !m_regs_3[32] ||
	       setRegReady_2_put[7] && m_regs_3[32] &&
	       setRegReady_2_put[6:0] == m_regs_3[31:25] ||
	       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d895 &&
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d897,
	       !setRegReady_2_put[7] && !m_regs_3[24] ||
	       setRegReady_2_put[7] && m_regs_3[24] &&
	       setRegReady_2_put[6:0] == m_regs_3[23:17] ||
	       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d895 &&
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d906,
	       !setRegReady_2_put[7] && !m_regs_3[16] ||
	       setRegReady_2_put[7] && m_regs_3[16] &&
	       setRegReady_2_put[6:0] == m_regs_3[15:9] ||
	       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d895 &&
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d915,
	       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d895 &&
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d919 } ;
  assign m_regs_ready_3_lat_3$wget =
	     { !setRegReady_3_put[7] && !m_regs_3[32] ||
	       setRegReady_3_put[7] && m_regs_3[32] &&
	       setRegReady_3_put[6:0] == m_regs_3[31:25] ||
	       m_regs_ready_3_dummy2_3$Q_OUT &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1036,
	       !setRegReady_3_put[7] && !m_regs_3[24] ||
	       setRegReady_3_put[7] && m_regs_3[24] &&
	       setRegReady_3_put[6:0] == m_regs_3[23:17] ||
	       m_regs_ready_3_dummy2_3$Q_OUT &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1045,
	       !setRegReady_3_put[7] && !m_regs_3[16] ||
	       setRegReady_3_put[7] && m_regs_3[16] &&
	       setRegReady_3_put[6:0] == m_regs_3[15:9] ||
	       m_regs_ready_3_dummy2_3$Q_OUT &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1054,
	       m_regs_ready_3_dummy2_3$Q_OUT &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1058 } ;
  assign m_regs_ready_3_lat_4$wget =
	     { !setRegReady_4_put[7] && !m_regs_3[32] ||
	       setRegReady_4_put[7] && m_regs_3[32] &&
	       setRegReady_4_put[6:0] == m_regs_3[31:25] ||
	       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1172,
	       !setRegReady_4_put[7] && !m_regs_3[24] ||
	       setRegReady_4_put[7] && m_regs_3[24] &&
	       setRegReady_4_put[6:0] == m_regs_3[23:17] ||
	       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1181,
	       !setRegReady_4_put[7] && !m_regs_3[16] ||
	       setRegReady_4_put[7] && m_regs_3[16] &&
	       setRegReady_4_put[6:0] == m_regs_3[15:9] ||
	       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1190,
	       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1194 } ;
  assign m_ready_wire_0$wget =
	     m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d145 &&
	     m_regs_ready_0_rl[2] &&
	     m_regs_ready_0_rl[1] &&
	     m_regs_ready_0_rl[0] ;
  assign m_ready_wire_1$wget =
	     m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d164 &&
	     m_regs_ready_1_rl[2] &&
	     m_regs_ready_1_rl[1] &&
	     m_regs_ready_1_rl[0] ;
  assign m_ready_wire_2$wget =
	     m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d183 &&
	     m_regs_ready_2_rl[2] &&
	     m_regs_ready_2_rl[1] &&
	     m_regs_ready_2_rl[0] ;
  assign m_ready_wire_3$wget =
	     m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d202 &&
	     m_regs_ready_3_rl[2] &&
	     m_regs_ready_3_rl[1] &&
	     m_regs_ready_3_rl[0] ;
  assign m_enqP_wire$wget =
	     { NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d223 ||
	       NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d238,
	       m_valid_0_dummy2_0_read__09_AND_m_valid_0_dumm_ETC___d244 ?
		 ((m_valid_2_dummy2_0$Q_OUT && m_valid_2_dummy2_1$Q_OUT &&
		   m_valid_2_rl) ?
		    2'd3 :
		    2'd2) :
		 ((m_valid_0_dummy2_0$Q_OUT && m_valid_0_dummy2_1$Q_OUT &&
		   m_valid_0_rl) ?
		    2'd1 :
		    2'd0) } ;

  // register m_data_0
  assign m_data_0$D_IN = enq_x[92:54] ;
  assign m_data_0$EN = m_valid_0_lat_1$whas ;

  // register m_data_1
  assign m_data_1$D_IN = enq_x[92:54] ;
  assign m_data_1$EN = m_valid_1_lat_1$whas ;

  // register m_data_2
  assign m_data_2$D_IN = enq_x[92:54] ;
  assign m_data_2$EN = m_valid_2_lat_1$whas ;

  // register m_data_3
  assign m_data_3$D_IN = enq_x[92:54] ;
  assign m_data_3$EN = m_valid_3_lat_1$whas ;

  // register m_regs_0
  assign m_regs_0$D_IN = enq_x[53:21] ;
  assign m_regs_0$EN = m_valid_0_lat_1$whas ;

  // register m_regs_1
  assign m_regs_1$D_IN = enq_x[53:21] ;
  assign m_regs_1$EN = m_valid_1_lat_1$whas ;

  // register m_regs_2
  assign m_regs_2$D_IN = enq_x[53:21] ;
  assign m_regs_2$EN = m_valid_2_lat_1$whas ;

  // register m_regs_3
  assign m_regs_3$D_IN = enq_x[53:21] ;
  assign m_regs_3$EN = m_valid_3_lat_1$whas ;

  // register m_regs_ready_0_rl
  assign m_regs_ready_0_rl$D_IN =
	     m_valid_0_lat_1$whas ?
	       enq_x[3:0] :
	       (EN_setRegReady_4_put ?
		  m_regs_ready_0_lat_4$wget :
		  IF_m_regs_ready_0_lat_3_whas__1_THEN_m_regs_re_ETC___d73) ;
  assign m_regs_ready_0_rl$EN = 1'd1 ;

  // register m_regs_ready_1_rl
  assign m_regs_ready_1_rl$D_IN =
	     m_valid_1_lat_1$whas ?
	       enq_x[3:0] :
	       (EN_setRegReady_4_put ?
		  m_regs_ready_1_lat_4$wget :
		  IF_m_regs_ready_1_lat_3_whas__0_THEN_m_regs_re_ETC___d92) ;
  assign m_regs_ready_1_rl$EN = 1'd1 ;

  // register m_regs_ready_2_rl
  assign m_regs_ready_2_rl$D_IN =
	     m_valid_2_lat_1$whas ?
	       enq_x[3:0] :
	       (EN_setRegReady_4_put ?
		  m_regs_ready_2_lat_4$wget :
		  IF_m_regs_ready_2_lat_3_whas__9_THEN_m_regs_re_ETC___d111) ;
  assign m_regs_ready_2_rl$EN = 1'd1 ;

  // register m_regs_ready_3_rl
  assign m_regs_ready_3_rl$D_IN =
	     m_valid_3_lat_1$whas ?
	       enq_x[3:0] :
	       (EN_setRegReady_4_put ?
		  m_regs_ready_3_lat_4$wget :
		  IF_m_regs_ready_3_lat_3_whas__18_THEN_m_regs_r_ETC___d130) ;
  assign m_regs_ready_3_rl$EN = 1'd1 ;

  // register m_spec_bits_0_rl
  assign m_spec_bits_0_rl$D_IN =
	     EN_specUpdate_correctSpeculation ?
	       upd__h6225 :
	       IF_m_spec_bits_0_lat_0_whas__1_THEN_m_spec_bit_ETC___d34 ;
  assign m_spec_bits_0_rl$EN = 1'd1 ;

  // register m_spec_bits_1_rl
  assign m_spec_bits_1_rl$D_IN =
	     EN_specUpdate_correctSpeculation ?
	       upd__h7154 :
	       IF_m_spec_bits_1_lat_0_whas__8_THEN_m_spec_bit_ETC___d41 ;
  assign m_spec_bits_1_rl$EN = 1'd1 ;

  // register m_spec_bits_2_rl
  assign m_spec_bits_2_rl$D_IN =
	     EN_specUpdate_correctSpeculation ?
	       upd__h8083 :
	       IF_m_spec_bits_2_lat_0_whas__5_THEN_m_spec_bit_ETC___d48 ;
  assign m_spec_bits_2_rl$EN = 1'd1 ;

  // register m_spec_bits_3_rl
  assign m_spec_bits_3_rl$D_IN =
	     EN_specUpdate_correctSpeculation ?
	       upd__h9012 :
	       IF_m_spec_bits_3_lat_0_whas__2_THEN_m_spec_bit_ETC___d55 ;
  assign m_spec_bits_3_rl$EN = 1'd1 ;

  // register m_spec_tag_0
  assign m_spec_tag_0$D_IN = enq_x[6:4] ;
  assign m_spec_tag_0$EN = m_valid_0_lat_1$whas ;

  // register m_spec_tag_1
  assign m_spec_tag_1$D_IN = enq_x[6:4] ;
  assign m_spec_tag_1$EN = m_valid_1_lat_1$whas ;

  // register m_spec_tag_2
  assign m_spec_tag_2$D_IN = enq_x[6:4] ;
  assign m_spec_tag_2$EN = m_valid_2_lat_1$whas ;

  // register m_spec_tag_3
  assign m_spec_tag_3$D_IN = enq_x[6:4] ;
  assign m_spec_tag_3$EN = m_valid_3_lat_1$whas ;

  // register m_tag_0
  assign m_tag_0$D_IN = enq_x[20:11] ;
  assign m_tag_0$EN = m_valid_0_lat_1$whas ;

  // register m_tag_1
  assign m_tag_1$D_IN = enq_x[20:11] ;
  assign m_tag_1$EN = m_valid_1_lat_1$whas ;

  // register m_tag_2
  assign m_tag_2$D_IN = enq_x[20:11] ;
  assign m_tag_2$EN = m_valid_2_lat_1$whas ;

  // register m_tag_3
  assign m_tag_3$D_IN = enq_x[20:11] ;
  assign m_tag_3$EN = m_valid_3_lat_1$whas ;

  // register m_validEntryCount
  assign m_validEntryCount$D_IN = 3'h0 ;
  assign m_validEntryCount$EN = 1'b0 ;

  // register m_valid_0_rl
  assign m_valid_0_rl$D_IN =
	     m_valid_0_lat_1$whas ||
	     (m_valid_0_lat_0$whas ? 1'd0 : m_valid_0_rl) ;
  assign m_valid_0_rl$EN = 1'd1 ;

  // register m_valid_1_rl
  assign m_valid_1_rl$D_IN =
	     m_valid_1_lat_1$whas ||
	     (m_valid_1_lat_0$whas ? 1'd0 : m_valid_1_rl) ;
  assign m_valid_1_rl$EN = 1'd1 ;

  // register m_valid_2_rl
  assign m_valid_2_rl$D_IN =
	     m_valid_2_lat_1$whas ||
	     (m_valid_2_lat_0$whas ? 1'd0 : m_valid_2_rl) ;
  assign m_valid_2_rl$EN = 1'd1 ;

  // register m_valid_3_rl
  assign m_valid_3_rl$D_IN =
	     m_valid_3_lat_1$whas ||
	     (m_valid_3_lat_0$whas ? 1'd0 : m_valid_3_rl) ;
  assign m_valid_3_rl$EN = 1'd1 ;

  // submodule m_regs_ready_0_dummy2_0
  assign m_regs_ready_0_dummy2_0$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_0$EN = EN_setRegReady_0_put ;

  // submodule m_regs_ready_0_dummy2_1
  assign m_regs_ready_0_dummy2_1$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_1$EN = EN_setRegReady_1_put ;

  // submodule m_regs_ready_0_dummy2_2
  assign m_regs_ready_0_dummy2_2$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_2$EN = EN_setRegReady_2_put ;

  // submodule m_regs_ready_0_dummy2_3
  assign m_regs_ready_0_dummy2_3$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_3$EN = EN_setRegReady_3_put ;

  // submodule m_regs_ready_0_dummy2_4
  assign m_regs_ready_0_dummy2_4$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_4$EN = EN_setRegReady_4_put ;

  // submodule m_regs_ready_0_dummy2_5
  assign m_regs_ready_0_dummy2_5$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_5$EN = m_valid_0_lat_1$whas ;

  // submodule m_regs_ready_1_dummy2_0
  assign m_regs_ready_1_dummy2_0$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_0$EN = EN_setRegReady_0_put ;

  // submodule m_regs_ready_1_dummy2_1
  assign m_regs_ready_1_dummy2_1$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_1$EN = EN_setRegReady_1_put ;

  // submodule m_regs_ready_1_dummy2_2
  assign m_regs_ready_1_dummy2_2$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_2$EN = EN_setRegReady_2_put ;

  // submodule m_regs_ready_1_dummy2_3
  assign m_regs_ready_1_dummy2_3$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_3$EN = EN_setRegReady_3_put ;

  // submodule m_regs_ready_1_dummy2_4
  assign m_regs_ready_1_dummy2_4$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_4$EN = EN_setRegReady_4_put ;

  // submodule m_regs_ready_1_dummy2_5
  assign m_regs_ready_1_dummy2_5$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_5$EN = m_valid_1_lat_1$whas ;

  // submodule m_regs_ready_2_dummy2_0
  assign m_regs_ready_2_dummy2_0$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_0$EN = EN_setRegReady_0_put ;

  // submodule m_regs_ready_2_dummy2_1
  assign m_regs_ready_2_dummy2_1$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_1$EN = EN_setRegReady_1_put ;

  // submodule m_regs_ready_2_dummy2_2
  assign m_regs_ready_2_dummy2_2$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_2$EN = EN_setRegReady_2_put ;

  // submodule m_regs_ready_2_dummy2_3
  assign m_regs_ready_2_dummy2_3$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_3$EN = EN_setRegReady_3_put ;

  // submodule m_regs_ready_2_dummy2_4
  assign m_regs_ready_2_dummy2_4$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_4$EN = EN_setRegReady_4_put ;

  // submodule m_regs_ready_2_dummy2_5
  assign m_regs_ready_2_dummy2_5$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_5$EN = m_valid_2_lat_1$whas ;

  // submodule m_regs_ready_3_dummy2_0
  assign m_regs_ready_3_dummy2_0$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_0$EN = EN_setRegReady_0_put ;

  // submodule m_regs_ready_3_dummy2_1
  assign m_regs_ready_3_dummy2_1$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_1$EN = EN_setRegReady_1_put ;

  // submodule m_regs_ready_3_dummy2_2
  assign m_regs_ready_3_dummy2_2$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_2$EN = EN_setRegReady_2_put ;

  // submodule m_regs_ready_3_dummy2_3
  assign m_regs_ready_3_dummy2_3$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_3$EN = EN_setRegReady_3_put ;

  // submodule m_regs_ready_3_dummy2_4
  assign m_regs_ready_3_dummy2_4$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_4$EN = EN_setRegReady_4_put ;

  // submodule m_regs_ready_3_dummy2_5
  assign m_regs_ready_3_dummy2_5$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_5$EN = m_valid_3_lat_1$whas ;

  // submodule m_spec_bits_0_dummy2_0
  assign m_spec_bits_0_dummy2_0$D_IN = 1'd1 ;
  assign m_spec_bits_0_dummy2_0$EN = m_valid_0_lat_1$whas ;

  // submodule m_spec_bits_0_dummy2_1
  assign m_spec_bits_0_dummy2_1$D_IN = 1'd1 ;
  assign m_spec_bits_0_dummy2_1$EN = EN_specUpdate_correctSpeculation ;

  // submodule m_spec_bits_1_dummy2_0
  assign m_spec_bits_1_dummy2_0$D_IN = 1'd1 ;
  assign m_spec_bits_1_dummy2_0$EN = m_valid_1_lat_1$whas ;

  // submodule m_spec_bits_1_dummy2_1
  assign m_spec_bits_1_dummy2_1$D_IN = 1'd1 ;
  assign m_spec_bits_1_dummy2_1$EN = EN_specUpdate_correctSpeculation ;

  // submodule m_spec_bits_2_dummy2_0
  assign m_spec_bits_2_dummy2_0$D_IN = 1'd1 ;
  assign m_spec_bits_2_dummy2_0$EN = m_valid_2_lat_1$whas ;

  // submodule m_spec_bits_2_dummy2_1
  assign m_spec_bits_2_dummy2_1$D_IN = 1'd1 ;
  assign m_spec_bits_2_dummy2_1$EN = EN_specUpdate_correctSpeculation ;

  // submodule m_spec_bits_3_dummy2_0
  assign m_spec_bits_3_dummy2_0$D_IN = 1'd1 ;
  assign m_spec_bits_3_dummy2_0$EN = m_valid_3_lat_1$whas ;

  // submodule m_spec_bits_3_dummy2_1
  assign m_spec_bits_3_dummy2_1$D_IN = 1'd1 ;
  assign m_spec_bits_3_dummy2_1$EN = EN_specUpdate_correctSpeculation ;

  // submodule m_valid_0_dummy2_0
  assign m_valid_0_dummy2_0$D_IN = 1'd1 ;
  assign m_valid_0_dummy2_0$EN =
	     EN_doDispatch && idx__h36648 == 2'd0 ||
	     MUX_m_valid_0_dummy2_0$write_1__SEL_2 ;

  // submodule m_valid_0_dummy2_1
  assign m_valid_0_dummy2_1$D_IN = 1'd1 ;
  assign m_valid_0_dummy2_1$EN = m_valid_0_lat_1$whas ;

  // submodule m_valid_1_dummy2_0
  assign m_valid_1_dummy2_0$D_IN = 1'd1 ;
  assign m_valid_1_dummy2_0$EN =
	     EN_doDispatch && idx__h36648 == 2'd1 ||
	     MUX_m_valid_1_dummy2_0$write_1__SEL_2 ;

  // submodule m_valid_1_dummy2_1
  assign m_valid_1_dummy2_1$D_IN = 1'd1 ;
  assign m_valid_1_dummy2_1$EN = m_valid_1_lat_1$whas ;

  // submodule m_valid_2_dummy2_0
  assign m_valid_2_dummy2_0$D_IN = 1'd1 ;
  assign m_valid_2_dummy2_0$EN =
	     EN_doDispatch && idx__h36648 == 2'd2 ||
	     MUX_m_valid_2_dummy2_0$write_1__SEL_2 ;

  // submodule m_valid_2_dummy2_1
  assign m_valid_2_dummy2_1$D_IN = 1'd1 ;
  assign m_valid_2_dummy2_1$EN = m_valid_2_lat_1$whas ;

  // submodule m_valid_3_dummy2_0
  assign m_valid_3_dummy2_0$D_IN = 1'd1 ;
  assign m_valid_3_dummy2_0$EN =
	     EN_doDispatch && idx__h36648 == 2'd3 ||
	     MUX_m_valid_3_dummy2_0$write_1__SEL_2 ;

  // submodule m_valid_3_dummy2_1
  assign m_valid_3_dummy2_1$D_IN = 1'd1 ;
  assign m_valid_3_dummy2_1$EN = m_valid_3_lat_1$whas ;

  // remaining internal signals
  assign IF_NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_ETC___d325 =
	     (NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d300 ||
	      IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m_robEnqTi_ETC___d316 <
	      IF_m_tag_1_17_BITS_4_TO_0_18_ULT_IF_m_robEnqTi_ETC___d322) ?
	       2'd0 :
	       2'd1 ;
  assign IF_NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_ETC___d342 =
	     (NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d306 ||
	      IF_m_tag_2_28_BITS_4_TO_0_29_ULT_IF_m_robEnqTi_ETC___d333 <
	      IF_m_tag_3_34_BITS_4_TO_0_35_ULT_IF_m_robEnqTi_ETC___d339) ?
	       2'd2 :
	       2'd3 ;
  assign IF_SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10__ETC___d350 =
	     (SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d344 ||
	      SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d346 <
	      SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d347) ?
	       a__h36862 :
	       b__h36863 ;
  assign IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d646 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_0_lat_0$wget[3] :
	       m_regs_ready_0_rl[3] ;
  assign IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d655 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_0_lat_0$wget[2] :
	       m_regs_ready_0_rl[2] ;
  assign IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d664 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_0_lat_0$wget[1] :
	       m_regs_ready_0_rl[1] ;
  assign IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d668 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_0_lat_0$wget[0] :
	       m_regs_ready_0_rl[0] ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d71 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget :
	       (EN_setRegReady_0_put ?
		  m_regs_ready_0_lat_0$wget :
		  m_regs_ready_0_rl) ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d792 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget[3] :
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d646 ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d801 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget[2] :
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d655 ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d810 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget[1] :
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d664 ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d814 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget[0] :
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d668 ;
  assign IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d934 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_0_lat_2$wget[3] :
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d792 ;
  assign IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d943 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_0_lat_2$wget[2] :
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d801 ;
  assign IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d952 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_0_lat_2$wget[1] :
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d810 ;
  assign IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d956 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_0_lat_2$wget[0] :
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d814 ;
  assign IF_m_regs_ready_0_lat_3_whas__1_THEN_m_regs_re_ETC___d73 =
	     EN_setRegReady_3_put ?
	       m_regs_ready_0_lat_3$wget :
	       (EN_setRegReady_2_put ?
		  m_regs_ready_0_lat_2$wget :
		  IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d71) ;
  assign IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d682 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_1_lat_0$wget[3] :
	       m_regs_ready_1_rl[3] ;
  assign IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d691 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_1_lat_0$wget[2] :
	       m_regs_ready_1_rl[2] ;
  assign IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d700 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_1_lat_0$wget[1] :
	       m_regs_ready_1_rl[1] ;
  assign IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d704 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_1_lat_0$wget[0] :
	       m_regs_ready_1_rl[0] ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d827 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget[3] :
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d682 ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d836 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget[2] :
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d691 ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d845 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget[1] :
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d700 ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d849 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget[0] :
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d704 ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d90 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget :
	       (EN_setRegReady_0_put ?
		  m_regs_ready_1_lat_0$wget :
		  m_regs_ready_1_rl) ;
  assign IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d968 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_1_lat_2$wget[3] :
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d827 ;
  assign IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d977 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_1_lat_2$wget[2] :
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d836 ;
  assign IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d986 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_1_lat_2$wget[1] :
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d845 ;
  assign IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d990 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_1_lat_2$wget[0] :
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d849 ;
  assign IF_m_regs_ready_1_lat_3_whas__0_THEN_m_regs_re_ETC___d92 =
	     EN_setRegReady_3_put ?
	       m_regs_ready_1_lat_3$wget :
	       (EN_setRegReady_2_put ?
		  m_regs_ready_1_lat_2$wget :
		  IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d90) ;
  assign IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d718 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_2_lat_0$wget[3] :
	       m_regs_ready_2_rl[3] ;
  assign IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d727 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_2_lat_0$wget[2] :
	       m_regs_ready_2_rl[2] ;
  assign IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d736 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_2_lat_0$wget[1] :
	       m_regs_ready_2_rl[1] ;
  assign IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d740 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_2_lat_0$wget[0] :
	       m_regs_ready_2_rl[0] ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d109 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget :
	       (EN_setRegReady_0_put ?
		  m_regs_ready_2_lat_0$wget :
		  m_regs_ready_2_rl) ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d862 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget[3] :
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d718 ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d871 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget[2] :
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d727 ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d880 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget[1] :
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d736 ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d884 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget[0] :
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d740 ;
  assign IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1002 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_2_lat_2$wget[3] :
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d862 ;
  assign IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1011 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_2_lat_2$wget[2] :
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d871 ;
  assign IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1020 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_2_lat_2$wget[1] :
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d880 ;
  assign IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1024 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_2_lat_2$wget[0] :
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d884 ;
  assign IF_m_regs_ready_2_lat_3_whas__9_THEN_m_regs_re_ETC___d111 =
	     EN_setRegReady_3_put ?
	       m_regs_ready_2_lat_3$wget :
	       (EN_setRegReady_2_put ?
		  m_regs_ready_2_lat_2$wget :
		  IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d109) ;
  assign IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d754 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_3_lat_0$wget[3] :
	       m_regs_ready_3_rl[3] ;
  assign IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d763 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_3_lat_0$wget[2] :
	       m_regs_ready_3_rl[2] ;
  assign IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d772 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_3_lat_0$wget[1] :
	       m_regs_ready_3_rl[1] ;
  assign IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d776 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_3_lat_0$wget[0] :
	       m_regs_ready_3_rl[0] ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d128 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget :
	       (EN_setRegReady_0_put ?
		  m_regs_ready_3_lat_0$wget :
		  m_regs_ready_3_rl) ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d897 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget[3] :
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d754 ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d906 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget[2] :
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d763 ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d915 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget[1] :
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d772 ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d919 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget[0] :
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d776 ;
  assign IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1036 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_3_lat_2$wget[3] :
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d897 ;
  assign IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1045 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_3_lat_2$wget[2] :
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d906 ;
  assign IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1054 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_3_lat_2$wget[1] :
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d915 ;
  assign IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1058 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_3_lat_2$wget[0] :
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d919 ;
  assign IF_m_regs_ready_3_lat_3_whas__18_THEN_m_regs_r_ETC___d130 =
	     EN_setRegReady_3_put ?
	       m_regs_ready_3_lat_3$wget :
	       (EN_setRegReady_2_put ?
		  m_regs_ready_3_lat_2$wget :
		  IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d128) ;
  assign IF_m_spec_bits_0_lat_0_whas__1_THEN_m_spec_bit_ETC___d34 =
	     m_valid_0_lat_1$whas ? enq_x[10:7] : m_spec_bits_0_rl ;
  assign IF_m_spec_bits_1_lat_0_whas__8_THEN_m_spec_bit_ETC___d41 =
	     m_valid_1_lat_1$whas ? enq_x[10:7] : m_spec_bits_1_rl ;
  assign IF_m_spec_bits_2_lat_0_whas__5_THEN_m_spec_bit_ETC___d48 =
	     m_valid_2_lat_1$whas ? enq_x[10:7] : m_spec_bits_2_rl ;
  assign IF_m_spec_bits_3_lat_0_whas__2_THEN_m_spec_bit_ETC___d55 =
	     m_valid_3_lat_1$whas ? enq_x[10:7] : m_spec_bits_3_rl ;
  assign IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m_robEnqTi_ETC___d316 =
	     (m_tag_0[4:0] < x__read__h24362) ?
	       { 1'd0, m_tag_0[4:0] } + 6'd32 :
	       { 1'd0, m_tag_0[4:0] } ;
  assign IF_m_tag_1_17_BITS_4_TO_0_18_ULT_IF_m_robEnqTi_ETC___d322 =
	     (m_tag_1[4:0] < x__read__h24362) ?
	       { 1'd0, m_tag_1[4:0] } + 6'd32 :
	       { 1'd0, m_tag_1[4:0] } ;
  assign IF_m_tag_2_28_BITS_4_TO_0_29_ULT_IF_m_robEnqTi_ETC___d333 =
	     (m_tag_2[4:0] < x__read__h24362) ?
	       { 1'd0, m_tag_2[4:0] } + 6'd32 :
	       { 1'd0, m_tag_2[4:0] } ;
  assign IF_m_tag_3_34_BITS_4_TO_0_35_ULT_IF_m_robEnqTi_ETC___d339 =
	     (m_tag_3[4:0] < x__read__h24362) ?
	       { 1'd0, m_tag_3[4:0] } + 6'd32 :
	       { 1'd0, m_tag_3[4:0] } ;
  assign NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d223 =
	     !m_valid_0_dummy2_0$Q_OUT || !m_valid_0_dummy2_1$Q_OUT ||
	     !m_valid_0_rl ||
	     !m_valid_1_dummy2_0$Q_OUT ||
	     !m_valid_1_dummy2_1$Q_OUT ||
	     !m_valid_1_rl ;
  assign NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d297 =
	     !m_valid_0_dummy2_0$Q_OUT || !m_valid_0_dummy2_1$Q_OUT ||
	     !m_valid_0_rl ||
	     !m_ready_wire_0$wget ;
  assign NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d300 =
	     !m_valid_1_dummy2_0$Q_OUT || !m_valid_1_dummy2_1$Q_OUT ||
	     !m_valid_1_rl ||
	     !m_ready_wire_1$wget ;
  assign NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d238 =
	     !m_valid_2_dummy2_0$Q_OUT || !m_valid_2_dummy2_1$Q_OUT ||
	     !m_valid_2_rl ||
	     !m_valid_3_dummy2_0$Q_OUT ||
	     !m_valid_3_dummy2_1$Q_OUT ||
	     !m_valid_3_rl ;
  assign NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d303 =
	     !m_valid_2_dummy2_0$Q_OUT || !m_valid_2_dummy2_1$Q_OUT ||
	     !m_valid_2_rl ||
	     !m_ready_wire_2$wget ;
  assign NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d306 =
	     !m_valid_3_dummy2_0$Q_OUT || !m_valid_3_dummy2_1$Q_OUT ||
	     !m_valid_3_rl ||
	     !m_ready_wire_3$wget ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d648 =
	     !setRegReady_1_put[7] && !m_regs_0[32] ||
	     setRegReady_1_put[7] && m_regs_0[32] &&
	     setRegReady_1_put[6:0] == m_regs_0[31:25] ||
	     m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d643 &&
	     m_regs_ready_0_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d646 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d657 =
	     !setRegReady_1_put[7] && !m_regs_0[24] ||
	     setRegReady_1_put[7] && m_regs_0[24] &&
	     setRegReady_1_put[6:0] == m_regs_0[23:17] ||
	     m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d643 &&
	     m_regs_ready_0_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d655 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d666 =
	     !setRegReady_1_put[7] && !m_regs_0[16] ||
	     setRegReady_1_put[7] && m_regs_0[16] &&
	     setRegReady_1_put[6:0] == m_regs_0[15:9] ||
	     m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d643 &&
	     m_regs_ready_0_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d664 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d684 =
	     !setRegReady_1_put[7] && !m_regs_1[32] ||
	     setRegReady_1_put[7] && m_regs_1[32] &&
	     setRegReady_1_put[6:0] == m_regs_1[31:25] ||
	     m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d679 &&
	     m_regs_ready_1_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d682 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d693 =
	     !setRegReady_1_put[7] && !m_regs_1[24] ||
	     setRegReady_1_put[7] && m_regs_1[24] &&
	     setRegReady_1_put[6:0] == m_regs_1[23:17] ||
	     m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d679 &&
	     m_regs_ready_1_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d691 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d702 =
	     !setRegReady_1_put[7] && !m_regs_1[16] ||
	     setRegReady_1_put[7] && m_regs_1[16] &&
	     setRegReady_1_put[6:0] == m_regs_1[15:9] ||
	     m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d679 &&
	     m_regs_ready_1_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d700 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d720 =
	     !setRegReady_1_put[7] && !m_regs_2[32] ||
	     setRegReady_1_put[7] && m_regs_2[32] &&
	     setRegReady_1_put[6:0] == m_regs_2[31:25] ||
	     m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d715 &&
	     m_regs_ready_2_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d718 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d729 =
	     !setRegReady_1_put[7] && !m_regs_2[24] ||
	     setRegReady_1_put[7] && m_regs_2[24] &&
	     setRegReady_1_put[6:0] == m_regs_2[23:17] ||
	     m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d715 &&
	     m_regs_ready_2_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d727 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d738 =
	     !setRegReady_1_put[7] && !m_regs_2[16] ||
	     setRegReady_1_put[7] && m_regs_2[16] &&
	     setRegReady_1_put[6:0] == m_regs_2[15:9] ||
	     m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d715 &&
	     m_regs_ready_2_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d736 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d756 =
	     !setRegReady_1_put[7] && !m_regs_3[32] ||
	     setRegReady_1_put[7] && m_regs_3[32] &&
	     setRegReady_1_put[6:0] == m_regs_3[31:25] ||
	     m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d751 &&
	     m_regs_ready_3_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d754 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d765 =
	     !setRegReady_1_put[7] && !m_regs_3[24] ||
	     setRegReady_1_put[7] && m_regs_3[24] &&
	     setRegReady_1_put[6:0] == m_regs_3[23:17] ||
	     m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d751 &&
	     m_regs_ready_3_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d763 ;
  assign NOT_setRegReady_1_put_BIT_7_33_34_AND_NOT_m_re_ETC___d774 =
	     !setRegReady_1_put[7] && !m_regs_3[16] ||
	     setRegReady_1_put[7] && m_regs_3[16] &&
	     setRegReady_1_put[6:0] == m_regs_3[15:9] ||
	     m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d751 &&
	     m_regs_ready_3_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d772 ;
  assign SEL_ARR_m_data_0_86_BITS_35_TO_4_53_m_data_1_8_ETC___d384 =
	     { SEL_ARR_m_data_0_86_BITS_35_TO_4_53_m_data_1_8_ETC___d358,
	       !SEL_ARR_NOT_m_data_0_86_BIT_3_59_60_NOT_m_data_ETC___d368,
	       SEL_ARR_NOT_m_data_0_86_BIT_3_59_60_NOT_m_data_ETC___d368 ?
		 SEL_ARR_m_data_0_86_BITS_2_TO_0_70_m_data_1_88_ETC___d375 :
		 { 1'h0,
		   SEL_ARR_m_data_0_86_BITS_1_TO_0_76_m_data_1_88_ETC___d381 } } ;
  assign a__h36862 =
	     NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d297 ?
	       2'd1 :
	       IF_NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_ETC___d325 ;
  assign b__h36863 =
	     NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d303 ?
	       2'd3 :
	       IF_NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_ETC___d342 ;
  assign bs__h56524 =
	     (m_spec_bits_0_dummy2_0$Q_OUT && m_spec_bits_0_dummy2_1$Q_OUT) ?
	       m_spec_bits_0_rl :
	       4'd0 ;
  assign bs__h56712 =
	     (m_spec_bits_1_dummy2_0$Q_OUT && m_spec_bits_1_dummy2_1$Q_OUT) ?
	       m_spec_bits_1_rl :
	       4'd0 ;
  assign bs__h56900 =
	     (m_spec_bits_2_dummy2_0$Q_OUT && m_spec_bits_2_dummy2_1$Q_OUT) ?
	       m_spec_bits_2_rl :
	       4'd0 ;
  assign bs__h57076 =
	     (m_spec_bits_3_dummy2_0$Q_OUT && m_spec_bits_3_dummy2_1$Q_OUT) ?
	       m_spec_bits_3_rl :
	       4'd0 ;
  assign idx__h36648 =
	     SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d327 ?
	       b__h36863 :
	       IF_SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10__ETC___d350 ;
  assign m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 =
	     m_regs_ready_0_dummy2_0$Q_OUT && m_regs_ready_0_dummy2_1$Q_OUT &&
	     m_regs_ready_0_dummy2_2$Q_OUT &&
	     m_regs_ready_0_dummy2_3$Q_OUT ;
  assign m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d145 =
	     m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 &&
	     m_regs_ready_0_dummy2_4$Q_OUT &&
	     m_regs_ready_0_dummy2_5$Q_OUT &&
	     m_regs_ready_0_rl[3] ;
  assign m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d643 =
	     m_regs_ready_0_dummy2_1$Q_OUT && m_regs_ready_0_dummy2_2$Q_OUT &&
	     m_regs_ready_0_dummy2_3$Q_OUT &&
	     m_regs_ready_0_dummy2_4$Q_OUT ;
  assign m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d790 =
	     m_regs_ready_0_dummy2_2$Q_OUT && m_regs_ready_0_dummy2_3$Q_OUT &&
	     m_regs_ready_0_dummy2_4$Q_OUT &&
	     m_regs_ready_0_dummy2_5$Q_OUT ;
  assign m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1073 =
	     m_regs_ready_0_dummy2_4$Q_OUT && m_regs_ready_0_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_0_lat_3$wget[3] :
		IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d934) ;
  assign m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1082 =
	     m_regs_ready_0_dummy2_4$Q_OUT && m_regs_ready_0_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_0_lat_3$wget[2] :
		IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d943) ;
  assign m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1091 =
	     m_regs_ready_0_dummy2_4$Q_OUT && m_regs_ready_0_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_0_lat_3$wget[1] :
		IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d952) ;
  assign m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1095 =
	     m_regs_ready_0_dummy2_4$Q_OUT && m_regs_ready_0_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_0_lat_3$wget[0] :
		IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d956) ;
  assign m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 =
	     m_regs_ready_1_dummy2_0$Q_OUT && m_regs_ready_1_dummy2_1$Q_OUT &&
	     m_regs_ready_1_dummy2_2$Q_OUT &&
	     m_regs_ready_1_dummy2_3$Q_OUT ;
  assign m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d164 =
	     m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 &&
	     m_regs_ready_1_dummy2_4$Q_OUT &&
	     m_regs_ready_1_dummy2_5$Q_OUT &&
	     m_regs_ready_1_rl[3] ;
  assign m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d679 =
	     m_regs_ready_1_dummy2_1$Q_OUT && m_regs_ready_1_dummy2_2$Q_OUT &&
	     m_regs_ready_1_dummy2_3$Q_OUT &&
	     m_regs_ready_1_dummy2_4$Q_OUT ;
  assign m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d825 =
	     m_regs_ready_1_dummy2_2$Q_OUT && m_regs_ready_1_dummy2_3$Q_OUT &&
	     m_regs_ready_1_dummy2_4$Q_OUT &&
	     m_regs_ready_1_dummy2_5$Q_OUT ;
  assign m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1106 =
	     m_regs_ready_1_dummy2_4$Q_OUT && m_regs_ready_1_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_1_lat_3$wget[3] :
		IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d968) ;
  assign m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1115 =
	     m_regs_ready_1_dummy2_4$Q_OUT && m_regs_ready_1_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_1_lat_3$wget[2] :
		IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d977) ;
  assign m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1124 =
	     m_regs_ready_1_dummy2_4$Q_OUT && m_regs_ready_1_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_1_lat_3$wget[1] :
		IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d986) ;
  assign m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1128 =
	     m_regs_ready_1_dummy2_4$Q_OUT && m_regs_ready_1_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_1_lat_3$wget[0] :
		IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d990) ;
  assign m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 =
	     m_regs_ready_2_dummy2_0$Q_OUT && m_regs_ready_2_dummy2_1$Q_OUT &&
	     m_regs_ready_2_dummy2_2$Q_OUT &&
	     m_regs_ready_2_dummy2_3$Q_OUT ;
  assign m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d183 =
	     m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 &&
	     m_regs_ready_2_dummy2_4$Q_OUT &&
	     m_regs_ready_2_dummy2_5$Q_OUT &&
	     m_regs_ready_2_rl[3] ;
  assign m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d715 =
	     m_regs_ready_2_dummy2_1$Q_OUT && m_regs_ready_2_dummy2_2$Q_OUT &&
	     m_regs_ready_2_dummy2_3$Q_OUT &&
	     m_regs_ready_2_dummy2_4$Q_OUT ;
  assign m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d860 =
	     m_regs_ready_2_dummy2_2$Q_OUT && m_regs_ready_2_dummy2_3$Q_OUT &&
	     m_regs_ready_2_dummy2_4$Q_OUT &&
	     m_regs_ready_2_dummy2_5$Q_OUT ;
  assign m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1139 =
	     m_regs_ready_2_dummy2_4$Q_OUT && m_regs_ready_2_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_2_lat_3$wget[3] :
		IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1002) ;
  assign m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1148 =
	     m_regs_ready_2_dummy2_4$Q_OUT && m_regs_ready_2_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_2_lat_3$wget[2] :
		IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1011) ;
  assign m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1157 =
	     m_regs_ready_2_dummy2_4$Q_OUT && m_regs_ready_2_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_2_lat_3$wget[1] :
		IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1020) ;
  assign m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1161 =
	     m_regs_ready_2_dummy2_4$Q_OUT && m_regs_ready_2_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_2_lat_3$wget[0] :
		IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1024) ;
  assign m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 =
	     m_regs_ready_3_dummy2_0$Q_OUT && m_regs_ready_3_dummy2_1$Q_OUT &&
	     m_regs_ready_3_dummy2_2$Q_OUT &&
	     m_regs_ready_3_dummy2_3$Q_OUT ;
  assign m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d202 =
	     m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 &&
	     m_regs_ready_3_dummy2_4$Q_OUT &&
	     m_regs_ready_3_dummy2_5$Q_OUT &&
	     m_regs_ready_3_rl[3] ;
  assign m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d751 =
	     m_regs_ready_3_dummy2_1$Q_OUT && m_regs_ready_3_dummy2_2$Q_OUT &&
	     m_regs_ready_3_dummy2_3$Q_OUT &&
	     m_regs_ready_3_dummy2_4$Q_OUT ;
  assign m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d895 =
	     m_regs_ready_3_dummy2_2$Q_OUT && m_regs_ready_3_dummy2_3$Q_OUT &&
	     m_regs_ready_3_dummy2_4$Q_OUT &&
	     m_regs_ready_3_dummy2_5$Q_OUT ;
  assign m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1172 =
	     m_regs_ready_3_dummy2_4$Q_OUT && m_regs_ready_3_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_3_lat_3$wget[3] :
		IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1036) ;
  assign m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1181 =
	     m_regs_ready_3_dummy2_4$Q_OUT && m_regs_ready_3_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_3_lat_3$wget[2] :
		IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1045) ;
  assign m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1190 =
	     m_regs_ready_3_dummy2_4$Q_OUT && m_regs_ready_3_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_3_lat_3$wget[1] :
		IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1054) ;
  assign m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1194 =
	     m_regs_ready_3_dummy2_4$Q_OUT && m_regs_ready_3_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_3_lat_3$wget[0] :
		IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1058) ;
  assign m_valid_0_dummy2_0_read__09_AND_m_valid_0_dumm_ETC___d244 =
	     m_valid_0_dummy2_0$Q_OUT && m_valid_0_dummy2_1$Q_OUT &&
	     m_valid_0_rl &&
	     m_valid_1_dummy2_0$Q_OUT &&
	     m_valid_1_dummy2_1$Q_OUT &&
	     m_valid_1_rl ;
  assign m_valid_2_dummy2_0_read__24_AND_m_valid_2_dumm_ETC___d249 =
	     m_valid_2_dummy2_0$Q_OUT && m_valid_2_dummy2_1$Q_OUT &&
	     m_valid_2_rl &&
	     m_valid_3_dummy2_0$Q_OUT &&
	     m_valid_3_dummy2_1$Q_OUT &&
	     m_valid_3_rl ;
  assign n__read__h57562 =
	     m_spec_bits_0_dummy2_1$Q_OUT ?
	       IF_m_spec_bits_0_lat_0_whas__1_THEN_m_spec_bit_ETC___d34 :
	       4'd0 ;
  assign n__read__h58002 =
	     m_spec_bits_1_dummy2_1$Q_OUT ?
	       IF_m_spec_bits_1_lat_0_whas__8_THEN_m_spec_bit_ETC___d41 :
	       4'd0 ;
  assign n__read__h58442 =
	     m_spec_bits_2_dummy2_1$Q_OUT ?
	       IF_m_spec_bits_2_lat_0_whas__5_THEN_m_spec_bit_ETC___d48 :
	       4'd0 ;
  assign n__read__h58870 =
	     m_spec_bits_3_dummy2_1$Q_OUT ?
	       IF_m_spec_bits_3_lat_0_whas__2_THEN_m_spec_bit_ETC___d55 :
	       4'd0 ;
  assign upd__h6225 = n__read__h57562 & specUpdate_correctSpeculation_mask ;
  assign upd__h7154 = n__read__h58002 & specUpdate_correctSpeculation_mask ;
  assign upd__h8083 = n__read__h58442 & specUpdate_correctSpeculation_mask ;
  assign upd__h9012 = n__read__h58870 & specUpdate_correctSpeculation_mask ;
  assign x__read__h24362 = EN_setRobEnqTime ? setRobEnqTime_t : 5'd0 ;
  always@(a__h36862 or
	  IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m_robEnqTi_ETC___d316 or
	  IF_m_tag_1_17_BITS_4_TO_0_18_ULT_IF_m_robEnqTi_ETC___d322 or
	  IF_m_tag_2_28_BITS_4_TO_0_29_ULT_IF_m_robEnqTi_ETC___d333 or
	  IF_m_tag_3_34_BITS_4_TO_0_35_ULT_IF_m_robEnqTi_ETC___d339)
  begin
    case (a__h36862)
      2'd0:
	  SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d346 =
	      IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m_robEnqTi_ETC___d316;
      2'd1:
	  SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d346 =
	      IF_m_tag_1_17_BITS_4_TO_0_18_ULT_IF_m_robEnqTi_ETC___d322;
      2'd2:
	  SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d346 =
	      IF_m_tag_2_28_BITS_4_TO_0_29_ULT_IF_m_robEnqTi_ETC___d333;
      2'd3:
	  SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d346 =
	      IF_m_tag_3_34_BITS_4_TO_0_35_ULT_IF_m_robEnqTi_ETC___d339;
    endcase
  end
  always@(b__h36863 or
	  NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d297 or
	  NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d300 or
	  NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d303 or
	  NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d306)
  begin
    case (b__h36863)
      2'd0:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d344 =
	      NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d297;
      2'd1:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d344 =
	      NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d300;
      2'd2:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d344 =
	      NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d303;
      2'd3:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d344 =
	      NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d306;
    endcase
  end
  always@(b__h36863 or
	  IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m_robEnqTi_ETC___d316 or
	  IF_m_tag_1_17_BITS_4_TO_0_18_ULT_IF_m_robEnqTi_ETC___d322 or
	  IF_m_tag_2_28_BITS_4_TO_0_29_ULT_IF_m_robEnqTi_ETC___d333 or
	  IF_m_tag_3_34_BITS_4_TO_0_35_ULT_IF_m_robEnqTi_ETC___d339)
  begin
    case (b__h36863)
      2'd0:
	  SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d347 =
	      IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m_robEnqTi_ETC___d316;
      2'd1:
	  SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d347 =
	      IF_m_tag_1_17_BITS_4_TO_0_18_ULT_IF_m_robEnqTi_ETC___d322;
      2'd2:
	  SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d347 =
	      IF_m_tag_2_28_BITS_4_TO_0_29_ULT_IF_m_robEnqTi_ETC___d333;
      2'd3:
	  SEL_ARR_IF_m_tag_0_08_BITS_4_TO_0_09_ULT_IF_m__ETC___d347 =
	      IF_m_tag_3_34_BITS_4_TO_0_35_ULT_IF_m_robEnqTi_ETC___d339;
    endcase
  end
  always@(a__h36862 or
	  NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d297 or
	  NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d300 or
	  NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d303 or
	  NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d306)
  begin
    case (a__h36862)
      2'd0:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d327 =
	      NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d297;
      2'd1:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d327 =
	      NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d300;
      2'd2:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d327 =
	      NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d303;
      2'd3:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d327 =
	      NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d306;
    endcase
  end
  always@(idx__h36648 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_NOT_m_data_0_86_BIT_3_59_60_NOT_m_data_ETC___d368 =
	      !m_data_0[3];
      2'd1:
	  SEL_ARR_NOT_m_data_0_86_BIT_3_59_60_NOT_m_data_ETC___d368 =
	      !m_data_1[3];
      2'd2:
	  SEL_ARR_NOT_m_data_0_86_BIT_3_59_60_NOT_m_data_ETC___d368 =
	      !m_data_2[3];
      2'd3:
	  SEL_ARR_NOT_m_data_0_86_BIT_3_59_60_NOT_m_data_ETC___d368 =
	      !m_data_3[3];
    endcase
  end
  always@(idx__h36648 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_NOT_m_regs_0_85_BIT_32_86_87_NOT_m_reg_ETC___d398 =
	      !m_regs_0[32];
      2'd1:
	  SEL_ARR_NOT_m_regs_0_85_BIT_32_86_87_NOT_m_reg_ETC___d398 =
	      !m_regs_1[32];
      2'd2:
	  SEL_ARR_NOT_m_regs_0_85_BIT_32_86_87_NOT_m_reg_ETC___d398 =
	      !m_regs_2[32];
      2'd3:
	  SEL_ARR_NOT_m_regs_0_85_BIT_32_86_87_NOT_m_reg_ETC___d398 =
	      !m_regs_3[32];
    endcase
  end
  always@(idx__h36648 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_NOT_m_regs_0_85_BIT_24_07_08_NOT_m_reg_ETC___d416 =
	      !m_regs_0[24];
      2'd1:
	  SEL_ARR_NOT_m_regs_0_85_BIT_24_07_08_NOT_m_reg_ETC___d416 =
	      !m_regs_1[24];
      2'd2:
	  SEL_ARR_NOT_m_regs_0_85_BIT_24_07_08_NOT_m_reg_ETC___d416 =
	      !m_regs_2[24];
      2'd3:
	  SEL_ARR_NOT_m_regs_0_85_BIT_24_07_08_NOT_m_reg_ETC___d416 =
	      !m_regs_3[24];
    endcase
  end
  always@(idx__h36648 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_NOT_m_regs_0_85_BIT_16_26_27_NOT_m_reg_ETC___d435 =
	      !m_regs_0[16];
      2'd1:
	  SEL_ARR_NOT_m_regs_0_85_BIT_16_26_27_NOT_m_reg_ETC___d435 =
	      !m_regs_1[16];
      2'd2:
	  SEL_ARR_NOT_m_regs_0_85_BIT_16_26_27_NOT_m_reg_ETC___d435 =
	      !m_regs_2[16];
      2'd3:
	  SEL_ARR_NOT_m_regs_0_85_BIT_16_26_27_NOT_m_reg_ETC___d435 =
	      !m_regs_3[16];
    endcase
  end
  always@(idx__h36648 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_NOT_m_regs_0_85_BIT_8_44_45_NOT_m_regs_ETC___d453 =
	      !m_regs_0[8];
      2'd1:
	  SEL_ARR_NOT_m_regs_0_85_BIT_8_44_45_NOT_m_regs_ETC___d453 =
	      !m_regs_1[8];
      2'd2:
	  SEL_ARR_NOT_m_regs_0_85_BIT_8_44_45_NOT_m_regs_ETC___d453 =
	      !m_regs_2[8];
      2'd3:
	  SEL_ARR_NOT_m_regs_0_85_BIT_8_44_45_NOT_m_regs_ETC___d453 =
	      !m_regs_3[8];
    endcase
  end
  always@(idx__h36648 or
	  m_spec_tag_0 or m_spec_tag_1 or m_spec_tag_2 or m_spec_tag_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_NOT_m_spec_tag_0_04_BIT_2_05_06_NOT_m__ETC___d517 =
	      !m_spec_tag_0[2];
      2'd1:
	  SEL_ARR_NOT_m_spec_tag_0_04_BIT_2_05_06_NOT_m__ETC___d517 =
	      !m_spec_tag_1[2];
      2'd2:
	  SEL_ARR_NOT_m_spec_tag_0_04_BIT_2_05_06_NOT_m__ETC___d517 =
	      !m_spec_tag_2[2];
      2'd3:
	  SEL_ARR_NOT_m_spec_tag_0_04_BIT_2_05_06_NOT_m__ETC___d517 =
	      !m_spec_tag_3[2];
    endcase
  end
  always@(idx__h36648 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_data_0_86_BITS_1_TO_0_76_m_data_1_88_ETC___d381 =
	      m_data_0[1:0];
      2'd1:
	  SEL_ARR_m_data_0_86_BITS_1_TO_0_76_m_data_1_88_ETC___d381 =
	      m_data_1[1:0];
      2'd2:
	  SEL_ARR_m_data_0_86_BITS_1_TO_0_76_m_data_1_88_ETC___d381 =
	      m_data_2[1:0];
      2'd3:
	  SEL_ARR_m_data_0_86_BITS_1_TO_0_76_m_data_1_88_ETC___d381 =
	      m_data_3[1:0];
    endcase
  end
  always@(idx__h36648 or
	  m_spec_tag_0 or m_spec_tag_1 or m_spec_tag_2 or m_spec_tag_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_spec_tag_0_04_BITS_1_TO_0_19_m_spec__ETC___d524 =
	      m_spec_tag_0[1:0];
      2'd1:
	  SEL_ARR_m_spec_tag_0_04_BITS_1_TO_0_19_m_spec__ETC___d524 =
	      m_spec_tag_1[1:0];
      2'd2:
	  SEL_ARR_m_spec_tag_0_04_BITS_1_TO_0_19_m_spec__ETC___d524 =
	      m_spec_tag_2[1:0];
      2'd3:
	  SEL_ARR_m_spec_tag_0_04_BITS_1_TO_0_19_m_spec__ETC___d524 =
	      m_spec_tag_3[1:0];
    endcase
  end
  always@(idx__h36648 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_regs_0_85_BITS_23_TO_17_18_m_regs_1__ETC___d423 =
	      m_regs_0[23:17];
      2'd1:
	  SEL_ARR_m_regs_0_85_BITS_23_TO_17_18_m_regs_1__ETC___d423 =
	      m_regs_1[23:17];
      2'd2:
	  SEL_ARR_m_regs_0_85_BITS_23_TO_17_18_m_regs_1__ETC___d423 =
	      m_regs_2[23:17];
      2'd3:
	  SEL_ARR_m_regs_0_85_BITS_23_TO_17_18_m_regs_1__ETC___d423 =
	      m_regs_3[23:17];
    endcase
  end
  always@(idx__h36648 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_regs_0_85_BITS_7_TO_1_55_m_regs_1_88_ETC___d460 =
	      m_regs_0[7:1];
      2'd1:
	  SEL_ARR_m_regs_0_85_BITS_7_TO_1_55_m_regs_1_88_ETC___d460 =
	      m_regs_1[7:1];
      2'd2:
	  SEL_ARR_m_regs_0_85_BITS_7_TO_1_55_m_regs_1_88_ETC___d460 =
	      m_regs_2[7:1];
      2'd3:
	  SEL_ARR_m_regs_0_85_BITS_7_TO_1_55_m_regs_1_88_ETC___d460 =
	      m_regs_3[7:1];
    endcase
  end
  always@(idx__h36648 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_regs_0_85_BIT_0_61_m_regs_1_88_BIT_0_ETC___d466 =
	      m_regs_0[0];
      2'd1:
	  SEL_ARR_m_regs_0_85_BIT_0_61_m_regs_1_88_BIT_0_ETC___d466 =
	      m_regs_1[0];
      2'd2:
	  SEL_ARR_m_regs_0_85_BIT_0_61_m_regs_1_88_BIT_0_ETC___d466 =
	      m_regs_2[0];
      2'd3:
	  SEL_ARR_m_regs_0_85_BIT_0_61_m_regs_1_88_BIT_0_ETC___d466 =
	      m_regs_3[0];
    endcase
  end
  always@(idx__h36648 or m_tag_0 or m_tag_1 or m_tag_2 or m_tag_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_tag_0_08_BITS_4_TO_0_09_m_tag_1_17_B_ETC___d484 =
	      m_tag_0[4:0];
      2'd1:
	  SEL_ARR_m_tag_0_08_BITS_4_TO_0_09_m_tag_1_17_B_ETC___d484 =
	      m_tag_1[4:0];
      2'd2:
	  SEL_ARR_m_tag_0_08_BITS_4_TO_0_09_m_tag_1_17_B_ETC___d484 =
	      m_tag_2[4:0];
      2'd3:
	  SEL_ARR_m_tag_0_08_BITS_4_TO_0_09_m_tag_1_17_B_ETC___d484 =
	      m_tag_3[4:0];
    endcase
  end
  always@(idx__h36648 or m_tag_0 or m_tag_1 or m_tag_2 or m_tag_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_tag_0_08_BITS_8_TO_5_77_m_tag_1_17_B_ETC___d482 =
	      m_tag_0[8:5];
      2'd1:
	  SEL_ARR_m_tag_0_08_BITS_8_TO_5_77_m_tag_1_17_B_ETC___d482 =
	      m_tag_1[8:5];
      2'd2:
	  SEL_ARR_m_tag_0_08_BITS_8_TO_5_77_m_tag_1_17_B_ETC___d482 =
	      m_tag_2[8:5];
      2'd3:
	  SEL_ARR_m_tag_0_08_BITS_8_TO_5_77_m_tag_1_17_B_ETC___d482 =
	      m_tag_3[8:5];
    endcase
  end
  always@(idx__h36648 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_regs_0_85_BITS_15_TO_9_37_m_regs_1_8_ETC___d442 =
	      m_regs_0[15:9];
      2'd1:
	  SEL_ARR_m_regs_0_85_BITS_15_TO_9_37_m_regs_1_8_ETC___d442 =
	      m_regs_1[15:9];
      2'd2:
	  SEL_ARR_m_regs_0_85_BITS_15_TO_9_37_m_regs_1_8_ETC___d442 =
	      m_regs_2[15:9];
      2'd3:
	  SEL_ARR_m_regs_0_85_BITS_15_TO_9_37_m_regs_1_8_ETC___d442 =
	      m_regs_3[15:9];
    endcase
  end
  always@(idx__h36648 or m_tag_0 or m_tag_1 or m_tag_2 or m_tag_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_tag_0_08_BIT_9_71_m_tag_1_17_BIT_9_7_ETC___d476 =
	      m_tag_0[9];
      2'd1:
	  SEL_ARR_m_tag_0_08_BIT_9_71_m_tag_1_17_BIT_9_7_ETC___d476 =
	      m_tag_1[9];
      2'd2:
	  SEL_ARR_m_tag_0_08_BIT_9_71_m_tag_1_17_BIT_9_7_ETC___d476 =
	      m_tag_2[9];
      2'd3:
	  SEL_ARR_m_tag_0_08_BIT_9_71_m_tag_1_17_BIT_9_7_ETC___d476 =
	      m_tag_3[9];
    endcase
  end
  always@(idx__h36648 or bs__h56524 or bs__h56712 or bs__h56900 or bs__h57076)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__86_AND_ETC___d503 =
	      bs__h56524;
      2'd1:
	  SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__86_AND_ETC___d503 =
	      bs__h56712;
      2'd2:
	  SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__86_AND_ETC___d503 =
	      bs__h56900;
      2'd3:
	  SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__86_AND_ETC___d503 =
	      bs__h57076;
    endcase
  end
  always@(idx__h36648 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_regs_0_85_BITS_31_TO_25_00_m_regs_1__ETC___d405 =
	      m_regs_0[31:25];
      2'd1:
	  SEL_ARR_m_regs_0_85_BITS_31_TO_25_00_m_regs_1__ETC___d405 =
	      m_regs_1[31:25];
      2'd2:
	  SEL_ARR_m_regs_0_85_BITS_31_TO_25_00_m_regs_1__ETC___d405 =
	      m_regs_2[31:25];
      2'd3:
	  SEL_ARR_m_regs_0_85_BITS_31_TO_25_00_m_regs_1__ETC___d405 =
	      m_regs_3[31:25];
    endcase
  end
  always@(idx__h36648 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_data_0_86_BITS_35_TO_4_53_m_data_1_8_ETC___d358 =
	      m_data_0[35:4];
      2'd1:
	  SEL_ARR_m_data_0_86_BITS_35_TO_4_53_m_data_1_8_ETC___d358 =
	      m_data_1[35:4];
      2'd2:
	  SEL_ARR_m_data_0_86_BITS_35_TO_4_53_m_data_1_8_ETC___d358 =
	      m_data_2[35:4];
      2'd3:
	  SEL_ARR_m_data_0_86_BITS_35_TO_4_53_m_data_1_8_ETC___d358 =
	      m_data_3[35:4];
    endcase
  end
  always@(idx__h36648 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_data_0_86_BITS_2_TO_0_70_m_data_1_88_ETC___d375 =
	      m_data_0[2:0];
      2'd1:
	  SEL_ARR_m_data_0_86_BITS_2_TO_0_70_m_data_1_88_ETC___d375 =
	      m_data_1[2:0];
      2'd2:
	  SEL_ARR_m_data_0_86_BITS_2_TO_0_70_m_data_1_88_ETC___d375 =
	      m_data_2[2:0];
      2'd3:
	  SEL_ARR_m_data_0_86_BITS_2_TO_0_70_m_data_1_88_ETC___d375 =
	      m_data_3[2:0];
    endcase
  end
  always@(idx__h36648 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h36648)
      2'd0:
	  SEL_ARR_m_data_0_86_BITS_38_TO_36_87_m_data_1__ETC___d352 =
	      m_data_0[38:36];
      2'd1:
	  SEL_ARR_m_data_0_86_BITS_38_TO_36_87_m_data_1__ETC___d352 =
	      m_data_1[38:36];
      2'd2:
	  SEL_ARR_m_data_0_86_BITS_38_TO_36_87_m_data_1__ETC___d352 =
	      m_data_2[38:36];
      2'd3:
	  SEL_ARR_m_data_0_86_BITS_38_TO_36_87_m_data_1__ETC___d352 =
	      m_data_3[38:36];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        m_regs_ready_0_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_regs_ready_1_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_regs_ready_2_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_regs_ready_3_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_spec_bits_0_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_spec_bits_1_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_spec_bits_2_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_spec_bits_3_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_validEntryCount <= `BSV_ASSIGNMENT_DELAY 3'd0;
	m_valid_0_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_valid_1_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_valid_2_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_valid_3_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (m_regs_ready_0_rl$EN)
	  m_regs_ready_0_rl <= `BSV_ASSIGNMENT_DELAY m_regs_ready_0_rl$D_IN;
	if (m_regs_ready_1_rl$EN)
	  m_regs_ready_1_rl <= `BSV_ASSIGNMENT_DELAY m_regs_ready_1_rl$D_IN;
	if (m_regs_ready_2_rl$EN)
	  m_regs_ready_2_rl <= `BSV_ASSIGNMENT_DELAY m_regs_ready_2_rl$D_IN;
	if (m_regs_ready_3_rl$EN)
	  m_regs_ready_3_rl <= `BSV_ASSIGNMENT_DELAY m_regs_ready_3_rl$D_IN;
	if (m_spec_bits_0_rl$EN)
	  m_spec_bits_0_rl <= `BSV_ASSIGNMENT_DELAY m_spec_bits_0_rl$D_IN;
	if (m_spec_bits_1_rl$EN)
	  m_spec_bits_1_rl <= `BSV_ASSIGNMENT_DELAY m_spec_bits_1_rl$D_IN;
	if (m_spec_bits_2_rl$EN)
	  m_spec_bits_2_rl <= `BSV_ASSIGNMENT_DELAY m_spec_bits_2_rl$D_IN;
	if (m_spec_bits_3_rl$EN)
	  m_spec_bits_3_rl <= `BSV_ASSIGNMENT_DELAY m_spec_bits_3_rl$D_IN;
	if (m_validEntryCount$EN)
	  m_validEntryCount <= `BSV_ASSIGNMENT_DELAY m_validEntryCount$D_IN;
	if (m_valid_0_rl$EN)
	  m_valid_0_rl <= `BSV_ASSIGNMENT_DELAY m_valid_0_rl$D_IN;
	if (m_valid_1_rl$EN)
	  m_valid_1_rl <= `BSV_ASSIGNMENT_DELAY m_valid_1_rl$D_IN;
	if (m_valid_2_rl$EN)
	  m_valid_2_rl <= `BSV_ASSIGNMENT_DELAY m_valid_2_rl$D_IN;
	if (m_valid_3_rl$EN)
	  m_valid_3_rl <= `BSV_ASSIGNMENT_DELAY m_valid_3_rl$D_IN;
      end
    if (m_data_0$EN) m_data_0 <= `BSV_ASSIGNMENT_DELAY m_data_0$D_IN;
    if (m_data_1$EN) m_data_1 <= `BSV_ASSIGNMENT_DELAY m_data_1$D_IN;
    if (m_data_2$EN) m_data_2 <= `BSV_ASSIGNMENT_DELAY m_data_2$D_IN;
    if (m_data_3$EN) m_data_3 <= `BSV_ASSIGNMENT_DELAY m_data_3$D_IN;
    if (m_regs_0$EN) m_regs_0 <= `BSV_ASSIGNMENT_DELAY m_regs_0$D_IN;
    if (m_regs_1$EN) m_regs_1 <= `BSV_ASSIGNMENT_DELAY m_regs_1$D_IN;
    if (m_regs_2$EN) m_regs_2 <= `BSV_ASSIGNMENT_DELAY m_regs_2$D_IN;
    if (m_regs_3$EN) m_regs_3 <= `BSV_ASSIGNMENT_DELAY m_regs_3$D_IN;
    if (m_spec_tag_0$EN)
      m_spec_tag_0 <= `BSV_ASSIGNMENT_DELAY m_spec_tag_0$D_IN;
    if (m_spec_tag_1$EN)
      m_spec_tag_1 <= `BSV_ASSIGNMENT_DELAY m_spec_tag_1$D_IN;
    if (m_spec_tag_2$EN)
      m_spec_tag_2 <= `BSV_ASSIGNMENT_DELAY m_spec_tag_2$D_IN;
    if (m_spec_tag_3$EN)
      m_spec_tag_3 <= `BSV_ASSIGNMENT_DELAY m_spec_tag_3$D_IN;
    if (m_tag_0$EN) m_tag_0 <= `BSV_ASSIGNMENT_DELAY m_tag_0$D_IN;
    if (m_tag_1$EN) m_tag_1 <= `BSV_ASSIGNMENT_DELAY m_tag_1$D_IN;
    if (m_tag_2$EN) m_tag_2 <= `BSV_ASSIGNMENT_DELAY m_tag_2$D_IN;
    if (m_tag_3$EN) m_tag_3 <= `BSV_ASSIGNMENT_DELAY m_tag_3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    m_data_0 = 39'h2AAAAAAAAA;
    m_data_1 = 39'h2AAAAAAAAA;
    m_data_2 = 39'h2AAAAAAAAA;
    m_data_3 = 39'h2AAAAAAAAA;
    m_regs_0 = 33'h0AAAAAAAA;
    m_regs_1 = 33'h0AAAAAAAA;
    m_regs_2 = 33'h0AAAAAAAA;
    m_regs_3 = 33'h0AAAAAAAA;
    m_regs_ready_0_rl = 4'hA;
    m_regs_ready_1_rl = 4'hA;
    m_regs_ready_2_rl = 4'hA;
    m_regs_ready_3_rl = 4'hA;
    m_spec_bits_0_rl = 4'hA;
    m_spec_bits_1_rl = 4'hA;
    m_spec_bits_2_rl = 4'hA;
    m_spec_bits_3_rl = 4'hA;
    m_spec_tag_0 = 3'h2;
    m_spec_tag_1 = 3'h2;
    m_spec_tag_2 = 3'h2;
    m_spec_tag_3 = 3'h2;
    m_tag_0 = 10'h2AA;
    m_tag_1 = 10'h2AA;
    m_tag_2 = 10'h2AA;
    m_tag_3 = 10'h2AA;
    m_validEntryCount = 3'h2;
    m_valid_0_rl = 1'h0;
    m_valid_1_rl = 1'h0;
    m_valid_2_rl = 1'h0;
    m_valid_3_rl = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkReservationStationMem

