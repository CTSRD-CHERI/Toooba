//
// Generated by Bluespec Compiler (build 39ae402)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_enq                        O     1
// canEnq                         O     1
// RDY_canEnq                     O     1 const
// RDY_setRobEnqTime              O     1 const
// dispatchData                   O    75
// RDY_dispatchData               O     1
// RDY_doDispatch                 O     1
// RDY_setRegReady_0_put          O     1 const
// RDY_setRegReady_1_put          O     1 const
// RDY_setRegReady_2_put          O     1 const
// RDY_setRegReady_3_put          O     1 const
// RDY_setRegReady_4_put          O     1 const
// approximateCount               O     3 reg
// RDY_approximateCount           O     1 const
// isFull_ehrPort0                O     1
// RDY_isFull_ehrPort0            O     1 const
// RDY_specUpdate_incorrectSpeculation  O     1 const
// RDY_specUpdate_correctSpeculation  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// enq_x                          I    75
// setRobEnqTime_t                I     5
// setRegReady_0_put              I     8
// setRegReady_1_put              I     8
// setRegReady_2_put              I     8
// setRegReady_3_put              I     8
// setRegReady_4_put              I     8
// specUpdate_incorrectSpeculation_kill_all  I     1
// specUpdate_incorrectSpeculation_kill_tag  I     2
// specUpdate_correctSpeculation_mask  I     4
// EN_enq                         I     1
// EN_setRobEnqTime               I     1
// EN_doDispatch                  I     1
// EN_setRegReady_0_put           I     1
// EN_setRegReady_1_put           I     1
// EN_setRegReady_2_put           I     1
// EN_setRegReady_3_put           I     1
// EN_setRegReady_4_put           I     1
// EN_specUpdate_incorrectSpeculation  I     1
// EN_specUpdate_correctSpeculation  I     1
//
// Combinational paths from inputs to outputs:
//   (setRobEnqTime_t, EN_setRobEnqTime) -> dispatchData
//   (setRobEnqTime_t, EN_setRobEnqTime) -> RDY_dispatchData
//   (setRobEnqTime_t, EN_setRobEnqTime) -> RDY_doDispatch
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkReservationStationFpuMulDiv(CLK,
				     RST_N,

				     enq_x,
				     EN_enq,
				     RDY_enq,

				     canEnq,
				     RDY_canEnq,

				     setRobEnqTime_t,
				     EN_setRobEnqTime,
				     RDY_setRobEnqTime,

				     dispatchData,
				     RDY_dispatchData,

				     EN_doDispatch,
				     RDY_doDispatch,

				     setRegReady_0_put,
				     EN_setRegReady_0_put,
				     RDY_setRegReady_0_put,

				     setRegReady_1_put,
				     EN_setRegReady_1_put,
				     RDY_setRegReady_1_put,

				     setRegReady_2_put,
				     EN_setRegReady_2_put,
				     RDY_setRegReady_2_put,

				     setRegReady_3_put,
				     EN_setRegReady_3_put,
				     RDY_setRegReady_3_put,

				     setRegReady_4_put,
				     EN_setRegReady_4_put,
				     RDY_setRegReady_4_put,

				     approximateCount,
				     RDY_approximateCount,

				     isFull_ehrPort0,
				     RDY_isFull_ehrPort0,

				     specUpdate_incorrectSpeculation_kill_all,
				     specUpdate_incorrectSpeculation_kill_tag,
				     EN_specUpdate_incorrectSpeculation,
				     RDY_specUpdate_incorrectSpeculation,

				     specUpdate_correctSpeculation_mask,
				     EN_specUpdate_correctSpeculation,
				     RDY_specUpdate_correctSpeculation);
  input  CLK;
  input  RST_N;

  // action method enq
  input  [74 : 0] enq_x;
  input  EN_enq;
  output RDY_enq;

  // value method canEnq
  output canEnq;
  output RDY_canEnq;

  // action method setRobEnqTime
  input  [4 : 0] setRobEnqTime_t;
  input  EN_setRobEnqTime;
  output RDY_setRobEnqTime;

  // value method dispatchData
  output [74 : 0] dispatchData;
  output RDY_dispatchData;

  // action method doDispatch
  input  EN_doDispatch;
  output RDY_doDispatch;

  // action method setRegReady_0_put
  input  [7 : 0] setRegReady_0_put;
  input  EN_setRegReady_0_put;
  output RDY_setRegReady_0_put;

  // action method setRegReady_1_put
  input  [7 : 0] setRegReady_1_put;
  input  EN_setRegReady_1_put;
  output RDY_setRegReady_1_put;

  // action method setRegReady_2_put
  input  [7 : 0] setRegReady_2_put;
  input  EN_setRegReady_2_put;
  output RDY_setRegReady_2_put;

  // action method setRegReady_3_put
  input  [7 : 0] setRegReady_3_put;
  input  EN_setRegReady_3_put;
  output RDY_setRegReady_3_put;

  // action method setRegReady_4_put
  input  [7 : 0] setRegReady_4_put;
  input  EN_setRegReady_4_put;
  output RDY_setRegReady_4_put;

  // value method approximateCount
  output [2 : 0] approximateCount;
  output RDY_approximateCount;

  // value method isFull_ehrPort0
  output isFull_ehrPort0;
  output RDY_isFull_ehrPort0;

  // action method specUpdate_incorrectSpeculation
  input  specUpdate_incorrectSpeculation_kill_all;
  input  [1 : 0] specUpdate_incorrectSpeculation_kill_tag;
  input  EN_specUpdate_incorrectSpeculation;
  output RDY_specUpdate_incorrectSpeculation;

  // action method specUpdate_correctSpeculation
  input  [3 : 0] specUpdate_correctSpeculation_mask;
  input  EN_specUpdate_correctSpeculation;
  output RDY_specUpdate_correctSpeculation;

  // signals for module outputs
  reg RDY_doDispatch;
  wire [74 : 0] dispatchData;
  wire [2 : 0] approximateCount;
  wire RDY_approximateCount,
       RDY_canEnq,
       RDY_dispatchData,
       RDY_enq,
       RDY_isFull_ehrPort0,
       RDY_setRegReady_0_put,
       RDY_setRegReady_1_put,
       RDY_setRegReady_2_put,
       RDY_setRegReady_3_put,
       RDY_setRegReady_4_put,
       RDY_setRobEnqTime,
       RDY_specUpdate_correctSpeculation,
       RDY_specUpdate_incorrectSpeculation,
       canEnq,
       isFull_ehrPort0;

  // inlined wires
  wire [3 : 0] m_regs_ready_0_lat_0$wget,
	       m_regs_ready_0_lat_1$wget,
	       m_regs_ready_0_lat_2$wget,
	       m_regs_ready_0_lat_3$wget,
	       m_regs_ready_0_lat_4$wget,
	       m_regs_ready_1_lat_0$wget,
	       m_regs_ready_1_lat_1$wget,
	       m_regs_ready_1_lat_2$wget,
	       m_regs_ready_1_lat_3$wget,
	       m_regs_ready_1_lat_4$wget,
	       m_regs_ready_2_lat_0$wget,
	       m_regs_ready_2_lat_1$wget,
	       m_regs_ready_2_lat_2$wget,
	       m_regs_ready_2_lat_3$wget,
	       m_regs_ready_2_lat_4$wget,
	       m_regs_ready_3_lat_0$wget,
	       m_regs_ready_3_lat_1$wget,
	       m_regs_ready_3_lat_2$wget,
	       m_regs_ready_3_lat_3$wget,
	       m_regs_ready_3_lat_4$wget;
  wire [2 : 0] m_enqP_wire$wget;
  wire m_ready_wire_0$wget,
       m_ready_wire_1$wget,
       m_ready_wire_2$wget,
       m_ready_wire_3$wget,
       m_valid_0_lat_0$whas,
       m_valid_0_lat_1$whas,
       m_valid_1_lat_0$whas,
       m_valid_1_lat_1$whas,
       m_valid_2_lat_0$whas,
       m_valid_2_lat_1$whas,
       m_valid_3_dummy_1_0$wget,
       m_valid_3_lat_1$whas;

  // register m_data_0
  reg [20 : 0] m_data_0;
  reg [20 : 0] m_data_0$D_IN;
  wire m_data_0$EN;

  // register m_data_1
  reg [20 : 0] m_data_1;
  wire [20 : 0] m_data_1$D_IN;
  wire m_data_1$EN;

  // register m_data_2
  reg [20 : 0] m_data_2;
  wire [20 : 0] m_data_2$D_IN;
  wire m_data_2$EN;

  // register m_data_3
  reg [20 : 0] m_data_3;
  wire [20 : 0] m_data_3$D_IN;
  wire m_data_3$EN;

  // register m_regs_0
  reg [32 : 0] m_regs_0;
  wire [32 : 0] m_regs_0$D_IN;
  wire m_regs_0$EN;

  // register m_regs_1
  reg [32 : 0] m_regs_1;
  wire [32 : 0] m_regs_1$D_IN;
  wire m_regs_1$EN;

  // register m_regs_2
  reg [32 : 0] m_regs_2;
  wire [32 : 0] m_regs_2$D_IN;
  wire m_regs_2$EN;

  // register m_regs_3
  reg [32 : 0] m_regs_3;
  wire [32 : 0] m_regs_3$D_IN;
  wire m_regs_3$EN;

  // register m_regs_ready_0_rl
  reg [3 : 0] m_regs_ready_0_rl;
  wire [3 : 0] m_regs_ready_0_rl$D_IN;
  wire m_regs_ready_0_rl$EN;

  // register m_regs_ready_1_rl
  reg [3 : 0] m_regs_ready_1_rl;
  wire [3 : 0] m_regs_ready_1_rl$D_IN;
  wire m_regs_ready_1_rl$EN;

  // register m_regs_ready_2_rl
  reg [3 : 0] m_regs_ready_2_rl;
  wire [3 : 0] m_regs_ready_2_rl$D_IN;
  wire m_regs_ready_2_rl$EN;

  // register m_regs_ready_3_rl
  reg [3 : 0] m_regs_ready_3_rl;
  wire [3 : 0] m_regs_ready_3_rl$D_IN;
  wire m_regs_ready_3_rl$EN;

  // register m_spec_bits_0_rl
  reg [3 : 0] m_spec_bits_0_rl;
  wire [3 : 0] m_spec_bits_0_rl$D_IN;
  wire m_spec_bits_0_rl$EN;

  // register m_spec_bits_1_rl
  reg [3 : 0] m_spec_bits_1_rl;
  wire [3 : 0] m_spec_bits_1_rl$D_IN;
  wire m_spec_bits_1_rl$EN;

  // register m_spec_bits_2_rl
  reg [3 : 0] m_spec_bits_2_rl;
  wire [3 : 0] m_spec_bits_2_rl$D_IN;
  wire m_spec_bits_2_rl$EN;

  // register m_spec_bits_3_rl
  reg [3 : 0] m_spec_bits_3_rl;
  wire [3 : 0] m_spec_bits_3_rl$D_IN;
  wire m_spec_bits_3_rl$EN;

  // register m_spec_tag_0
  reg [2 : 0] m_spec_tag_0;
  wire [2 : 0] m_spec_tag_0$D_IN;
  wire m_spec_tag_0$EN;

  // register m_spec_tag_1
  reg [2 : 0] m_spec_tag_1;
  wire [2 : 0] m_spec_tag_1$D_IN;
  wire m_spec_tag_1$EN;

  // register m_spec_tag_2
  reg [2 : 0] m_spec_tag_2;
  wire [2 : 0] m_spec_tag_2$D_IN;
  wire m_spec_tag_2$EN;

  // register m_spec_tag_3
  reg [2 : 0] m_spec_tag_3;
  wire [2 : 0] m_spec_tag_3$D_IN;
  wire m_spec_tag_3$EN;

  // register m_tag_0
  reg [9 : 0] m_tag_0;
  wire [9 : 0] m_tag_0$D_IN;
  wire m_tag_0$EN;

  // register m_tag_1
  reg [9 : 0] m_tag_1;
  wire [9 : 0] m_tag_1$D_IN;
  wire m_tag_1$EN;

  // register m_tag_2
  reg [9 : 0] m_tag_2;
  wire [9 : 0] m_tag_2$D_IN;
  wire m_tag_2$EN;

  // register m_tag_3
  reg [9 : 0] m_tag_3;
  wire [9 : 0] m_tag_3$D_IN;
  wire m_tag_3$EN;

  // register m_validEntryCount
  reg [2 : 0] m_validEntryCount;
  wire [2 : 0] m_validEntryCount$D_IN;
  wire m_validEntryCount$EN;

  // register m_valid_0_rl
  reg m_valid_0_rl;
  wire m_valid_0_rl$D_IN, m_valid_0_rl$EN;

  // register m_valid_1_rl
  reg m_valid_1_rl;
  wire m_valid_1_rl$D_IN, m_valid_1_rl$EN;

  // register m_valid_2_rl
  reg m_valid_2_rl;
  wire m_valid_2_rl$D_IN, m_valid_2_rl$EN;

  // register m_valid_3_rl
  reg m_valid_3_rl;
  wire m_valid_3_rl$D_IN, m_valid_3_rl$EN;

  // ports of submodule m_regs_ready_0_dummy2_0
  wire m_regs_ready_0_dummy2_0$D_IN,
       m_regs_ready_0_dummy2_0$EN,
       m_regs_ready_0_dummy2_0$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_1
  wire m_regs_ready_0_dummy2_1$D_IN,
       m_regs_ready_0_dummy2_1$EN,
       m_regs_ready_0_dummy2_1$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_2
  wire m_regs_ready_0_dummy2_2$D_IN,
       m_regs_ready_0_dummy2_2$EN,
       m_regs_ready_0_dummy2_2$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_3
  wire m_regs_ready_0_dummy2_3$D_IN,
       m_regs_ready_0_dummy2_3$EN,
       m_regs_ready_0_dummy2_3$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_4
  wire m_regs_ready_0_dummy2_4$D_IN,
       m_regs_ready_0_dummy2_4$EN,
       m_regs_ready_0_dummy2_4$Q_OUT;

  // ports of submodule m_regs_ready_0_dummy2_5
  wire m_regs_ready_0_dummy2_5$D_IN,
       m_regs_ready_0_dummy2_5$EN,
       m_regs_ready_0_dummy2_5$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_0
  wire m_regs_ready_1_dummy2_0$D_IN,
       m_regs_ready_1_dummy2_0$EN,
       m_regs_ready_1_dummy2_0$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_1
  wire m_regs_ready_1_dummy2_1$D_IN,
       m_regs_ready_1_dummy2_1$EN,
       m_regs_ready_1_dummy2_1$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_2
  wire m_regs_ready_1_dummy2_2$D_IN,
       m_regs_ready_1_dummy2_2$EN,
       m_regs_ready_1_dummy2_2$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_3
  wire m_regs_ready_1_dummy2_3$D_IN,
       m_regs_ready_1_dummy2_3$EN,
       m_regs_ready_1_dummy2_3$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_4
  wire m_regs_ready_1_dummy2_4$D_IN,
       m_regs_ready_1_dummy2_4$EN,
       m_regs_ready_1_dummy2_4$Q_OUT;

  // ports of submodule m_regs_ready_1_dummy2_5
  wire m_regs_ready_1_dummy2_5$D_IN,
       m_regs_ready_1_dummy2_5$EN,
       m_regs_ready_1_dummy2_5$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_0
  wire m_regs_ready_2_dummy2_0$D_IN,
       m_regs_ready_2_dummy2_0$EN,
       m_regs_ready_2_dummy2_0$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_1
  wire m_regs_ready_2_dummy2_1$D_IN,
       m_regs_ready_2_dummy2_1$EN,
       m_regs_ready_2_dummy2_1$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_2
  wire m_regs_ready_2_dummy2_2$D_IN,
       m_regs_ready_2_dummy2_2$EN,
       m_regs_ready_2_dummy2_2$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_3
  wire m_regs_ready_2_dummy2_3$D_IN,
       m_regs_ready_2_dummy2_3$EN,
       m_regs_ready_2_dummy2_3$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_4
  wire m_regs_ready_2_dummy2_4$D_IN,
       m_regs_ready_2_dummy2_4$EN,
       m_regs_ready_2_dummy2_4$Q_OUT;

  // ports of submodule m_regs_ready_2_dummy2_5
  wire m_regs_ready_2_dummy2_5$D_IN,
       m_regs_ready_2_dummy2_5$EN,
       m_regs_ready_2_dummy2_5$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_0
  wire m_regs_ready_3_dummy2_0$D_IN,
       m_regs_ready_3_dummy2_0$EN,
       m_regs_ready_3_dummy2_0$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_1
  wire m_regs_ready_3_dummy2_1$D_IN,
       m_regs_ready_3_dummy2_1$EN,
       m_regs_ready_3_dummy2_1$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_2
  wire m_regs_ready_3_dummy2_2$D_IN,
       m_regs_ready_3_dummy2_2$EN,
       m_regs_ready_3_dummy2_2$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_3
  wire m_regs_ready_3_dummy2_3$D_IN,
       m_regs_ready_3_dummy2_3$EN,
       m_regs_ready_3_dummy2_3$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_4
  wire m_regs_ready_3_dummy2_4$D_IN,
       m_regs_ready_3_dummy2_4$EN,
       m_regs_ready_3_dummy2_4$Q_OUT;

  // ports of submodule m_regs_ready_3_dummy2_5
  wire m_regs_ready_3_dummy2_5$D_IN,
       m_regs_ready_3_dummy2_5$EN,
       m_regs_ready_3_dummy2_5$Q_OUT;

  // ports of submodule m_spec_bits_0_dummy2_0
  wire m_spec_bits_0_dummy2_0$D_IN,
       m_spec_bits_0_dummy2_0$EN,
       m_spec_bits_0_dummy2_0$Q_OUT;

  // ports of submodule m_spec_bits_0_dummy2_1
  wire m_spec_bits_0_dummy2_1$D_IN,
       m_spec_bits_0_dummy2_1$EN,
       m_spec_bits_0_dummy2_1$Q_OUT;

  // ports of submodule m_spec_bits_1_dummy2_0
  wire m_spec_bits_1_dummy2_0$D_IN,
       m_spec_bits_1_dummy2_0$EN,
       m_spec_bits_1_dummy2_0$Q_OUT;

  // ports of submodule m_spec_bits_1_dummy2_1
  wire m_spec_bits_1_dummy2_1$D_IN,
       m_spec_bits_1_dummy2_1$EN,
       m_spec_bits_1_dummy2_1$Q_OUT;

  // ports of submodule m_spec_bits_2_dummy2_0
  wire m_spec_bits_2_dummy2_0$D_IN,
       m_spec_bits_2_dummy2_0$EN,
       m_spec_bits_2_dummy2_0$Q_OUT;

  // ports of submodule m_spec_bits_2_dummy2_1
  wire m_spec_bits_2_dummy2_1$D_IN,
       m_spec_bits_2_dummy2_1$EN,
       m_spec_bits_2_dummy2_1$Q_OUT;

  // ports of submodule m_spec_bits_3_dummy2_0
  wire m_spec_bits_3_dummy2_0$D_IN,
       m_spec_bits_3_dummy2_0$EN,
       m_spec_bits_3_dummy2_0$Q_OUT;

  // ports of submodule m_spec_bits_3_dummy2_1
  wire m_spec_bits_3_dummy2_1$D_IN,
       m_spec_bits_3_dummy2_1$EN,
       m_spec_bits_3_dummy2_1$Q_OUT;

  // ports of submodule m_valid_0_dummy2_0
  wire m_valid_0_dummy2_0$D_IN,
       m_valid_0_dummy2_0$EN,
       m_valid_0_dummy2_0$Q_OUT;

  // ports of submodule m_valid_0_dummy2_1
  wire m_valid_0_dummy2_1$D_IN,
       m_valid_0_dummy2_1$EN,
       m_valid_0_dummy2_1$Q_OUT;

  // ports of submodule m_valid_1_dummy2_0
  wire m_valid_1_dummy2_0$D_IN,
       m_valid_1_dummy2_0$EN,
       m_valid_1_dummy2_0$Q_OUT;

  // ports of submodule m_valid_1_dummy2_1
  wire m_valid_1_dummy2_1$D_IN,
       m_valid_1_dummy2_1$EN,
       m_valid_1_dummy2_1$Q_OUT;

  // ports of submodule m_valid_2_dummy2_0
  wire m_valid_2_dummy2_0$D_IN,
       m_valid_2_dummy2_0$EN,
       m_valid_2_dummy2_0$Q_OUT;

  // ports of submodule m_valid_2_dummy2_1
  wire m_valid_2_dummy2_1$D_IN,
       m_valid_2_dummy2_1$EN,
       m_valid_2_dummy2_1$Q_OUT;

  // ports of submodule m_valid_3_dummy2_0
  wire m_valid_3_dummy2_0$D_IN,
       m_valid_3_dummy2_0$EN,
       m_valid_3_dummy2_0$Q_OUT;

  // ports of submodule m_valid_3_dummy2_1
  wire m_valid_3_dummy2_1$D_IN,
       m_valid_3_dummy2_1$EN,
       m_valid_3_dummy2_1$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_m_regs_ready_0_canon,
       CAN_FIRE_RL_m_regs_ready_1_canon,
       CAN_FIRE_RL_m_regs_ready_2_canon,
       CAN_FIRE_RL_m_regs_ready_3_canon,
       CAN_FIRE_RL_m_setReadyWire,
       CAN_FIRE_RL_m_setWireForEnq,
       CAN_FIRE_RL_m_spec_bits_0_canon,
       CAN_FIRE_RL_m_spec_bits_1_canon,
       CAN_FIRE_RL_m_spec_bits_2_canon,
       CAN_FIRE_RL_m_spec_bits_3_canon,
       CAN_FIRE_RL_m_valid_0_canon,
       CAN_FIRE_RL_m_valid_1_canon,
       CAN_FIRE_RL_m_valid_2_canon,
       CAN_FIRE_RL_m_valid_3_canon,
       CAN_FIRE_doDispatch,
       CAN_FIRE_enq,
       CAN_FIRE_setRegReady_0_put,
       CAN_FIRE_setRegReady_1_put,
       CAN_FIRE_setRegReady_2_put,
       CAN_FIRE_setRegReady_3_put,
       CAN_FIRE_setRegReady_4_put,
       CAN_FIRE_setRobEnqTime,
       CAN_FIRE_specUpdate_correctSpeculation,
       CAN_FIRE_specUpdate_incorrectSpeculation,
       WILL_FIRE_RL_m_regs_ready_0_canon,
       WILL_FIRE_RL_m_regs_ready_1_canon,
       WILL_FIRE_RL_m_regs_ready_2_canon,
       WILL_FIRE_RL_m_regs_ready_3_canon,
       WILL_FIRE_RL_m_setReadyWire,
       WILL_FIRE_RL_m_setWireForEnq,
       WILL_FIRE_RL_m_spec_bits_0_canon,
       WILL_FIRE_RL_m_spec_bits_1_canon,
       WILL_FIRE_RL_m_spec_bits_2_canon,
       WILL_FIRE_RL_m_spec_bits_3_canon,
       WILL_FIRE_RL_m_valid_0_canon,
       WILL_FIRE_RL_m_valid_1_canon,
       WILL_FIRE_RL_m_valid_2_canon,
       WILL_FIRE_RL_m_valid_3_canon,
       WILL_FIRE_doDispatch,
       WILL_FIRE_enq,
       WILL_FIRE_setRegReady_0_put,
       WILL_FIRE_setRegReady_1_put,
       WILL_FIRE_setRegReady_2_put,
       WILL_FIRE_setRegReady_3_put,
       WILL_FIRE_setRegReady_4_put,
       WILL_FIRE_setRobEnqTime,
       WILL_FIRE_specUpdate_correctSpeculation,
       WILL_FIRE_specUpdate_incorrectSpeculation;

  // inputs to muxes for submodule ports
  wire MUX_m_valid_0_dummy2_0$write_1__SEL_1,
       MUX_m_valid_0_dummy2_0$write_1__SEL_2,
       MUX_m_valid_1_dummy2_0$write_1__SEL_1,
       MUX_m_valid_1_dummy2_0$write_1__SEL_2,
       MUX_m_valid_2_dummy2_0$write_1__SEL_1,
       MUX_m_valid_2_dummy2_0$write_1__SEL_2,
       MUX_m_valid_3_dummy2_0$write_1__SEL_1,
       MUX_m_valid_3_dummy2_0$write_1__SEL_2;

  // remaining internal signals
  reg [6 : 0] SEL_ARR_m_regs_0_12_BITS_15_TO_9_64_m_regs_1_1_ETC___d669,
	      SEL_ARR_m_regs_0_12_BITS_23_TO_17_45_m_regs_1__ETC___d650,
	      SEL_ARR_m_regs_0_12_BITS_31_TO_25_27_m_regs_1__ETC___d632,
	      SEL_ARR_m_regs_0_12_BITS_7_TO_1_82_m_regs_1_15_ETC___d687;
  reg [5 : 0] SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d377,
	      SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d378;
  reg [4 : 0] SEL_ARR_m_data_0_13_BITS_4_TO_0_84_m_data_1_16_ETC___d389,
	      SEL_ARR_m_data_0_13_BITS_8_TO_4_20_m_data_1_16_ETC___d525,
	      SEL_ARR_m_tag_0_39_BITS_4_TO_0_40_m_tag_1_48_B_ETC___d711;
  reg [3 : 0] SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__13_AND_ETC___d730,
	      SEL_ARR_m_data_0_13_BITS_14_TO_11_16_m_data_1__ETC___d421,
	      SEL_ARR_m_tag_0_39_BITS_8_TO_5_04_m_tag_1_48_B_ETC___d709;
  reg [2 : 0] CASE_enq_x_BITS_57_TO_55_0_enq_x_BITS_57_TO_55_ETC__q1,
	      IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536,
	      IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548,
	      IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560,
	      IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572,
	      SEL_ARR_m_data_0_13_BITS_17_TO_15_10_m_data_1__ETC___d415,
	      SEL_ARR_m_data_0_13_BITS_2_TO_0_97_m_data_1_16_ETC___d402;
  reg [1 : 0] SEL_ARR_m_data_0_13_BITS_1_TO_0_06_m_data_1_16_ETC___d511,
	      SEL_ARR_m_data_0_13_BITS_4_TO_3_00_m_data_1_16_ETC___d505,
	      SEL_ARR_m_spec_tag_0_31_BITS_1_TO_0_46_m_spec__ETC___d751;
  reg SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d575,
      SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d581,
      SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d587,
      SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d593,
      SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d599,
      SEL_ARR_NOT_m_regs_0_12_BIT_16_53_54_NOT_m_reg_ETC___d662,
      SEL_ARR_NOT_m_regs_0_12_BIT_24_34_35_NOT_m_reg_ETC___d643,
      SEL_ARR_NOT_m_regs_0_12_BIT_32_13_14_NOT_m_reg_ETC___d625,
      SEL_ARR_NOT_m_regs_0_12_BIT_8_71_72_NOT_m_regs_ETC___d680,
      SEL_ARR_NOT_m_spec_tag_0_31_BIT_2_32_33_NOT_m__ETC___d744,
      SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d358,
      SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d375,
      SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_0_15_m_ETC___d383,
      SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_1_91_m_ETC___d396,
      SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_2_04_m_ETC___d409,
      SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_3_94_m_ETC___d499,
      SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_4_14_m_ETC___d519,
      SEL_ARR_m_data_0_13_BIT_0_85_m_data_1_16_BIT_0_ETC___d490,
      SEL_ARR_m_data_0_13_BIT_10_22_m_data_1_16_BIT__ETC___d427,
      SEL_ARR_m_data_0_13_BIT_1_79_m_data_1_16_BIT_1_ETC___d484,
      SEL_ARR_m_data_0_13_BIT_2_73_m_data_1_16_BIT_2_ETC___d478,
      SEL_ARR_m_data_0_13_BIT_3_66_m_data_1_16_BIT_3_ETC___d471,
      SEL_ARR_m_data_0_13_BIT_4_60_m_data_1_16_BIT_4_ETC___d465,
      SEL_ARR_m_data_0_13_BIT_5_53_m_data_1_16_BIT_5_ETC___d458,
      SEL_ARR_m_data_0_13_BIT_6_47_m_data_1_16_BIT_6_ETC___d452,
      SEL_ARR_m_data_0_13_BIT_7_40_m_data_1_16_BIT_7_ETC___d445,
      SEL_ARR_m_data_0_13_BIT_8_34_m_data_1_16_BIT_8_ETC___d439,
      SEL_ARR_m_data_0_13_BIT_9_28_m_data_1_16_BIT_9_ETC___d433,
      SEL_ARR_m_regs_0_12_BIT_0_88_m_regs_1_15_BIT_0_ETC___d693,
      SEL_ARR_m_tag_0_39_BIT_9_98_m_tag_1_48_BIT_9_9_ETC___d703;
  wire [20 : 0] IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_0_1_ETC___d611,
		IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_2_0_ETC___d609,
		IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_3_9_ETC___d608,
		IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_4_1_ETC___d607;
  wire [5 : 0] IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m_robEnqTi_ETC___d347,
	       IF_m_tag_1_48_BITS_4_TO_0_49_ULT_IF_m_robEnqTi_ETC___d353,
	       IF_m_tag_2_59_BITS_4_TO_0_60_ULT_IF_m_robEnqTi_ETC___d364,
	       IF_m_tag_3_65_BITS_4_TO_0_66_ULT_IF_m_robEnqTi_ETC___d370;
  wire [4 : 0] x__read__h24363;
  wire [3 : 0] IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d71,
	       IF_m_regs_ready_0_lat_3_whas__1_THEN_m_regs_re_ETC___d73,
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d90,
	       IF_m_regs_ready_1_lat_3_whas__0_THEN_m_regs_re_ETC___d92,
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d109,
	       IF_m_regs_ready_2_lat_3_whas__9_THEN_m_regs_re_ETC___d111,
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d128,
	       IF_m_regs_ready_3_lat_3_whas__18_THEN_m_regs_r_ETC___d130,
	       IF_m_spec_bits_0_lat_0_whas__1_THEN_m_spec_bit_ETC___d34,
	       IF_m_spec_bits_1_lat_0_whas__8_THEN_m_spec_bit_ETC___d41,
	       IF_m_spec_bits_2_lat_0_whas__5_THEN_m_spec_bit_ETC___d48,
	       IF_m_spec_bits_3_lat_0_whas__2_THEN_m_spec_bit_ETC___d55,
	       bs__h64251,
	       bs__h64439,
	       bs__h64627,
	       bs__h64803,
	       n__read__h65289,
	       n__read__h65729,
	       n__read__h66169,
	       n__read__h66597,
	       upd__h6225,
	       upd__h7154,
	       upd__h8083,
	       upd__h9012;
  wire [2 : 0] IF_SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0__ETC___d602,
	       IF_SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0__ETC___d604;
  wire [1 : 0] IF_NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_ETC___d356,
	       IF_NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_ETC___d373,
	       IF_SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10__ETC___d381,
	       a__h41635,
	       b__h41636,
	       idx__h41421;
  wire IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d873,
       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d882,
       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d891,
       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d895,
       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1019,
       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1028,
       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1037,
       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1041,
       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1161,
       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1170,
       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1179,
       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1183,
       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d909,
       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d918,
       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d927,
       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d931,
       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1054,
       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1063,
       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1072,
       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1076,
       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1195,
       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1204,
       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1213,
       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1217,
       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d945,
       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d954,
       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d963,
       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d967,
       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1089,
       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1098,
       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1107,
       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1111,
       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1229,
       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1238,
       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1247,
       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1251,
       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d1003,
       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d981,
       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d990,
       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d999,
       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1124,
       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1133,
       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1142,
       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1146,
       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1263,
       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1272,
       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1281,
       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1285,
       NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d223,
       NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d328,
       NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d331,
       NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d238,
       NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d334,
       NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d337,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d1001,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d875,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d884,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d893,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d911,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d920,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d929,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d947,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d956,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d965,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d983,
       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d992,
       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139,
       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d145,
       m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d870,
       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d1017,
       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1300,
       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1309,
       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1318,
       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1322,
       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158,
       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d164,
       m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d906,
       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d1052,
       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1333,
       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1342,
       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1351,
       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1355,
       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177,
       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d183,
       m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d942,
       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d1087,
       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1366,
       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1375,
       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1384,
       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1388,
       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196,
       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d202,
       m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d978,
       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d1122,
       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1399,
       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1408,
       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1417,
       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1421,
       m_valid_0_dummy2_0_read__09_AND_m_valid_0_dumm_ETC___d244,
       m_valid_2_dummy2_0_read__24_AND_m_valid_2_dumm_ETC___d249;

  // action method enq
  assign RDY_enq = m_enqP_wire$wget[2] ;
  assign CAN_FIRE_enq = m_enqP_wire$wget[2] ;
  assign WILL_FIRE_enq = EN_enq ;

  // value method canEnq
  assign canEnq = m_enqP_wire$wget[2] ;
  assign RDY_canEnq = 1'd1 ;

  // action method setRobEnqTime
  assign RDY_setRobEnqTime = 1'd1 ;
  assign CAN_FIRE_setRobEnqTime = 1'd1 ;
  assign WILL_FIRE_setRobEnqTime = EN_setRobEnqTime ;

  // value method dispatchData
  assign dispatchData =
	     { IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_0_1_ETC___d611,
	       !SEL_ARR_NOT_m_regs_0_12_BIT_32_13_14_NOT_m_reg_ETC___d625,
	       SEL_ARR_m_regs_0_12_BITS_31_TO_25_27_m_regs_1__ETC___d632,
	       !SEL_ARR_NOT_m_regs_0_12_BIT_24_34_35_NOT_m_reg_ETC___d643,
	       SEL_ARR_m_regs_0_12_BITS_23_TO_17_45_m_regs_1__ETC___d650,
	       !SEL_ARR_NOT_m_regs_0_12_BIT_16_53_54_NOT_m_reg_ETC___d662,
	       SEL_ARR_m_regs_0_12_BITS_15_TO_9_64_m_regs_1_1_ETC___d669,
	       !SEL_ARR_NOT_m_regs_0_12_BIT_8_71_72_NOT_m_regs_ETC___d680,
	       SEL_ARR_m_regs_0_12_BITS_7_TO_1_82_m_regs_1_15_ETC___d687,
	       SEL_ARR_m_regs_0_12_BIT_0_88_m_regs_1_15_BIT_0_ETC___d693,
	       SEL_ARR_m_tag_0_39_BIT_9_98_m_tag_1_48_BIT_9_9_ETC___d703,
	       SEL_ARR_m_tag_0_39_BITS_8_TO_5_04_m_tag_1_48_B_ETC___d709,
	       SEL_ARR_m_tag_0_39_BITS_4_TO_0_40_m_tag_1_48_B_ETC___d711,
	       SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__13_AND_ETC___d730,
	       !SEL_ARR_NOT_m_spec_tag_0_31_BIT_2_32_33_NOT_m__ETC___d744,
	       SEL_ARR_m_spec_tag_0_31_BITS_1_TO_0_46_m_spec__ETC___d751,
	       4'd15 } ;
  assign RDY_dispatchData = RDY_doDispatch ;

  // action method doDispatch
  always@(idx__h41421 or
	  m_valid_0_dummy2_0$Q_OUT or
	  m_valid_0_dummy2_1$Q_OUT or
	  m_valid_0_rl or
	  m_ready_wire_0$wget or
	  m_valid_1_dummy2_0$Q_OUT or
	  m_valid_1_dummy2_1$Q_OUT or
	  m_valid_1_rl or
	  m_ready_wire_1$wget or
	  m_valid_2_dummy2_0$Q_OUT or
	  m_valid_2_dummy2_1$Q_OUT or
	  m_valid_2_rl or
	  m_ready_wire_2$wget or
	  m_valid_3_dummy2_0$Q_OUT or
	  m_valid_3_dummy2_1$Q_OUT or m_valid_3_rl or m_ready_wire_3$wget)
  begin
    case (idx__h41421)
      2'd0:
	  RDY_doDispatch =
	      m_valid_0_dummy2_0$Q_OUT && m_valid_0_dummy2_1$Q_OUT &&
	      m_valid_0_rl &&
	      m_ready_wire_0$wget;
      2'd1:
	  RDY_doDispatch =
	      m_valid_1_dummy2_0$Q_OUT && m_valid_1_dummy2_1$Q_OUT &&
	      m_valid_1_rl &&
	      m_ready_wire_1$wget;
      2'd2:
	  RDY_doDispatch =
	      m_valid_2_dummy2_0$Q_OUT && m_valid_2_dummy2_1$Q_OUT &&
	      m_valid_2_rl &&
	      m_ready_wire_2$wget;
      2'd3:
	  RDY_doDispatch =
	      m_valid_3_dummy2_0$Q_OUT && m_valid_3_dummy2_1$Q_OUT &&
	      m_valid_3_rl &&
	      m_ready_wire_3$wget;
    endcase
  end
  assign CAN_FIRE_doDispatch = RDY_doDispatch ;
  assign WILL_FIRE_doDispatch = EN_doDispatch ;

  // action method setRegReady_0_put
  assign RDY_setRegReady_0_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_0_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_0_put = EN_setRegReady_0_put ;

  // action method setRegReady_1_put
  assign RDY_setRegReady_1_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_1_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_1_put = EN_setRegReady_1_put ;

  // action method setRegReady_2_put
  assign RDY_setRegReady_2_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_2_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_2_put = EN_setRegReady_2_put ;

  // action method setRegReady_3_put
  assign RDY_setRegReady_3_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_3_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_3_put = EN_setRegReady_3_put ;

  // action method setRegReady_4_put
  assign RDY_setRegReady_4_put = 1'd1 ;
  assign CAN_FIRE_setRegReady_4_put = 1'd1 ;
  assign WILL_FIRE_setRegReady_4_put = EN_setRegReady_4_put ;

  // value method approximateCount
  assign approximateCount = m_validEntryCount ;
  assign RDY_approximateCount = 1'd1 ;

  // value method isFull_ehrPort0
  assign isFull_ehrPort0 =
	     m_valid_0_dummy2_0$Q_OUT && m_valid_0_dummy2_1$Q_OUT &&
	     m_valid_0_rl &&
	     m_valid_1_dummy2_0$Q_OUT &&
	     m_valid_1_dummy2_1$Q_OUT &&
	     m_valid_1_rl &&
	     m_valid_2_dummy2_0_read__24_AND_m_valid_2_dumm_ETC___d249 ;
  assign RDY_isFull_ehrPort0 = 1'd1 ;

  // action method specUpdate_incorrectSpeculation
  assign RDY_specUpdate_incorrectSpeculation = 1'd1 ;
  assign CAN_FIRE_specUpdate_incorrectSpeculation = 1'd1 ;
  assign WILL_FIRE_specUpdate_incorrectSpeculation =
	     EN_specUpdate_incorrectSpeculation ;

  // action method specUpdate_correctSpeculation
  assign RDY_specUpdate_correctSpeculation = 1'd1 ;
  assign CAN_FIRE_specUpdate_correctSpeculation = 1'd1 ;
  assign WILL_FIRE_specUpdate_correctSpeculation =
	     EN_specUpdate_correctSpeculation ;

  // submodule m_regs_ready_0_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_0(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_0$D_IN),
								  .EN(m_regs_ready_0_dummy2_0$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_0$Q_OUT));

  // submodule m_regs_ready_0_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_1(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_1$D_IN),
								  .EN(m_regs_ready_0_dummy2_1$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_1$Q_OUT));

  // submodule m_regs_ready_0_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_2(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_2$D_IN),
								  .EN(m_regs_ready_0_dummy2_2$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_2$Q_OUT));

  // submodule m_regs_ready_0_dummy2_3
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_3(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_3$D_IN),
								  .EN(m_regs_ready_0_dummy2_3$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_3$Q_OUT));

  // submodule m_regs_ready_0_dummy2_4
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_4(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_4$D_IN),
								  .EN(m_regs_ready_0_dummy2_4$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_4$Q_OUT));

  // submodule m_regs_ready_0_dummy2_5
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_0_dummy2_5(.CLK(CLK),
								  .D_IN(m_regs_ready_0_dummy2_5$D_IN),
								  .EN(m_regs_ready_0_dummy2_5$EN),
								  .Q_OUT(m_regs_ready_0_dummy2_5$Q_OUT));

  // submodule m_regs_ready_1_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_0(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_0$D_IN),
								  .EN(m_regs_ready_1_dummy2_0$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_0$Q_OUT));

  // submodule m_regs_ready_1_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_1(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_1$D_IN),
								  .EN(m_regs_ready_1_dummy2_1$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_1$Q_OUT));

  // submodule m_regs_ready_1_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_2(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_2$D_IN),
								  .EN(m_regs_ready_1_dummy2_2$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_2$Q_OUT));

  // submodule m_regs_ready_1_dummy2_3
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_3(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_3$D_IN),
								  .EN(m_regs_ready_1_dummy2_3$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_3$Q_OUT));

  // submodule m_regs_ready_1_dummy2_4
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_4(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_4$D_IN),
								  .EN(m_regs_ready_1_dummy2_4$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_4$Q_OUT));

  // submodule m_regs_ready_1_dummy2_5
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_1_dummy2_5(.CLK(CLK),
								  .D_IN(m_regs_ready_1_dummy2_5$D_IN),
								  .EN(m_regs_ready_1_dummy2_5$EN),
								  .Q_OUT(m_regs_ready_1_dummy2_5$Q_OUT));

  // submodule m_regs_ready_2_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_0(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_0$D_IN),
								  .EN(m_regs_ready_2_dummy2_0$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_0$Q_OUT));

  // submodule m_regs_ready_2_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_1(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_1$D_IN),
								  .EN(m_regs_ready_2_dummy2_1$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_1$Q_OUT));

  // submodule m_regs_ready_2_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_2(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_2$D_IN),
								  .EN(m_regs_ready_2_dummy2_2$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_2$Q_OUT));

  // submodule m_regs_ready_2_dummy2_3
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_3(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_3$D_IN),
								  .EN(m_regs_ready_2_dummy2_3$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_3$Q_OUT));

  // submodule m_regs_ready_2_dummy2_4
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_4(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_4$D_IN),
								  .EN(m_regs_ready_2_dummy2_4$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_4$Q_OUT));

  // submodule m_regs_ready_2_dummy2_5
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_2_dummy2_5(.CLK(CLK),
								  .D_IN(m_regs_ready_2_dummy2_5$D_IN),
								  .EN(m_regs_ready_2_dummy2_5$EN),
								  .Q_OUT(m_regs_ready_2_dummy2_5$Q_OUT));

  // submodule m_regs_ready_3_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_0(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_0$D_IN),
								  .EN(m_regs_ready_3_dummy2_0$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_0$Q_OUT));

  // submodule m_regs_ready_3_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_1(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_1$D_IN),
								  .EN(m_regs_ready_3_dummy2_1$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_1$Q_OUT));

  // submodule m_regs_ready_3_dummy2_2
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_2(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_2$D_IN),
								  .EN(m_regs_ready_3_dummy2_2$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_2$Q_OUT));

  // submodule m_regs_ready_3_dummy2_3
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_3(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_3$D_IN),
								  .EN(m_regs_ready_3_dummy2_3$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_3$Q_OUT));

  // submodule m_regs_ready_3_dummy2_4
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_4(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_4$D_IN),
								  .EN(m_regs_ready_3_dummy2_4$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_4$Q_OUT));

  // submodule m_regs_ready_3_dummy2_5
  RevertReg #(.width(32'd1), .init(1'd1)) m_regs_ready_3_dummy2_5(.CLK(CLK),
								  .D_IN(m_regs_ready_3_dummy2_5$D_IN),
								  .EN(m_regs_ready_3_dummy2_5$EN),
								  .Q_OUT(m_regs_ready_3_dummy2_5$Q_OUT));

  // submodule m_spec_bits_0_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_0_dummy2_0(.CLK(CLK),
								 .D_IN(m_spec_bits_0_dummy2_0$D_IN),
								 .EN(m_spec_bits_0_dummy2_0$EN),
								 .Q_OUT(m_spec_bits_0_dummy2_0$Q_OUT));

  // submodule m_spec_bits_0_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_0_dummy2_1(.CLK(CLK),
								 .D_IN(m_spec_bits_0_dummy2_1$D_IN),
								 .EN(m_spec_bits_0_dummy2_1$EN),
								 .Q_OUT(m_spec_bits_0_dummy2_1$Q_OUT));

  // submodule m_spec_bits_1_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_1_dummy2_0(.CLK(CLK),
								 .D_IN(m_spec_bits_1_dummy2_0$D_IN),
								 .EN(m_spec_bits_1_dummy2_0$EN),
								 .Q_OUT(m_spec_bits_1_dummy2_0$Q_OUT));

  // submodule m_spec_bits_1_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_1_dummy2_1(.CLK(CLK),
								 .D_IN(m_spec_bits_1_dummy2_1$D_IN),
								 .EN(m_spec_bits_1_dummy2_1$EN),
								 .Q_OUT(m_spec_bits_1_dummy2_1$Q_OUT));

  // submodule m_spec_bits_2_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_2_dummy2_0(.CLK(CLK),
								 .D_IN(m_spec_bits_2_dummy2_0$D_IN),
								 .EN(m_spec_bits_2_dummy2_0$EN),
								 .Q_OUT(m_spec_bits_2_dummy2_0$Q_OUT));

  // submodule m_spec_bits_2_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_2_dummy2_1(.CLK(CLK),
								 .D_IN(m_spec_bits_2_dummy2_1$D_IN),
								 .EN(m_spec_bits_2_dummy2_1$EN),
								 .Q_OUT(m_spec_bits_2_dummy2_1$Q_OUT));

  // submodule m_spec_bits_3_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_3_dummy2_0(.CLK(CLK),
								 .D_IN(m_spec_bits_3_dummy2_0$D_IN),
								 .EN(m_spec_bits_3_dummy2_0$EN),
								 .Q_OUT(m_spec_bits_3_dummy2_0$Q_OUT));

  // submodule m_spec_bits_3_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_spec_bits_3_dummy2_1(.CLK(CLK),
								 .D_IN(m_spec_bits_3_dummy2_1$D_IN),
								 .EN(m_spec_bits_3_dummy2_1$EN),
								 .Q_OUT(m_spec_bits_3_dummy2_1$Q_OUT));

  // submodule m_valid_0_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_0_dummy2_0(.CLK(CLK),
							     .D_IN(m_valid_0_dummy2_0$D_IN),
							     .EN(m_valid_0_dummy2_0$EN),
							     .Q_OUT(m_valid_0_dummy2_0$Q_OUT));

  // submodule m_valid_0_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_0_dummy2_1(.CLK(CLK),
							     .D_IN(m_valid_0_dummy2_1$D_IN),
							     .EN(m_valid_0_dummy2_1$EN),
							     .Q_OUT(m_valid_0_dummy2_1$Q_OUT));

  // submodule m_valid_1_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_1_dummy2_0(.CLK(CLK),
							     .D_IN(m_valid_1_dummy2_0$D_IN),
							     .EN(m_valid_1_dummy2_0$EN),
							     .Q_OUT(m_valid_1_dummy2_0$Q_OUT));

  // submodule m_valid_1_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_1_dummy2_1(.CLK(CLK),
							     .D_IN(m_valid_1_dummy2_1$D_IN),
							     .EN(m_valid_1_dummy2_1$EN),
							     .Q_OUT(m_valid_1_dummy2_1$Q_OUT));

  // submodule m_valid_2_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_2_dummy2_0(.CLK(CLK),
							     .D_IN(m_valid_2_dummy2_0$D_IN),
							     .EN(m_valid_2_dummy2_0$EN),
							     .Q_OUT(m_valid_2_dummy2_0$Q_OUT));

  // submodule m_valid_2_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_2_dummy2_1(.CLK(CLK),
							     .D_IN(m_valid_2_dummy2_1$D_IN),
							     .EN(m_valid_2_dummy2_1$EN),
							     .Q_OUT(m_valid_2_dummy2_1$Q_OUT));

  // submodule m_valid_3_dummy2_0
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_3_dummy2_0(.CLK(CLK),
							     .D_IN(m_valid_3_dummy2_0$D_IN),
							     .EN(m_valid_3_dummy2_0$EN),
							     .Q_OUT(m_valid_3_dummy2_0$Q_OUT));

  // submodule m_valid_3_dummy2_1
  RevertReg #(.width(32'd1), .init(1'd1)) m_valid_3_dummy2_1(.CLK(CLK),
							     .D_IN(m_valid_3_dummy2_1$D_IN),
							     .EN(m_valid_3_dummy2_1$EN),
							     .Q_OUT(m_valid_3_dummy2_1$Q_OUT));

  // rule RL_m_setReadyWire
  assign CAN_FIRE_RL_m_setReadyWire = 1'd1 ;
  assign WILL_FIRE_RL_m_setReadyWire = 1'd1 ;

  // rule RL_m_setWireForEnq
  assign CAN_FIRE_RL_m_setWireForEnq = 1'd1 ;
  assign WILL_FIRE_RL_m_setWireForEnq = 1'd1 ;

  // rule RL_m_valid_0_canon
  assign CAN_FIRE_RL_m_valid_0_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_valid_0_canon = 1'd1 ;

  // rule RL_m_valid_1_canon
  assign CAN_FIRE_RL_m_valid_1_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_valid_1_canon = 1'd1 ;

  // rule RL_m_valid_2_canon
  assign CAN_FIRE_RL_m_valid_2_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_valid_2_canon = 1'd1 ;

  // rule RL_m_valid_3_canon
  assign CAN_FIRE_RL_m_valid_3_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_valid_3_canon = 1'd1 ;

  // rule RL_m_spec_bits_0_canon
  assign CAN_FIRE_RL_m_spec_bits_0_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_spec_bits_0_canon = 1'd1 ;

  // rule RL_m_spec_bits_1_canon
  assign CAN_FIRE_RL_m_spec_bits_1_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_spec_bits_1_canon = 1'd1 ;

  // rule RL_m_spec_bits_2_canon
  assign CAN_FIRE_RL_m_spec_bits_2_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_spec_bits_2_canon = 1'd1 ;

  // rule RL_m_spec_bits_3_canon
  assign CAN_FIRE_RL_m_spec_bits_3_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_spec_bits_3_canon = 1'd1 ;

  // rule RL_m_regs_ready_0_canon
  assign CAN_FIRE_RL_m_regs_ready_0_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_regs_ready_0_canon = 1'd1 ;

  // rule RL_m_regs_ready_1_canon
  assign CAN_FIRE_RL_m_regs_ready_1_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_regs_ready_1_canon = 1'd1 ;

  // rule RL_m_regs_ready_2_canon
  assign CAN_FIRE_RL_m_regs_ready_2_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_regs_ready_2_canon = 1'd1 ;

  // rule RL_m_regs_ready_3_canon
  assign CAN_FIRE_RL_m_regs_ready_3_canon = 1'd1 ;
  assign WILL_FIRE_RL_m_regs_ready_3_canon = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_m_valid_0_dummy2_0$write_1__SEL_1 =
	     EN_doDispatch && idx__h41421 == 2'd0 ;
  assign MUX_m_valid_0_dummy2_0$write_1__SEL_2 =
	     EN_specUpdate_incorrectSpeculation &&
	     (specUpdate_incorrectSpeculation_kill_all ||
	      bs__h64251[specUpdate_incorrectSpeculation_kill_tag]) ;
  assign MUX_m_valid_1_dummy2_0$write_1__SEL_1 =
	     EN_doDispatch && idx__h41421 == 2'd1 ;
  assign MUX_m_valid_1_dummy2_0$write_1__SEL_2 =
	     EN_specUpdate_incorrectSpeculation &&
	     (specUpdate_incorrectSpeculation_kill_all ||
	      bs__h64439[specUpdate_incorrectSpeculation_kill_tag]) ;
  assign MUX_m_valid_2_dummy2_0$write_1__SEL_1 =
	     EN_doDispatch && idx__h41421 == 2'd2 ;
  assign MUX_m_valid_2_dummy2_0$write_1__SEL_2 =
	     EN_specUpdate_incorrectSpeculation &&
	     (specUpdate_incorrectSpeculation_kill_all ||
	      bs__h64627[specUpdate_incorrectSpeculation_kill_tag]) ;
  assign MUX_m_valid_3_dummy2_0$write_1__SEL_1 =
	     EN_doDispatch && idx__h41421 == 2'd3 ;
  assign MUX_m_valid_3_dummy2_0$write_1__SEL_2 =
	     EN_specUpdate_incorrectSpeculation &&
	     (specUpdate_incorrectSpeculation_kill_all ||
	      bs__h64803[specUpdate_incorrectSpeculation_kill_tag]) ;

  // inlined wires
  assign m_valid_0_lat_0$whas =
	     MUX_m_valid_0_dummy2_0$write_1__SEL_1 ||
	     MUX_m_valid_0_dummy2_0$write_1__SEL_2 ;
  assign m_valid_0_lat_1$whas = EN_enq && m_enqP_wire$wget[1:0] == 2'd0 ;
  assign m_valid_1_lat_0$whas =
	     MUX_m_valid_1_dummy2_0$write_1__SEL_1 ||
	     MUX_m_valid_1_dummy2_0$write_1__SEL_2 ;
  assign m_valid_1_lat_1$whas = EN_enq && m_enqP_wire$wget[1:0] == 2'd1 ;
  assign m_valid_2_lat_0$whas =
	     MUX_m_valid_2_dummy2_0$write_1__SEL_1 ||
	     MUX_m_valid_2_dummy2_0$write_1__SEL_2 ;
  assign m_valid_2_lat_1$whas = EN_enq && m_enqP_wire$wget[1:0] == 2'd2 ;
  assign m_valid_3_lat_1$whas = EN_enq && m_enqP_wire$wget[1:0] == 2'd3 ;
  assign m_valid_3_dummy_1_0$wget =
	     MUX_m_valid_3_dummy2_0$write_1__SEL_1 ||
	     MUX_m_valid_3_dummy2_0$write_1__SEL_2 ;
  assign m_regs_ready_0_lat_0$wget =
	     { !setRegReady_0_put[7] && !m_regs_0[32] ||
	       setRegReady_0_put[7] && m_regs_0[32] &&
	       setRegReady_0_put[6:0] == m_regs_0[31:25] ||
	       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d145,
	       !setRegReady_0_put[7] && !m_regs_0[24] ||
	       setRegReady_0_put[7] && m_regs_0[24] &&
	       setRegReady_0_put[6:0] == m_regs_0[23:17] ||
	       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       m_regs_ready_0_rl[2],
	       !setRegReady_0_put[7] && !m_regs_0[16] ||
	       setRegReady_0_put[7] && m_regs_0[16] &&
	       setRegReady_0_put[6:0] == m_regs_0[15:9] ||
	       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       m_regs_ready_0_rl[1],
	       m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       m_regs_ready_0_rl[0] } ;
  assign m_regs_ready_0_lat_1$wget =
	     { NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d875,
	       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d884,
	       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d893,
	       m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d870 &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d895 } ;
  assign m_regs_ready_0_lat_2$wget =
	     { !setRegReady_2_put[7] && !m_regs_0[32] ||
	       setRegReady_2_put[7] && m_regs_0[32] &&
	       setRegReady_2_put[6:0] == m_regs_0[31:25] ||
	       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d1017 &&
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1019,
	       !setRegReady_2_put[7] && !m_regs_0[24] ||
	       setRegReady_2_put[7] && m_regs_0[24] &&
	       setRegReady_2_put[6:0] == m_regs_0[23:17] ||
	       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d1017 &&
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1028,
	       !setRegReady_2_put[7] && !m_regs_0[16] ||
	       setRegReady_2_put[7] && m_regs_0[16] &&
	       setRegReady_2_put[6:0] == m_regs_0[15:9] ||
	       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d1017 &&
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1037,
	       m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d1017 &&
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1041 } ;
  assign m_regs_ready_0_lat_3$wget =
	     { !setRegReady_3_put[7] && !m_regs_0[32] ||
	       setRegReady_3_put[7] && m_regs_0[32] &&
	       setRegReady_3_put[6:0] == m_regs_0[31:25] ||
	       m_regs_ready_0_dummy2_3$Q_OUT &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1161,
	       !setRegReady_3_put[7] && !m_regs_0[24] ||
	       setRegReady_3_put[7] && m_regs_0[24] &&
	       setRegReady_3_put[6:0] == m_regs_0[23:17] ||
	       m_regs_ready_0_dummy2_3$Q_OUT &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1170,
	       !setRegReady_3_put[7] && !m_regs_0[16] ||
	       setRegReady_3_put[7] && m_regs_0[16] &&
	       setRegReady_3_put[6:0] == m_regs_0[15:9] ||
	       m_regs_ready_0_dummy2_3$Q_OUT &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1179,
	       m_regs_ready_0_dummy2_3$Q_OUT &&
	       m_regs_ready_0_dummy2_4$Q_OUT &&
	       m_regs_ready_0_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1183 } ;
  assign m_regs_ready_0_lat_4$wget =
	     { !setRegReady_4_put[7] && !m_regs_0[32] ||
	       setRegReady_4_put[7] && m_regs_0[32] &&
	       setRegReady_4_put[6:0] == m_regs_0[31:25] ||
	       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1300,
	       !setRegReady_4_put[7] && !m_regs_0[24] ||
	       setRegReady_4_put[7] && m_regs_0[24] &&
	       setRegReady_4_put[6:0] == m_regs_0[23:17] ||
	       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1309,
	       !setRegReady_4_put[7] && !m_regs_0[16] ||
	       setRegReady_4_put[7] && m_regs_0[16] &&
	       setRegReady_4_put[6:0] == m_regs_0[15:9] ||
	       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1318,
	       m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1322 } ;
  assign m_regs_ready_1_lat_0$wget =
	     { !setRegReady_0_put[7] && !m_regs_1[32] ||
	       setRegReady_0_put[7] && m_regs_1[32] &&
	       setRegReady_0_put[6:0] == m_regs_1[31:25] ||
	       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d164,
	       !setRegReady_0_put[7] && !m_regs_1[24] ||
	       setRegReady_0_put[7] && m_regs_1[24] &&
	       setRegReady_0_put[6:0] == m_regs_1[23:17] ||
	       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       m_regs_ready_1_rl[2],
	       !setRegReady_0_put[7] && !m_regs_1[16] ||
	       setRegReady_0_put[7] && m_regs_1[16] &&
	       setRegReady_0_put[6:0] == m_regs_1[15:9] ||
	       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       m_regs_ready_1_rl[1],
	       m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       m_regs_ready_1_rl[0] } ;
  assign m_regs_ready_1_lat_1$wget =
	     { NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d911,
	       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d920,
	       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d929,
	       m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d906 &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d931 } ;
  assign m_regs_ready_1_lat_2$wget =
	     { !setRegReady_2_put[7] && !m_regs_1[32] ||
	       setRegReady_2_put[7] && m_regs_1[32] &&
	       setRegReady_2_put[6:0] == m_regs_1[31:25] ||
	       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d1052 &&
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1054,
	       !setRegReady_2_put[7] && !m_regs_1[24] ||
	       setRegReady_2_put[7] && m_regs_1[24] &&
	       setRegReady_2_put[6:0] == m_regs_1[23:17] ||
	       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d1052 &&
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1063,
	       !setRegReady_2_put[7] && !m_regs_1[16] ||
	       setRegReady_2_put[7] && m_regs_1[16] &&
	       setRegReady_2_put[6:0] == m_regs_1[15:9] ||
	       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d1052 &&
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1072,
	       m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d1052 &&
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1076 } ;
  assign m_regs_ready_1_lat_3$wget =
	     { !setRegReady_3_put[7] && !m_regs_1[32] ||
	       setRegReady_3_put[7] && m_regs_1[32] &&
	       setRegReady_3_put[6:0] == m_regs_1[31:25] ||
	       m_regs_ready_1_dummy2_3$Q_OUT &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1195,
	       !setRegReady_3_put[7] && !m_regs_1[24] ||
	       setRegReady_3_put[7] && m_regs_1[24] &&
	       setRegReady_3_put[6:0] == m_regs_1[23:17] ||
	       m_regs_ready_1_dummy2_3$Q_OUT &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1204,
	       !setRegReady_3_put[7] && !m_regs_1[16] ||
	       setRegReady_3_put[7] && m_regs_1[16] &&
	       setRegReady_3_put[6:0] == m_regs_1[15:9] ||
	       m_regs_ready_1_dummy2_3$Q_OUT &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1213,
	       m_regs_ready_1_dummy2_3$Q_OUT &&
	       m_regs_ready_1_dummy2_4$Q_OUT &&
	       m_regs_ready_1_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1217 } ;
  assign m_regs_ready_1_lat_4$wget =
	     { !setRegReady_4_put[7] && !m_regs_1[32] ||
	       setRegReady_4_put[7] && m_regs_1[32] &&
	       setRegReady_4_put[6:0] == m_regs_1[31:25] ||
	       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1333,
	       !setRegReady_4_put[7] && !m_regs_1[24] ||
	       setRegReady_4_put[7] && m_regs_1[24] &&
	       setRegReady_4_put[6:0] == m_regs_1[23:17] ||
	       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1342,
	       !setRegReady_4_put[7] && !m_regs_1[16] ||
	       setRegReady_4_put[7] && m_regs_1[16] &&
	       setRegReady_4_put[6:0] == m_regs_1[15:9] ||
	       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1351,
	       m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1355 } ;
  assign m_regs_ready_2_lat_0$wget =
	     { !setRegReady_0_put[7] && !m_regs_2[32] ||
	       setRegReady_0_put[7] && m_regs_2[32] &&
	       setRegReady_0_put[6:0] == m_regs_2[31:25] ||
	       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d183,
	       !setRegReady_0_put[7] && !m_regs_2[24] ||
	       setRegReady_0_put[7] && m_regs_2[24] &&
	       setRegReady_0_put[6:0] == m_regs_2[23:17] ||
	       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       m_regs_ready_2_rl[2],
	       !setRegReady_0_put[7] && !m_regs_2[16] ||
	       setRegReady_0_put[7] && m_regs_2[16] &&
	       setRegReady_0_put[6:0] == m_regs_2[15:9] ||
	       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       m_regs_ready_2_rl[1],
	       m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       m_regs_ready_2_rl[0] } ;
  assign m_regs_ready_2_lat_1$wget =
	     { NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d947,
	       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d956,
	       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d965,
	       m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d942 &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d967 } ;
  assign m_regs_ready_2_lat_2$wget =
	     { !setRegReady_2_put[7] && !m_regs_2[32] ||
	       setRegReady_2_put[7] && m_regs_2[32] &&
	       setRegReady_2_put[6:0] == m_regs_2[31:25] ||
	       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d1087 &&
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1089,
	       !setRegReady_2_put[7] && !m_regs_2[24] ||
	       setRegReady_2_put[7] && m_regs_2[24] &&
	       setRegReady_2_put[6:0] == m_regs_2[23:17] ||
	       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d1087 &&
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1098,
	       !setRegReady_2_put[7] && !m_regs_2[16] ||
	       setRegReady_2_put[7] && m_regs_2[16] &&
	       setRegReady_2_put[6:0] == m_regs_2[15:9] ||
	       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d1087 &&
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1107,
	       m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d1087 &&
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1111 } ;
  assign m_regs_ready_2_lat_3$wget =
	     { !setRegReady_3_put[7] && !m_regs_2[32] ||
	       setRegReady_3_put[7] && m_regs_2[32] &&
	       setRegReady_3_put[6:0] == m_regs_2[31:25] ||
	       m_regs_ready_2_dummy2_3$Q_OUT &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1229,
	       !setRegReady_3_put[7] && !m_regs_2[24] ||
	       setRegReady_3_put[7] && m_regs_2[24] &&
	       setRegReady_3_put[6:0] == m_regs_2[23:17] ||
	       m_regs_ready_2_dummy2_3$Q_OUT &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1238,
	       !setRegReady_3_put[7] && !m_regs_2[16] ||
	       setRegReady_3_put[7] && m_regs_2[16] &&
	       setRegReady_3_put[6:0] == m_regs_2[15:9] ||
	       m_regs_ready_2_dummy2_3$Q_OUT &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1247,
	       m_regs_ready_2_dummy2_3$Q_OUT &&
	       m_regs_ready_2_dummy2_4$Q_OUT &&
	       m_regs_ready_2_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1251 } ;
  assign m_regs_ready_2_lat_4$wget =
	     { !setRegReady_4_put[7] && !m_regs_2[32] ||
	       setRegReady_4_put[7] && m_regs_2[32] &&
	       setRegReady_4_put[6:0] == m_regs_2[31:25] ||
	       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1366,
	       !setRegReady_4_put[7] && !m_regs_2[24] ||
	       setRegReady_4_put[7] && m_regs_2[24] &&
	       setRegReady_4_put[6:0] == m_regs_2[23:17] ||
	       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1375,
	       !setRegReady_4_put[7] && !m_regs_2[16] ||
	       setRegReady_4_put[7] && m_regs_2[16] &&
	       setRegReady_4_put[6:0] == m_regs_2[15:9] ||
	       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1384,
	       m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1388 } ;
  assign m_regs_ready_3_lat_0$wget =
	     { !setRegReady_0_put[7] && !m_regs_3[32] ||
	       setRegReady_0_put[7] && m_regs_3[32] &&
	       setRegReady_0_put[6:0] == m_regs_3[31:25] ||
	       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d202,
	       !setRegReady_0_put[7] && !m_regs_3[24] ||
	       setRegReady_0_put[7] && m_regs_3[24] &&
	       setRegReady_0_put[6:0] == m_regs_3[23:17] ||
	       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       m_regs_ready_3_rl[2],
	       !setRegReady_0_put[7] && !m_regs_3[16] ||
	       setRegReady_0_put[7] && m_regs_3[16] &&
	       setRegReady_0_put[6:0] == m_regs_3[15:9] ||
	       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       m_regs_ready_3_rl[1],
	       m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       m_regs_ready_3_rl[0] } ;
  assign m_regs_ready_3_lat_1$wget =
	     { NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d983,
	       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d992,
	       NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d1001,
	       m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d978 &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d1003 } ;
  assign m_regs_ready_3_lat_2$wget =
	     { !setRegReady_2_put[7] && !m_regs_3[32] ||
	       setRegReady_2_put[7] && m_regs_3[32] &&
	       setRegReady_2_put[6:0] == m_regs_3[31:25] ||
	       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d1122 &&
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1124,
	       !setRegReady_2_put[7] && !m_regs_3[24] ||
	       setRegReady_2_put[7] && m_regs_3[24] &&
	       setRegReady_2_put[6:0] == m_regs_3[23:17] ||
	       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d1122 &&
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1133,
	       !setRegReady_2_put[7] && !m_regs_3[16] ||
	       setRegReady_2_put[7] && m_regs_3[16] &&
	       setRegReady_2_put[6:0] == m_regs_3[15:9] ||
	       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d1122 &&
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1142,
	       m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d1122 &&
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1146 } ;
  assign m_regs_ready_3_lat_3$wget =
	     { !setRegReady_3_put[7] && !m_regs_3[32] ||
	       setRegReady_3_put[7] && m_regs_3[32] &&
	       setRegReady_3_put[6:0] == m_regs_3[31:25] ||
	       m_regs_ready_3_dummy2_3$Q_OUT &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1263,
	       !setRegReady_3_put[7] && !m_regs_3[24] ||
	       setRegReady_3_put[7] && m_regs_3[24] &&
	       setRegReady_3_put[6:0] == m_regs_3[23:17] ||
	       m_regs_ready_3_dummy2_3$Q_OUT &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1272,
	       !setRegReady_3_put[7] && !m_regs_3[16] ||
	       setRegReady_3_put[7] && m_regs_3[16] &&
	       setRegReady_3_put[6:0] == m_regs_3[15:9] ||
	       m_regs_ready_3_dummy2_3$Q_OUT &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1281,
	       m_regs_ready_3_dummy2_3$Q_OUT &&
	       m_regs_ready_3_dummy2_4$Q_OUT &&
	       m_regs_ready_3_dummy2_5$Q_OUT &&
	       IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1285 } ;
  assign m_regs_ready_3_lat_4$wget =
	     { !setRegReady_4_put[7] && !m_regs_3[32] ||
	       setRegReady_4_put[7] && m_regs_3[32] &&
	       setRegReady_4_put[6:0] == m_regs_3[31:25] ||
	       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1399,
	       !setRegReady_4_put[7] && !m_regs_3[24] ||
	       setRegReady_4_put[7] && m_regs_3[24] &&
	       setRegReady_4_put[6:0] == m_regs_3[23:17] ||
	       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1408,
	       !setRegReady_4_put[7] && !m_regs_3[16] ||
	       setRegReady_4_put[7] && m_regs_3[16] &&
	       setRegReady_4_put[6:0] == m_regs_3[15:9] ||
	       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1417,
	       m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1421 } ;
  assign m_ready_wire_0$wget =
	     m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d145 &&
	     m_regs_ready_0_rl[2] &&
	     m_regs_ready_0_rl[1] &&
	     m_regs_ready_0_rl[0] ;
  assign m_ready_wire_1$wget =
	     m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d164 &&
	     m_regs_ready_1_rl[2] &&
	     m_regs_ready_1_rl[1] &&
	     m_regs_ready_1_rl[0] ;
  assign m_ready_wire_2$wget =
	     m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d183 &&
	     m_regs_ready_2_rl[2] &&
	     m_regs_ready_2_rl[1] &&
	     m_regs_ready_2_rl[0] ;
  assign m_ready_wire_3$wget =
	     m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d202 &&
	     m_regs_ready_3_rl[2] &&
	     m_regs_ready_3_rl[1] &&
	     m_regs_ready_3_rl[0] ;
  assign m_enqP_wire$wget =
	     { NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d223 ||
	       NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d238,
	       m_valid_0_dummy2_0_read__09_AND_m_valid_0_dumm_ETC___d244 ?
		 ((m_valid_2_dummy2_0$Q_OUT && m_valid_2_dummy2_1$Q_OUT &&
		   m_valid_2_rl) ?
		    2'd3 :
		    2'd2) :
		 ((m_valid_0_dummy2_0$Q_OUT && m_valid_0_dummy2_1$Q_OUT &&
		   m_valid_0_rl) ?
		    2'd1 :
		    2'd0) } ;

  // register m_data_0
  always@(enq_x or CASE_enq_x_BITS_57_TO_55_0_enq_x_BITS_57_TO_55_ETC__q1)
  begin
    case (enq_x[74:72])
      3'd0, 3'd1, 3'd2, 3'd3: m_data_0$D_IN = enq_x[74:54];
      3'd4:
	  m_data_0$D_IN =
	      { enq_x[74:72],
		9'h0AA,
		enq_x[62:58],
		CASE_enq_x_BITS_57_TO_55_0_enq_x_BITS_57_TO_55_ETC__q1,
		enq_x[54] };
      default: m_data_0$D_IN = 21'd1485482;
    endcase
  end
  assign m_data_0$EN = m_valid_0_lat_1$whas ;

  // register m_data_1
  assign m_data_1$D_IN = m_data_0$D_IN ;
  assign m_data_1$EN = m_valid_1_lat_1$whas ;

  // register m_data_2
  assign m_data_2$D_IN = m_data_0$D_IN ;
  assign m_data_2$EN = m_valid_2_lat_1$whas ;

  // register m_data_3
  assign m_data_3$D_IN = m_data_0$D_IN ;
  assign m_data_3$EN = m_valid_3_lat_1$whas ;

  // register m_regs_0
  assign m_regs_0$D_IN = enq_x[53:21] ;
  assign m_regs_0$EN = m_valid_0_lat_1$whas ;

  // register m_regs_1
  assign m_regs_1$D_IN = enq_x[53:21] ;
  assign m_regs_1$EN = m_valid_1_lat_1$whas ;

  // register m_regs_2
  assign m_regs_2$D_IN = enq_x[53:21] ;
  assign m_regs_2$EN = m_valid_2_lat_1$whas ;

  // register m_regs_3
  assign m_regs_3$D_IN = enq_x[53:21] ;
  assign m_regs_3$EN = m_valid_3_lat_1$whas ;

  // register m_regs_ready_0_rl
  assign m_regs_ready_0_rl$D_IN =
	     m_valid_0_lat_1$whas ?
	       enq_x[3:0] :
	       (EN_setRegReady_4_put ?
		  m_regs_ready_0_lat_4$wget :
		  IF_m_regs_ready_0_lat_3_whas__1_THEN_m_regs_re_ETC___d73) ;
  assign m_regs_ready_0_rl$EN = 1'd1 ;

  // register m_regs_ready_1_rl
  assign m_regs_ready_1_rl$D_IN =
	     m_valid_1_lat_1$whas ?
	       enq_x[3:0] :
	       (EN_setRegReady_4_put ?
		  m_regs_ready_1_lat_4$wget :
		  IF_m_regs_ready_1_lat_3_whas__0_THEN_m_regs_re_ETC___d92) ;
  assign m_regs_ready_1_rl$EN = 1'd1 ;

  // register m_regs_ready_2_rl
  assign m_regs_ready_2_rl$D_IN =
	     m_valid_2_lat_1$whas ?
	       enq_x[3:0] :
	       (EN_setRegReady_4_put ?
		  m_regs_ready_2_lat_4$wget :
		  IF_m_regs_ready_2_lat_3_whas__9_THEN_m_regs_re_ETC___d111) ;
  assign m_regs_ready_2_rl$EN = 1'd1 ;

  // register m_regs_ready_3_rl
  assign m_regs_ready_3_rl$D_IN =
	     m_valid_3_lat_1$whas ?
	       enq_x[3:0] :
	       (EN_setRegReady_4_put ?
		  m_regs_ready_3_lat_4$wget :
		  IF_m_regs_ready_3_lat_3_whas__18_THEN_m_regs_r_ETC___d130) ;
  assign m_regs_ready_3_rl$EN = 1'd1 ;

  // register m_spec_bits_0_rl
  assign m_spec_bits_0_rl$D_IN =
	     EN_specUpdate_correctSpeculation ?
	       upd__h6225 :
	       IF_m_spec_bits_0_lat_0_whas__1_THEN_m_spec_bit_ETC___d34 ;
  assign m_spec_bits_0_rl$EN = 1'd1 ;

  // register m_spec_bits_1_rl
  assign m_spec_bits_1_rl$D_IN =
	     EN_specUpdate_correctSpeculation ?
	       upd__h7154 :
	       IF_m_spec_bits_1_lat_0_whas__8_THEN_m_spec_bit_ETC___d41 ;
  assign m_spec_bits_1_rl$EN = 1'd1 ;

  // register m_spec_bits_2_rl
  assign m_spec_bits_2_rl$D_IN =
	     EN_specUpdate_correctSpeculation ?
	       upd__h8083 :
	       IF_m_spec_bits_2_lat_0_whas__5_THEN_m_spec_bit_ETC___d48 ;
  assign m_spec_bits_2_rl$EN = 1'd1 ;

  // register m_spec_bits_3_rl
  assign m_spec_bits_3_rl$D_IN =
	     EN_specUpdate_correctSpeculation ?
	       upd__h9012 :
	       IF_m_spec_bits_3_lat_0_whas__2_THEN_m_spec_bit_ETC___d55 ;
  assign m_spec_bits_3_rl$EN = 1'd1 ;

  // register m_spec_tag_0
  assign m_spec_tag_0$D_IN = enq_x[6:4] ;
  assign m_spec_tag_0$EN = m_valid_0_lat_1$whas ;

  // register m_spec_tag_1
  assign m_spec_tag_1$D_IN = enq_x[6:4] ;
  assign m_spec_tag_1$EN = m_valid_1_lat_1$whas ;

  // register m_spec_tag_2
  assign m_spec_tag_2$D_IN = enq_x[6:4] ;
  assign m_spec_tag_2$EN = m_valid_2_lat_1$whas ;

  // register m_spec_tag_3
  assign m_spec_tag_3$D_IN = enq_x[6:4] ;
  assign m_spec_tag_3$EN = m_valid_3_lat_1$whas ;

  // register m_tag_0
  assign m_tag_0$D_IN = enq_x[20:11] ;
  assign m_tag_0$EN = m_valid_0_lat_1$whas ;

  // register m_tag_1
  assign m_tag_1$D_IN = enq_x[20:11] ;
  assign m_tag_1$EN = m_valid_1_lat_1$whas ;

  // register m_tag_2
  assign m_tag_2$D_IN = enq_x[20:11] ;
  assign m_tag_2$EN = m_valid_2_lat_1$whas ;

  // register m_tag_3
  assign m_tag_3$D_IN = enq_x[20:11] ;
  assign m_tag_3$EN = m_valid_3_lat_1$whas ;

  // register m_validEntryCount
  assign m_validEntryCount$D_IN = 3'h0 ;
  assign m_validEntryCount$EN = 1'b0 ;

  // register m_valid_0_rl
  assign m_valid_0_rl$D_IN =
	     m_valid_0_lat_1$whas ||
	     (m_valid_0_lat_0$whas ? 1'd0 : m_valid_0_rl) ;
  assign m_valid_0_rl$EN = 1'd1 ;

  // register m_valid_1_rl
  assign m_valid_1_rl$D_IN =
	     m_valid_1_lat_1$whas ||
	     (m_valid_1_lat_0$whas ? 1'd0 : m_valid_1_rl) ;
  assign m_valid_1_rl$EN = 1'd1 ;

  // register m_valid_2_rl
  assign m_valid_2_rl$D_IN =
	     m_valid_2_lat_1$whas ||
	     (m_valid_2_lat_0$whas ? 1'd0 : m_valid_2_rl) ;
  assign m_valid_2_rl$EN = 1'd1 ;

  // register m_valid_3_rl
  assign m_valid_3_rl$D_IN =
	     m_valid_3_lat_1$whas ||
	     (m_valid_3_dummy_1_0$wget ? 1'd0 : m_valid_3_rl) ;
  assign m_valid_3_rl$EN = 1'd1 ;

  // submodule m_regs_ready_0_dummy2_0
  assign m_regs_ready_0_dummy2_0$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_0$EN = EN_setRegReady_0_put ;

  // submodule m_regs_ready_0_dummy2_1
  assign m_regs_ready_0_dummy2_1$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_1$EN = EN_setRegReady_1_put ;

  // submodule m_regs_ready_0_dummy2_2
  assign m_regs_ready_0_dummy2_2$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_2$EN = EN_setRegReady_2_put ;

  // submodule m_regs_ready_0_dummy2_3
  assign m_regs_ready_0_dummy2_3$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_3$EN = EN_setRegReady_3_put ;

  // submodule m_regs_ready_0_dummy2_4
  assign m_regs_ready_0_dummy2_4$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_4$EN = EN_setRegReady_4_put ;

  // submodule m_regs_ready_0_dummy2_5
  assign m_regs_ready_0_dummy2_5$D_IN = 1'd1 ;
  assign m_regs_ready_0_dummy2_5$EN = m_valid_0_lat_1$whas ;

  // submodule m_regs_ready_1_dummy2_0
  assign m_regs_ready_1_dummy2_0$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_0$EN = EN_setRegReady_0_put ;

  // submodule m_regs_ready_1_dummy2_1
  assign m_regs_ready_1_dummy2_1$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_1$EN = EN_setRegReady_1_put ;

  // submodule m_regs_ready_1_dummy2_2
  assign m_regs_ready_1_dummy2_2$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_2$EN = EN_setRegReady_2_put ;

  // submodule m_regs_ready_1_dummy2_3
  assign m_regs_ready_1_dummy2_3$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_3$EN = EN_setRegReady_3_put ;

  // submodule m_regs_ready_1_dummy2_4
  assign m_regs_ready_1_dummy2_4$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_4$EN = EN_setRegReady_4_put ;

  // submodule m_regs_ready_1_dummy2_5
  assign m_regs_ready_1_dummy2_5$D_IN = 1'd1 ;
  assign m_regs_ready_1_dummy2_5$EN = m_valid_1_lat_1$whas ;

  // submodule m_regs_ready_2_dummy2_0
  assign m_regs_ready_2_dummy2_0$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_0$EN = EN_setRegReady_0_put ;

  // submodule m_regs_ready_2_dummy2_1
  assign m_regs_ready_2_dummy2_1$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_1$EN = EN_setRegReady_1_put ;

  // submodule m_regs_ready_2_dummy2_2
  assign m_regs_ready_2_dummy2_2$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_2$EN = EN_setRegReady_2_put ;

  // submodule m_regs_ready_2_dummy2_3
  assign m_regs_ready_2_dummy2_3$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_3$EN = EN_setRegReady_3_put ;

  // submodule m_regs_ready_2_dummy2_4
  assign m_regs_ready_2_dummy2_4$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_4$EN = EN_setRegReady_4_put ;

  // submodule m_regs_ready_2_dummy2_5
  assign m_regs_ready_2_dummy2_5$D_IN = 1'd1 ;
  assign m_regs_ready_2_dummy2_5$EN = m_valid_2_lat_1$whas ;

  // submodule m_regs_ready_3_dummy2_0
  assign m_regs_ready_3_dummy2_0$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_0$EN = EN_setRegReady_0_put ;

  // submodule m_regs_ready_3_dummy2_1
  assign m_regs_ready_3_dummy2_1$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_1$EN = EN_setRegReady_1_put ;

  // submodule m_regs_ready_3_dummy2_2
  assign m_regs_ready_3_dummy2_2$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_2$EN = EN_setRegReady_2_put ;

  // submodule m_regs_ready_3_dummy2_3
  assign m_regs_ready_3_dummy2_3$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_3$EN = EN_setRegReady_3_put ;

  // submodule m_regs_ready_3_dummy2_4
  assign m_regs_ready_3_dummy2_4$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_4$EN = EN_setRegReady_4_put ;

  // submodule m_regs_ready_3_dummy2_5
  assign m_regs_ready_3_dummy2_5$D_IN = 1'd1 ;
  assign m_regs_ready_3_dummy2_5$EN = m_valid_3_lat_1$whas ;

  // submodule m_spec_bits_0_dummy2_0
  assign m_spec_bits_0_dummy2_0$D_IN = 1'd1 ;
  assign m_spec_bits_0_dummy2_0$EN = m_valid_0_lat_1$whas ;

  // submodule m_spec_bits_0_dummy2_1
  assign m_spec_bits_0_dummy2_1$D_IN = 1'd1 ;
  assign m_spec_bits_0_dummy2_1$EN = EN_specUpdate_correctSpeculation ;

  // submodule m_spec_bits_1_dummy2_0
  assign m_spec_bits_1_dummy2_0$D_IN = 1'd1 ;
  assign m_spec_bits_1_dummy2_0$EN = m_valid_1_lat_1$whas ;

  // submodule m_spec_bits_1_dummy2_1
  assign m_spec_bits_1_dummy2_1$D_IN = 1'd1 ;
  assign m_spec_bits_1_dummy2_1$EN = EN_specUpdate_correctSpeculation ;

  // submodule m_spec_bits_2_dummy2_0
  assign m_spec_bits_2_dummy2_0$D_IN = 1'd1 ;
  assign m_spec_bits_2_dummy2_0$EN = m_valid_2_lat_1$whas ;

  // submodule m_spec_bits_2_dummy2_1
  assign m_spec_bits_2_dummy2_1$D_IN = 1'd1 ;
  assign m_spec_bits_2_dummy2_1$EN = EN_specUpdate_correctSpeculation ;

  // submodule m_spec_bits_3_dummy2_0
  assign m_spec_bits_3_dummy2_0$D_IN = 1'd1 ;
  assign m_spec_bits_3_dummy2_0$EN = m_valid_3_lat_1$whas ;

  // submodule m_spec_bits_3_dummy2_1
  assign m_spec_bits_3_dummy2_1$D_IN = 1'd1 ;
  assign m_spec_bits_3_dummy2_1$EN = EN_specUpdate_correctSpeculation ;

  // submodule m_valid_0_dummy2_0
  assign m_valid_0_dummy2_0$D_IN = 1'd1 ;
  assign m_valid_0_dummy2_0$EN =
	     EN_doDispatch && idx__h41421 == 2'd0 ||
	     MUX_m_valid_0_dummy2_0$write_1__SEL_2 ;

  // submodule m_valid_0_dummy2_1
  assign m_valid_0_dummy2_1$D_IN = 1'd1 ;
  assign m_valid_0_dummy2_1$EN = m_valid_0_lat_1$whas ;

  // submodule m_valid_1_dummy2_0
  assign m_valid_1_dummy2_0$D_IN = 1'd1 ;
  assign m_valid_1_dummy2_0$EN =
	     EN_doDispatch && idx__h41421 == 2'd1 ||
	     MUX_m_valid_1_dummy2_0$write_1__SEL_2 ;

  // submodule m_valid_1_dummy2_1
  assign m_valid_1_dummy2_1$D_IN = 1'd1 ;
  assign m_valid_1_dummy2_1$EN = m_valid_1_lat_1$whas ;

  // submodule m_valid_2_dummy2_0
  assign m_valid_2_dummy2_0$D_IN = 1'd1 ;
  assign m_valid_2_dummy2_0$EN =
	     EN_doDispatch && idx__h41421 == 2'd2 ||
	     MUX_m_valid_2_dummy2_0$write_1__SEL_2 ;

  // submodule m_valid_2_dummy2_1
  assign m_valid_2_dummy2_1$D_IN = 1'd1 ;
  assign m_valid_2_dummy2_1$EN = m_valid_2_lat_1$whas ;

  // submodule m_valid_3_dummy2_0
  assign m_valid_3_dummy2_0$D_IN = 1'd1 ;
  assign m_valid_3_dummy2_0$EN =
	     EN_doDispatch && idx__h41421 == 2'd3 ||
	     MUX_m_valid_3_dummy2_0$write_1__SEL_2 ;

  // submodule m_valid_3_dummy2_1
  assign m_valid_3_dummy2_1$D_IN = 1'd1 ;
  assign m_valid_3_dummy2_1$EN = m_valid_3_lat_1$whas ;

  // remaining internal signals
  assign IF_NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_ETC___d356 =
	     (NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d331 ||
	      IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m_robEnqTi_ETC___d347 <
	      IF_m_tag_1_48_BITS_4_TO_0_49_ULT_IF_m_robEnqTi_ETC___d353) ?
	       2'd0 :
	       2'd1 ;
  assign IF_NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_ETC___d373 =
	     (NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d337 ||
	      IF_m_tag_2_59_BITS_4_TO_0_60_ULT_IF_m_robEnqTi_ETC___d364 <
	      IF_m_tag_3_65_BITS_4_TO_0_66_ULT_IF_m_robEnqTi_ETC___d370) ?
	       2'd2 :
	       2'd3 ;
  assign IF_SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0__ETC___d602 =
	     SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d587 ?
	       3'd2 :
	       (SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d593 ?
		  3'd3 :
		  (SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d599 ?
		     3'd4 :
		     3'd7)) ;
  assign IF_SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0__ETC___d604 =
	     SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d575 ?
	       3'd0 :
	       (SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d581 ?
		  3'd1 :
		  IF_SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0__ETC___d602) ;
  assign IF_SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10__ETC___d381 =
	     (SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d375 ||
	      SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d377 <
	      SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d378) ?
	       a__h41635 :
	       b__h41636 ;
  assign IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_0_1_ETC___d611 =
	     SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_0_15_m_ETC___d383 ?
	       { 16'd2730,
		 SEL_ARR_m_data_0_13_BITS_4_TO_0_84_m_data_1_16_ETC___d389 } :
	       (SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_1_91_m_ETC___d396 ?
		  { 18'd43690,
		    SEL_ARR_m_data_0_13_BITS_2_TO_0_97_m_data_1_16_ETC___d402 } :
		  IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_2_0_ETC___d609) ;
  assign IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_2_0_ETC___d609 =
	     SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_2_04_m_ETC___d409 ?
	       { 3'd2,
		 SEL_ARR_m_data_0_13_BITS_17_TO_15_10_m_data_1__ETC___d415,
		 SEL_ARR_m_data_0_13_BITS_14_TO_11_16_m_data_1__ETC___d421,
		 SEL_ARR_m_data_0_13_BIT_10_22_m_data_1_16_BIT__ETC___d427,
		 SEL_ARR_m_data_0_13_BIT_9_28_m_data_1_16_BIT_9_ETC___d433,
		 SEL_ARR_m_data_0_13_BIT_8_34_m_data_1_16_BIT_8_ETC___d439,
		 SEL_ARR_m_data_0_13_BIT_7_40_m_data_1_16_BIT_7_ETC___d445,
		 SEL_ARR_m_data_0_13_BIT_6_47_m_data_1_16_BIT_6_ETC___d452,
		 SEL_ARR_m_data_0_13_BIT_5_53_m_data_1_16_BIT_5_ETC___d458,
		 SEL_ARR_m_data_0_13_BIT_4_60_m_data_1_16_BIT_4_ETC___d465,
		 SEL_ARR_m_data_0_13_BIT_3_66_m_data_1_16_BIT_3_ETC___d471,
		 SEL_ARR_m_data_0_13_BIT_2_73_m_data_1_16_BIT_2_ETC___d478,
		 SEL_ARR_m_data_0_13_BIT_1_79_m_data_1_16_BIT_1_ETC___d484,
		 SEL_ARR_m_data_0_13_BIT_0_85_m_data_1_16_BIT_0_ETC___d490 } :
	       IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_3_9_ETC___d608 ;
  assign IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_3_9_ETC___d608 =
	     SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_3_94_m_ETC___d499 ?
	       { 16'd27306,
		 SEL_ARR_m_data_0_13_BITS_4_TO_3_00_m_data_1_16_ETC___d505,
		 SEL_ARR_m_data_0_13_BIT_2_73_m_data_1_16_BIT_2_ETC___d478,
		 SEL_ARR_m_data_0_13_BITS_1_TO_0_06_m_data_1_16_ETC___d511 } :
	       IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_4_1_ETC___d607 ;
  assign IF_SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_4_1_ETC___d607 =
	     SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_4_14_m_ETC___d519 ?
	       { 12'd2218,
		 SEL_ARR_m_data_0_13_BITS_8_TO_4_20_m_data_1_16_ETC___d525,
		 IF_SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0__ETC___d604,
		 SEL_ARR_m_data_0_13_BIT_0_85_m_data_1_16_BIT_0_ETC___d490 } :
	       21'd1485482 ;
  assign IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d873 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_0_lat_0$wget[3] :
	       m_regs_ready_0_rl[3] ;
  assign IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d882 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_0_lat_0$wget[2] :
	       m_regs_ready_0_rl[2] ;
  assign IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d891 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_0_lat_0$wget[1] :
	       m_regs_ready_0_rl[1] ;
  assign IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d895 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_0_lat_0$wget[0] :
	       m_regs_ready_0_rl[0] ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1019 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget[3] :
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d873 ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1028 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget[2] :
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d882 ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1037 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget[1] :
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d891 ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1041 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget[0] :
	       IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d895 ;
  assign IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d71 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_0_lat_1$wget :
	       (EN_setRegReady_0_put ?
		  m_regs_ready_0_lat_0$wget :
		  m_regs_ready_0_rl) ;
  assign IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1161 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_0_lat_2$wget[3] :
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1019 ;
  assign IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1170 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_0_lat_2$wget[2] :
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1028 ;
  assign IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1179 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_0_lat_2$wget[1] :
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1037 ;
  assign IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1183 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_0_lat_2$wget[0] :
	       IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d1041 ;
  assign IF_m_regs_ready_0_lat_3_whas__1_THEN_m_regs_re_ETC___d73 =
	     EN_setRegReady_3_put ?
	       m_regs_ready_0_lat_3$wget :
	       (EN_setRegReady_2_put ?
		  m_regs_ready_0_lat_2$wget :
		  IF_m_regs_ready_0_lat_1_whas__5_THEN_m_regs_re_ETC___d71) ;
  assign IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d909 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_1_lat_0$wget[3] :
	       m_regs_ready_1_rl[3] ;
  assign IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d918 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_1_lat_0$wget[2] :
	       m_regs_ready_1_rl[2] ;
  assign IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d927 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_1_lat_0$wget[1] :
	       m_regs_ready_1_rl[1] ;
  assign IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d931 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_1_lat_0$wget[0] :
	       m_regs_ready_1_rl[0] ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1054 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget[3] :
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d909 ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1063 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget[2] :
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d918 ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1072 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget[1] :
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d927 ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1076 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget[0] :
	       IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d931 ;
  assign IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d90 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_1_lat_1$wget :
	       (EN_setRegReady_0_put ?
		  m_regs_ready_1_lat_0$wget :
		  m_regs_ready_1_rl) ;
  assign IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1195 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_1_lat_2$wget[3] :
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1054 ;
  assign IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1204 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_1_lat_2$wget[2] :
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1063 ;
  assign IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1213 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_1_lat_2$wget[1] :
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1072 ;
  assign IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1217 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_1_lat_2$wget[0] :
	       IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d1076 ;
  assign IF_m_regs_ready_1_lat_3_whas__0_THEN_m_regs_re_ETC___d92 =
	     EN_setRegReady_3_put ?
	       m_regs_ready_1_lat_3$wget :
	       (EN_setRegReady_2_put ?
		  m_regs_ready_1_lat_2$wget :
		  IF_m_regs_ready_1_lat_1_whas__4_THEN_m_regs_re_ETC___d90) ;
  assign IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d945 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_2_lat_0$wget[3] :
	       m_regs_ready_2_rl[3] ;
  assign IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d954 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_2_lat_0$wget[2] :
	       m_regs_ready_2_rl[2] ;
  assign IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d963 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_2_lat_0$wget[1] :
	       m_regs_ready_2_rl[1] ;
  assign IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d967 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_2_lat_0$wget[0] :
	       m_regs_ready_2_rl[0] ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1089 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget[3] :
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d945 ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d109 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget :
	       (EN_setRegReady_0_put ?
		  m_regs_ready_2_lat_0$wget :
		  m_regs_ready_2_rl) ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1098 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget[2] :
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d954 ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1107 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget[1] :
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d963 ;
  assign IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1111 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_2_lat_1$wget[0] :
	       IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d967 ;
  assign IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1229 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_2_lat_2$wget[3] :
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1089 ;
  assign IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1238 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_2_lat_2$wget[2] :
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1098 ;
  assign IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1247 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_2_lat_2$wget[1] :
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1107 ;
  assign IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1251 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_2_lat_2$wget[0] :
	       IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d1111 ;
  assign IF_m_regs_ready_2_lat_3_whas__9_THEN_m_regs_re_ETC___d111 =
	     EN_setRegReady_3_put ?
	       m_regs_ready_2_lat_3$wget :
	       (EN_setRegReady_2_put ?
		  m_regs_ready_2_lat_2$wget :
		  IF_m_regs_ready_2_lat_1_whas__03_THEN_m_regs_r_ETC___d109) ;
  assign IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d1003 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_3_lat_0$wget[0] :
	       m_regs_ready_3_rl[0] ;
  assign IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d981 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_3_lat_0$wget[3] :
	       m_regs_ready_3_rl[3] ;
  assign IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d990 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_3_lat_0$wget[2] :
	       m_regs_ready_3_rl[2] ;
  assign IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d999 =
	     EN_setRegReady_0_put ?
	       m_regs_ready_3_lat_0$wget[1] :
	       m_regs_ready_3_rl[1] ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1124 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget[3] :
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d981 ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1133 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget[2] :
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d990 ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1142 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget[1] :
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d999 ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1146 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget[0] :
	       IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d1003 ;
  assign IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d128 =
	     EN_setRegReady_1_put ?
	       m_regs_ready_3_lat_1$wget :
	       (EN_setRegReady_0_put ?
		  m_regs_ready_3_lat_0$wget :
		  m_regs_ready_3_rl) ;
  assign IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1263 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_3_lat_2$wget[3] :
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1124 ;
  assign IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1272 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_3_lat_2$wget[2] :
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1133 ;
  assign IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1281 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_3_lat_2$wget[1] :
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1142 ;
  assign IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1285 =
	     EN_setRegReady_2_put ?
	       m_regs_ready_3_lat_2$wget[0] :
	       IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d1146 ;
  assign IF_m_regs_ready_3_lat_3_whas__18_THEN_m_regs_r_ETC___d130 =
	     EN_setRegReady_3_put ?
	       m_regs_ready_3_lat_3$wget :
	       (EN_setRegReady_2_put ?
		  m_regs_ready_3_lat_2$wget :
		  IF_m_regs_ready_3_lat_1_whas__22_THEN_m_regs_r_ETC___d128) ;
  assign IF_m_spec_bits_0_lat_0_whas__1_THEN_m_spec_bit_ETC___d34 =
	     m_valid_0_lat_1$whas ? enq_x[10:7] : m_spec_bits_0_rl ;
  assign IF_m_spec_bits_1_lat_0_whas__8_THEN_m_spec_bit_ETC___d41 =
	     m_valid_1_lat_1$whas ? enq_x[10:7] : m_spec_bits_1_rl ;
  assign IF_m_spec_bits_2_lat_0_whas__5_THEN_m_spec_bit_ETC___d48 =
	     m_valid_2_lat_1$whas ? enq_x[10:7] : m_spec_bits_2_rl ;
  assign IF_m_spec_bits_3_lat_0_whas__2_THEN_m_spec_bit_ETC___d55 =
	     m_valid_3_lat_1$whas ? enq_x[10:7] : m_spec_bits_3_rl ;
  assign IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m_robEnqTi_ETC___d347 =
	     (m_tag_0[4:0] < x__read__h24363) ?
	       { 1'd0, m_tag_0[4:0] } + 6'd32 :
	       { 1'd0, m_tag_0[4:0] } ;
  assign IF_m_tag_1_48_BITS_4_TO_0_49_ULT_IF_m_robEnqTi_ETC___d353 =
	     (m_tag_1[4:0] < x__read__h24363) ?
	       { 1'd0, m_tag_1[4:0] } + 6'd32 :
	       { 1'd0, m_tag_1[4:0] } ;
  assign IF_m_tag_2_59_BITS_4_TO_0_60_ULT_IF_m_robEnqTi_ETC___d364 =
	     (m_tag_2[4:0] < x__read__h24363) ?
	       { 1'd0, m_tag_2[4:0] } + 6'd32 :
	       { 1'd0, m_tag_2[4:0] } ;
  assign IF_m_tag_3_65_BITS_4_TO_0_66_ULT_IF_m_robEnqTi_ETC___d370 =
	     (m_tag_3[4:0] < x__read__h24363) ?
	       { 1'd0, m_tag_3[4:0] } + 6'd32 :
	       { 1'd0, m_tag_3[4:0] } ;
  assign NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d223 =
	     !m_valid_0_dummy2_0$Q_OUT || !m_valid_0_dummy2_1$Q_OUT ||
	     !m_valid_0_rl ||
	     !m_valid_1_dummy2_0$Q_OUT ||
	     !m_valid_1_dummy2_1$Q_OUT ||
	     !m_valid_1_rl ;
  assign NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d328 =
	     !m_valid_0_dummy2_0$Q_OUT || !m_valid_0_dummy2_1$Q_OUT ||
	     !m_valid_0_rl ||
	     !m_ready_wire_0$wget ;
  assign NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d331 =
	     !m_valid_1_dummy2_0$Q_OUT || !m_valid_1_dummy2_1$Q_OUT ||
	     !m_valid_1_rl ||
	     !m_ready_wire_1$wget ;
  assign NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d238 =
	     !m_valid_2_dummy2_0$Q_OUT || !m_valid_2_dummy2_1$Q_OUT ||
	     !m_valid_2_rl ||
	     !m_valid_3_dummy2_0$Q_OUT ||
	     !m_valid_3_dummy2_1$Q_OUT ||
	     !m_valid_3_rl ;
  assign NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d334 =
	     !m_valid_2_dummy2_0$Q_OUT || !m_valid_2_dummy2_1$Q_OUT ||
	     !m_valid_2_rl ||
	     !m_ready_wire_2$wget ;
  assign NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d337 =
	     !m_valid_3_dummy2_0$Q_OUT || !m_valid_3_dummy2_1$Q_OUT ||
	     !m_valid_3_rl ||
	     !m_ready_wire_3$wget ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d1001 =
	     !setRegReady_1_put[7] && !m_regs_3[16] ||
	     setRegReady_1_put[7] && m_regs_3[16] &&
	     setRegReady_1_put[6:0] == m_regs_3[15:9] ||
	     m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d978 &&
	     m_regs_ready_3_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d999 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d875 =
	     !setRegReady_1_put[7] && !m_regs_0[32] ||
	     setRegReady_1_put[7] && m_regs_0[32] &&
	     setRegReady_1_put[6:0] == m_regs_0[31:25] ||
	     m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d870 &&
	     m_regs_ready_0_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d873 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d884 =
	     !setRegReady_1_put[7] && !m_regs_0[24] ||
	     setRegReady_1_put[7] && m_regs_0[24] &&
	     setRegReady_1_put[6:0] == m_regs_0[23:17] ||
	     m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d870 &&
	     m_regs_ready_0_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d882 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d893 =
	     !setRegReady_1_put[7] && !m_regs_0[16] ||
	     setRegReady_1_put[7] && m_regs_0[16] &&
	     setRegReady_1_put[6:0] == m_regs_0[15:9] ||
	     m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d870 &&
	     m_regs_ready_0_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_0_lat_0_whas__7_THEN_m_regs_re_ETC___d891 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d911 =
	     !setRegReady_1_put[7] && !m_regs_1[32] ||
	     setRegReady_1_put[7] && m_regs_1[32] &&
	     setRegReady_1_put[6:0] == m_regs_1[31:25] ||
	     m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d906 &&
	     m_regs_ready_1_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d909 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d920 =
	     !setRegReady_1_put[7] && !m_regs_1[24] ||
	     setRegReady_1_put[7] && m_regs_1[24] &&
	     setRegReady_1_put[6:0] == m_regs_1[23:17] ||
	     m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d906 &&
	     m_regs_ready_1_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d918 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d929 =
	     !setRegReady_1_put[7] && !m_regs_1[16] ||
	     setRegReady_1_put[7] && m_regs_1[16] &&
	     setRegReady_1_put[6:0] == m_regs_1[15:9] ||
	     m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d906 &&
	     m_regs_ready_1_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_1_lat_0_whas__6_THEN_m_regs_re_ETC___d927 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d947 =
	     !setRegReady_1_put[7] && !m_regs_2[32] ||
	     setRegReady_1_put[7] && m_regs_2[32] &&
	     setRegReady_1_put[6:0] == m_regs_2[31:25] ||
	     m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d942 &&
	     m_regs_ready_2_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d945 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d956 =
	     !setRegReady_1_put[7] && !m_regs_2[24] ||
	     setRegReady_1_put[7] && m_regs_2[24] &&
	     setRegReady_1_put[6:0] == m_regs_2[23:17] ||
	     m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d942 &&
	     m_regs_ready_2_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d954 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d965 =
	     !setRegReady_1_put[7] && !m_regs_2[16] ||
	     setRegReady_1_put[7] && m_regs_2[16] &&
	     setRegReady_1_put[6:0] == m_regs_2[15:9] ||
	     m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d942 &&
	     m_regs_ready_2_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_2_lat_0_whas__05_THEN_m_regs_r_ETC___d963 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d983 =
	     !setRegReady_1_put[7] && !m_regs_3[32] ||
	     setRegReady_1_put[7] && m_regs_3[32] &&
	     setRegReady_1_put[6:0] == m_regs_3[31:25] ||
	     m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d978 &&
	     m_regs_ready_3_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d981 ;
  assign NOT_setRegReady_1_put_BIT_7_60_61_AND_NOT_m_re_ETC___d992 =
	     !setRegReady_1_put[7] && !m_regs_3[24] ||
	     setRegReady_1_put[7] && m_regs_3[24] &&
	     setRegReady_1_put[6:0] == m_regs_3[23:17] ||
	     m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d978 &&
	     m_regs_ready_3_dummy2_5$Q_OUT &&
	     IF_m_regs_ready_3_lat_0_whas__24_THEN_m_regs_r_ETC___d990 ;
  assign a__h41635 =
	     NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d328 ?
	       2'd1 :
	       IF_NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_ETC___d356 ;
  assign b__h41636 =
	     NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d334 ?
	       2'd3 :
	       IF_NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_ETC___d373 ;
  assign bs__h64251 =
	     (m_spec_bits_0_dummy2_0$Q_OUT && m_spec_bits_0_dummy2_1$Q_OUT) ?
	       m_spec_bits_0_rl :
	       4'd0 ;
  assign bs__h64439 =
	     (m_spec_bits_1_dummy2_0$Q_OUT && m_spec_bits_1_dummy2_1$Q_OUT) ?
	       m_spec_bits_1_rl :
	       4'd0 ;
  assign bs__h64627 =
	     (m_spec_bits_2_dummy2_0$Q_OUT && m_spec_bits_2_dummy2_1$Q_OUT) ?
	       m_spec_bits_2_rl :
	       4'd0 ;
  assign bs__h64803 =
	     (m_spec_bits_3_dummy2_0$Q_OUT && m_spec_bits_3_dummy2_1$Q_OUT) ?
	       m_spec_bits_3_rl :
	       4'd0 ;
  assign idx__h41421 =
	     SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d358 ?
	       b__h41636 :
	       IF_SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10__ETC___d381 ;
  assign m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 =
	     m_regs_ready_0_dummy2_0$Q_OUT && m_regs_ready_0_dummy2_1$Q_OUT &&
	     m_regs_ready_0_dummy2_2$Q_OUT &&
	     m_regs_ready_0_dummy2_3$Q_OUT ;
  assign m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d145 =
	     m_regs_ready_0_dummy2_0_read__33_AND_m_regs_re_ETC___d139 &&
	     m_regs_ready_0_dummy2_4$Q_OUT &&
	     m_regs_ready_0_dummy2_5$Q_OUT &&
	     m_regs_ready_0_rl[3] ;
  assign m_regs_ready_0_dummy2_1_read__34_AND_m_regs_re_ETC___d870 =
	     m_regs_ready_0_dummy2_1$Q_OUT && m_regs_ready_0_dummy2_2$Q_OUT &&
	     m_regs_ready_0_dummy2_3$Q_OUT &&
	     m_regs_ready_0_dummy2_4$Q_OUT ;
  assign m_regs_ready_0_dummy2_2_read__36_AND_m_regs_re_ETC___d1017 =
	     m_regs_ready_0_dummy2_2$Q_OUT && m_regs_ready_0_dummy2_3$Q_OUT &&
	     m_regs_ready_0_dummy2_4$Q_OUT &&
	     m_regs_ready_0_dummy2_5$Q_OUT ;
  assign m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1300 =
	     m_regs_ready_0_dummy2_4$Q_OUT && m_regs_ready_0_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_0_lat_3$wget[3] :
		IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1161) ;
  assign m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1309 =
	     m_regs_ready_0_dummy2_4$Q_OUT && m_regs_ready_0_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_0_lat_3$wget[2] :
		IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1170) ;
  assign m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1318 =
	     m_regs_ready_0_dummy2_4$Q_OUT && m_regs_ready_0_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_0_lat_3$wget[1] :
		IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1179) ;
  assign m_regs_ready_0_dummy2_4_read__40_AND_m_regs_re_ETC___d1322 =
	     m_regs_ready_0_dummy2_4$Q_OUT && m_regs_ready_0_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_0_lat_3$wget[0] :
		IF_m_regs_ready_0_lat_2_whas__3_THEN_m_regs_re_ETC___d1183) ;
  assign m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 =
	     m_regs_ready_1_dummy2_0$Q_OUT && m_regs_ready_1_dummy2_1$Q_OUT &&
	     m_regs_ready_1_dummy2_2$Q_OUT &&
	     m_regs_ready_1_dummy2_3$Q_OUT ;
  assign m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d164 =
	     m_regs_ready_1_dummy2_0_read__52_AND_m_regs_re_ETC___d158 &&
	     m_regs_ready_1_dummy2_4$Q_OUT &&
	     m_regs_ready_1_dummy2_5$Q_OUT &&
	     m_regs_ready_1_rl[3] ;
  assign m_regs_ready_1_dummy2_1_read__53_AND_m_regs_re_ETC___d906 =
	     m_regs_ready_1_dummy2_1$Q_OUT && m_regs_ready_1_dummy2_2$Q_OUT &&
	     m_regs_ready_1_dummy2_3$Q_OUT &&
	     m_regs_ready_1_dummy2_4$Q_OUT ;
  assign m_regs_ready_1_dummy2_2_read__55_AND_m_regs_re_ETC___d1052 =
	     m_regs_ready_1_dummy2_2$Q_OUT && m_regs_ready_1_dummy2_3$Q_OUT &&
	     m_regs_ready_1_dummy2_4$Q_OUT &&
	     m_regs_ready_1_dummy2_5$Q_OUT ;
  assign m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1333 =
	     m_regs_ready_1_dummy2_4$Q_OUT && m_regs_ready_1_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_1_lat_3$wget[3] :
		IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1195) ;
  assign m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1342 =
	     m_regs_ready_1_dummy2_4$Q_OUT && m_regs_ready_1_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_1_lat_3$wget[2] :
		IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1204) ;
  assign m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1351 =
	     m_regs_ready_1_dummy2_4$Q_OUT && m_regs_ready_1_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_1_lat_3$wget[1] :
		IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1213) ;
  assign m_regs_ready_1_dummy2_4_read__59_AND_m_regs_re_ETC___d1355 =
	     m_regs_ready_1_dummy2_4$Q_OUT && m_regs_ready_1_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_1_lat_3$wget[0] :
		IF_m_regs_ready_1_lat_2_whas__2_THEN_m_regs_re_ETC___d1217) ;
  assign m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 =
	     m_regs_ready_2_dummy2_0$Q_OUT && m_regs_ready_2_dummy2_1$Q_OUT &&
	     m_regs_ready_2_dummy2_2$Q_OUT &&
	     m_regs_ready_2_dummy2_3$Q_OUT ;
  assign m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d183 =
	     m_regs_ready_2_dummy2_0_read__71_AND_m_regs_re_ETC___d177 &&
	     m_regs_ready_2_dummy2_4$Q_OUT &&
	     m_regs_ready_2_dummy2_5$Q_OUT &&
	     m_regs_ready_2_rl[3] ;
  assign m_regs_ready_2_dummy2_1_read__72_AND_m_regs_re_ETC___d942 =
	     m_regs_ready_2_dummy2_1$Q_OUT && m_regs_ready_2_dummy2_2$Q_OUT &&
	     m_regs_ready_2_dummy2_3$Q_OUT &&
	     m_regs_ready_2_dummy2_4$Q_OUT ;
  assign m_regs_ready_2_dummy2_2_read__74_AND_m_regs_re_ETC___d1087 =
	     m_regs_ready_2_dummy2_2$Q_OUT && m_regs_ready_2_dummy2_3$Q_OUT &&
	     m_regs_ready_2_dummy2_4$Q_OUT &&
	     m_regs_ready_2_dummy2_5$Q_OUT ;
  assign m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1366 =
	     m_regs_ready_2_dummy2_4$Q_OUT && m_regs_ready_2_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_2_lat_3$wget[3] :
		IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1229) ;
  assign m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1375 =
	     m_regs_ready_2_dummy2_4$Q_OUT && m_regs_ready_2_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_2_lat_3$wget[2] :
		IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1238) ;
  assign m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1384 =
	     m_regs_ready_2_dummy2_4$Q_OUT && m_regs_ready_2_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_2_lat_3$wget[1] :
		IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1247) ;
  assign m_regs_ready_2_dummy2_4_read__78_AND_m_regs_re_ETC___d1388 =
	     m_regs_ready_2_dummy2_4$Q_OUT && m_regs_ready_2_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_2_lat_3$wget[0] :
		IF_m_regs_ready_2_lat_2_whas__01_THEN_m_regs_r_ETC___d1251) ;
  assign m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 =
	     m_regs_ready_3_dummy2_0$Q_OUT && m_regs_ready_3_dummy2_1$Q_OUT &&
	     m_regs_ready_3_dummy2_2$Q_OUT &&
	     m_regs_ready_3_dummy2_3$Q_OUT ;
  assign m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d202 =
	     m_regs_ready_3_dummy2_0_read__90_AND_m_regs_re_ETC___d196 &&
	     m_regs_ready_3_dummy2_4$Q_OUT &&
	     m_regs_ready_3_dummy2_5$Q_OUT &&
	     m_regs_ready_3_rl[3] ;
  assign m_regs_ready_3_dummy2_1_read__91_AND_m_regs_re_ETC___d978 =
	     m_regs_ready_3_dummy2_1$Q_OUT && m_regs_ready_3_dummy2_2$Q_OUT &&
	     m_regs_ready_3_dummy2_3$Q_OUT &&
	     m_regs_ready_3_dummy2_4$Q_OUT ;
  assign m_regs_ready_3_dummy2_2_read__93_AND_m_regs_re_ETC___d1122 =
	     m_regs_ready_3_dummy2_2$Q_OUT && m_regs_ready_3_dummy2_3$Q_OUT &&
	     m_regs_ready_3_dummy2_4$Q_OUT &&
	     m_regs_ready_3_dummy2_5$Q_OUT ;
  assign m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1399 =
	     m_regs_ready_3_dummy2_4$Q_OUT && m_regs_ready_3_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_3_lat_3$wget[3] :
		IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1263) ;
  assign m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1408 =
	     m_regs_ready_3_dummy2_4$Q_OUT && m_regs_ready_3_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_3_lat_3$wget[2] :
		IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1272) ;
  assign m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1417 =
	     m_regs_ready_3_dummy2_4$Q_OUT && m_regs_ready_3_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_3_lat_3$wget[1] :
		IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1281) ;
  assign m_regs_ready_3_dummy2_4_read__97_AND_m_regs_re_ETC___d1421 =
	     m_regs_ready_3_dummy2_4$Q_OUT && m_regs_ready_3_dummy2_5$Q_OUT &&
	     (EN_setRegReady_3_put ?
		m_regs_ready_3_lat_3$wget[0] :
		IF_m_regs_ready_3_lat_2_whas__20_THEN_m_regs_r_ETC___d1285) ;
  assign m_valid_0_dummy2_0_read__09_AND_m_valid_0_dumm_ETC___d244 =
	     m_valid_0_dummy2_0$Q_OUT && m_valid_0_dummy2_1$Q_OUT &&
	     m_valid_0_rl &&
	     m_valid_1_dummy2_0$Q_OUT &&
	     m_valid_1_dummy2_1$Q_OUT &&
	     m_valid_1_rl ;
  assign m_valid_2_dummy2_0_read__24_AND_m_valid_2_dumm_ETC___d249 =
	     m_valid_2_dummy2_0$Q_OUT && m_valid_2_dummy2_1$Q_OUT &&
	     m_valid_2_rl &&
	     m_valid_3_dummy2_0$Q_OUT &&
	     m_valid_3_dummy2_1$Q_OUT &&
	     m_valid_3_rl ;
  assign n__read__h65289 =
	     m_spec_bits_0_dummy2_1$Q_OUT ?
	       IF_m_spec_bits_0_lat_0_whas__1_THEN_m_spec_bit_ETC___d34 :
	       4'd0 ;
  assign n__read__h65729 =
	     m_spec_bits_1_dummy2_1$Q_OUT ?
	       IF_m_spec_bits_1_lat_0_whas__8_THEN_m_spec_bit_ETC___d41 :
	       4'd0 ;
  assign n__read__h66169 =
	     m_spec_bits_2_dummy2_1$Q_OUT ?
	       IF_m_spec_bits_2_lat_0_whas__5_THEN_m_spec_bit_ETC___d48 :
	       4'd0 ;
  assign n__read__h66597 =
	     m_spec_bits_3_dummy2_1$Q_OUT ?
	       IF_m_spec_bits_3_lat_0_whas__2_THEN_m_spec_bit_ETC___d55 :
	       4'd0 ;
  assign upd__h6225 = n__read__h65289 & specUpdate_correctSpeculation_mask ;
  assign upd__h7154 = n__read__h65729 & specUpdate_correctSpeculation_mask ;
  assign upd__h8083 = n__read__h66169 & specUpdate_correctSpeculation_mask ;
  assign upd__h9012 = n__read__h66597 & specUpdate_correctSpeculation_mask ;
  assign x__read__h24363 = EN_setRobEnqTime ? setRobEnqTime_t : 5'd0 ;
  always@(enq_x)
  begin
    case (enq_x[57:55])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_enq_x_BITS_57_TO_55_0_enq_x_BITS_57_TO_55_ETC__q1 =
	      enq_x[57:55];
      default: CASE_enq_x_BITS_57_TO_55_0_enq_x_BITS_57_TO_55_ETC__q1 = 3'd7;
    endcase
  end
  always@(a__h41635 or
	  IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m_robEnqTi_ETC___d347 or
	  IF_m_tag_1_48_BITS_4_TO_0_49_ULT_IF_m_robEnqTi_ETC___d353 or
	  IF_m_tag_2_59_BITS_4_TO_0_60_ULT_IF_m_robEnqTi_ETC___d364 or
	  IF_m_tag_3_65_BITS_4_TO_0_66_ULT_IF_m_robEnqTi_ETC___d370)
  begin
    case (a__h41635)
      2'd0:
	  SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d377 =
	      IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m_robEnqTi_ETC___d347;
      2'd1:
	  SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d377 =
	      IF_m_tag_1_48_BITS_4_TO_0_49_ULT_IF_m_robEnqTi_ETC___d353;
      2'd2:
	  SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d377 =
	      IF_m_tag_2_59_BITS_4_TO_0_60_ULT_IF_m_robEnqTi_ETC___d364;
      2'd3:
	  SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d377 =
	      IF_m_tag_3_65_BITS_4_TO_0_66_ULT_IF_m_robEnqTi_ETC___d370;
    endcase
  end
  always@(b__h41636 or
	  NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d328 or
	  NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d331 or
	  NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d334 or
	  NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d337)
  begin
    case (b__h41636)
      2'd0:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d375 =
	      NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d328;
      2'd1:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d375 =
	      NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d331;
      2'd2:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d375 =
	      NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d334;
      2'd3:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d375 =
	      NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d337;
    endcase
  end
  always@(b__h41636 or
	  IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m_robEnqTi_ETC___d347 or
	  IF_m_tag_1_48_BITS_4_TO_0_49_ULT_IF_m_robEnqTi_ETC___d353 or
	  IF_m_tag_2_59_BITS_4_TO_0_60_ULT_IF_m_robEnqTi_ETC___d364 or
	  IF_m_tag_3_65_BITS_4_TO_0_66_ULT_IF_m_robEnqTi_ETC___d370)
  begin
    case (b__h41636)
      2'd0:
	  SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d378 =
	      IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m_robEnqTi_ETC___d347;
      2'd1:
	  SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d378 =
	      IF_m_tag_1_48_BITS_4_TO_0_49_ULT_IF_m_robEnqTi_ETC___d353;
      2'd2:
	  SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d378 =
	      IF_m_tag_2_59_BITS_4_TO_0_60_ULT_IF_m_robEnqTi_ETC___d364;
      2'd3:
	  SEL_ARR_IF_m_tag_0_39_BITS_4_TO_0_40_ULT_IF_m__ETC___d378 =
	      IF_m_tag_3_65_BITS_4_TO_0_66_ULT_IF_m_robEnqTi_ETC___d370;
    endcase
  end
  always@(a__h41635 or
	  NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d328 or
	  NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d331 or
	  NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d334 or
	  NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d337)
  begin
    case (a__h41635)
      2'd0:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d358 =
	      NOT_m_valid_0_dummy2_0_read__09_10_OR_NOT_m_va_ETC___d328;
      2'd1:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d358 =
	      NOT_m_valid_1_dummy2_0_read__16_17_OR_NOT_m_va_ETC___d331;
      2'd2:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d358 =
	      NOT_m_valid_2_dummy2_0_read__24_25_OR_NOT_m_va_ETC___d334;
      2'd3:
	  SEL_ARR_NOT_m_valid_0_dummy2_0_read__09_10_OR__ETC___d358 =
	      NOT_m_valid_3_dummy2_0_read__31_32_OR_NOT_m_va_ETC___d337;
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_9_28_m_data_1_16_BIT_9_ETC___d433 =
	      m_data_0[9];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_9_28_m_data_1_16_BIT_9_ETC___d433 =
	      m_data_1[9];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_9_28_m_data_1_16_BIT_9_ETC___d433 =
	      m_data_2[9];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_9_28_m_data_1_16_BIT_9_ETC___d433 =
	      m_data_3[9];
    endcase
  end
  always@(m_data_0)
  begin
    case (m_data_0[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 =
	      m_data_0[3:1];
      default: IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 =
		   3'd5;
    endcase
  end
  always@(m_data_1)
  begin
    case (m_data_1[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 =
	      m_data_1[3:1];
      default: IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 =
		   3'd5;
    endcase
  end
  always@(m_data_2)
  begin
    case (m_data_2[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 =
	      m_data_2[3:1];
      default: IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 =
		   3'd5;
    endcase
  end
  always@(m_data_3)
  begin
    case (m_data_3[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572 =
	      m_data_3[3:1];
      default: IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572 =
		   3'd5;
    endcase
  end
  always@(idx__h41421 or
	  IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 or
	  IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 or
	  IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 or
	  IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d599 =
	      IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 ==
	      3'd4;
      2'd1:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d599 =
	      IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 ==
	      3'd4;
      2'd2:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d599 =
	      IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 ==
	      3'd4;
      2'd3:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d599 =
	      IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572 ==
	      3'd4;
    endcase
  end
  always@(idx__h41421 or
	  IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 or
	  IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 or
	  IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 or
	  IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d593 =
	      IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 ==
	      3'd3;
      2'd1:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d593 =
	      IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 ==
	      3'd3;
      2'd2:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d593 =
	      IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 ==
	      3'd3;
      2'd3:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d593 =
	      IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572 ==
	      3'd3;
    endcase
  end
  always@(idx__h41421 or
	  IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 or
	  IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 or
	  IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 or
	  IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d587 =
	      IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 ==
	      3'd2;
      2'd1:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d587 =
	      IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 ==
	      3'd2;
      2'd2:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d587 =
	      IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 ==
	      3'd2;
      2'd3:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d587 =
	      IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572 ==
	      3'd2;
    endcase
  end
  always@(idx__h41421 or
	  IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 or
	  IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 or
	  IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 or
	  IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d581 =
	      IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 ==
	      3'd1;
      2'd1:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d581 =
	      IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 ==
	      3'd1;
      2'd2:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d581 =
	      IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 ==
	      3'd1;
      2'd3:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d581 =
	      IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572 ==
	      3'd1;
    endcase
  end
  always@(idx__h41421 or
	  IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 or
	  IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 or
	  IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 or
	  IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d575 =
	      IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27_OR_m_dat_ETC___d536 ==
	      3'd0;
      2'd1:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d575 =
	      IF_m_data_1_16_BITS_3_TO_1_38_EQ_0_39_OR_m_dat_ETC___d548 ==
	      3'd0;
      2'd2:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d575 =
	      IF_m_data_2_19_BITS_3_TO_1_50_EQ_0_51_OR_m_dat_ETC___d560 ==
	      3'd0;
      2'd3:
	  SEL_ARR_IF_m_data_0_13_BITS_3_TO_1_26_EQ_0_27__ETC___d575 =
	      IF_m_data_3_22_BITS_3_TO_1_62_EQ_0_63_OR_m_dat_ETC___d572 ==
	      3'd0;
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_8_TO_4_20_m_data_1_16_ETC___d525 =
	      m_data_0[8:4];
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_8_TO_4_20_m_data_1_16_ETC___d525 =
	      m_data_1[8:4];
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_8_TO_4_20_m_data_1_16_ETC___d525 =
	      m_data_2[8:4];
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_8_TO_4_20_m_data_1_16_ETC___d525 =
	      m_data_3[8:4];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_4_14_m_ETC___d519 =
	      m_data_0[20:18] == 3'd4;
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_4_14_m_ETC___d519 =
	      m_data_1[20:18] == 3'd4;
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_4_14_m_ETC___d519 =
	      m_data_2[20:18] == 3'd4;
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_4_14_m_ETC___d519 =
	      m_data_3[20:18] == 3'd4;
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_3_94_m_ETC___d499 =
	      m_data_0[20:18] == 3'd3;
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_3_94_m_ETC___d499 =
	      m_data_1[20:18] == 3'd3;
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_3_94_m_ETC___d499 =
	      m_data_2[20:18] == 3'd3;
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_3_94_m_ETC___d499 =
	      m_data_3[20:18] == 3'd3;
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_1_91_m_ETC___d396 =
	      m_data_0[20:18] == 3'd1;
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_1_91_m_ETC___d396 =
	      m_data_1[20:18] == 3'd1;
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_1_91_m_ETC___d396 =
	      m_data_2[20:18] == 3'd1;
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_1_91_m_ETC___d396 =
	      m_data_3[20:18] == 3'd1;
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_2_04_m_ETC___d409 =
	      m_data_0[20:18] == 3'd2;
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_2_04_m_ETC___d409 =
	      m_data_1[20:18] == 3'd2;
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_2_04_m_ETC___d409 =
	      m_data_2[20:18] == 3'd2;
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_2_04_m_ETC___d409 =
	      m_data_3[20:18] == 3'd2;
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_0_15_m_ETC___d383 =
	      m_data_0[20:18] == 3'd0;
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_0_15_m_ETC___d383 =
	      m_data_1[20:18] == 3'd0;
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_0_15_m_ETC___d383 =
	      m_data_2[20:18] == 3'd0;
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_20_TO_18_14_EQ_0_15_m_ETC___d383 =
	      m_data_3[20:18] == 3'd0;
    endcase
  end
  always@(idx__h41421 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_NOT_m_regs_0_12_BIT_32_13_14_NOT_m_reg_ETC___d625 =
	      !m_regs_0[32];
      2'd1:
	  SEL_ARR_NOT_m_regs_0_12_BIT_32_13_14_NOT_m_reg_ETC___d625 =
	      !m_regs_1[32];
      2'd2:
	  SEL_ARR_NOT_m_regs_0_12_BIT_32_13_14_NOT_m_reg_ETC___d625 =
	      !m_regs_2[32];
      2'd3:
	  SEL_ARR_NOT_m_regs_0_12_BIT_32_13_14_NOT_m_reg_ETC___d625 =
	      !m_regs_3[32];
    endcase
  end
  always@(idx__h41421 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_NOT_m_regs_0_12_BIT_24_34_35_NOT_m_reg_ETC___d643 =
	      !m_regs_0[24];
      2'd1:
	  SEL_ARR_NOT_m_regs_0_12_BIT_24_34_35_NOT_m_reg_ETC___d643 =
	      !m_regs_1[24];
      2'd2:
	  SEL_ARR_NOT_m_regs_0_12_BIT_24_34_35_NOT_m_reg_ETC___d643 =
	      !m_regs_2[24];
      2'd3:
	  SEL_ARR_NOT_m_regs_0_12_BIT_24_34_35_NOT_m_reg_ETC___d643 =
	      !m_regs_3[24];
    endcase
  end
  always@(idx__h41421 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_NOT_m_regs_0_12_BIT_16_53_54_NOT_m_reg_ETC___d662 =
	      !m_regs_0[16];
      2'd1:
	  SEL_ARR_NOT_m_regs_0_12_BIT_16_53_54_NOT_m_reg_ETC___d662 =
	      !m_regs_1[16];
      2'd2:
	  SEL_ARR_NOT_m_regs_0_12_BIT_16_53_54_NOT_m_reg_ETC___d662 =
	      !m_regs_2[16];
      2'd3:
	  SEL_ARR_NOT_m_regs_0_12_BIT_16_53_54_NOT_m_reg_ETC___d662 =
	      !m_regs_3[16];
    endcase
  end
  always@(idx__h41421 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_NOT_m_regs_0_12_BIT_8_71_72_NOT_m_regs_ETC___d680 =
	      !m_regs_0[8];
      2'd1:
	  SEL_ARR_NOT_m_regs_0_12_BIT_8_71_72_NOT_m_regs_ETC___d680 =
	      !m_regs_1[8];
      2'd2:
	  SEL_ARR_NOT_m_regs_0_12_BIT_8_71_72_NOT_m_regs_ETC___d680 =
	      !m_regs_2[8];
      2'd3:
	  SEL_ARR_NOT_m_regs_0_12_BIT_8_71_72_NOT_m_regs_ETC___d680 =
	      !m_regs_3[8];
    endcase
  end
  always@(idx__h41421 or
	  m_spec_tag_0 or m_spec_tag_1 or m_spec_tag_2 or m_spec_tag_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_NOT_m_spec_tag_0_31_BIT_2_32_33_NOT_m__ETC___d744 =
	      !m_spec_tag_0[2];
      2'd1:
	  SEL_ARR_NOT_m_spec_tag_0_31_BIT_2_32_33_NOT_m__ETC___d744 =
	      !m_spec_tag_1[2];
      2'd2:
	  SEL_ARR_NOT_m_spec_tag_0_31_BIT_2_32_33_NOT_m__ETC___d744 =
	      !m_spec_tag_2[2];
      2'd3:
	  SEL_ARR_NOT_m_spec_tag_0_31_BIT_2_32_33_NOT_m__ETC___d744 =
	      !m_spec_tag_3[2];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_2_73_m_data_1_16_BIT_2_ETC___d478 =
	      m_data_0[2];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_2_73_m_data_1_16_BIT_2_ETC___d478 =
	      m_data_1[2];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_2_73_m_data_1_16_BIT_2_ETC___d478 =
	      m_data_2[2];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_2_73_m_data_1_16_BIT_2_ETC___d478 =
	      m_data_3[2];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_0_85_m_data_1_16_BIT_0_ETC___d490 =
	      m_data_0[0];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_0_85_m_data_1_16_BIT_0_ETC___d490 =
	      m_data_1[0];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_0_85_m_data_1_16_BIT_0_ETC___d490 =
	      m_data_2[0];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_0_85_m_data_1_16_BIT_0_ETC___d490 =
	      m_data_3[0];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_8_34_m_data_1_16_BIT_8_ETC___d439 =
	      m_data_0[8];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_8_34_m_data_1_16_BIT_8_ETC___d439 =
	      m_data_1[8];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_8_34_m_data_1_16_BIT_8_ETC___d439 =
	      m_data_2[8];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_8_34_m_data_1_16_BIT_8_ETC___d439 =
	      m_data_3[8];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_7_40_m_data_1_16_BIT_7_ETC___d445 =
	      m_data_0[7];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_7_40_m_data_1_16_BIT_7_ETC___d445 =
	      m_data_1[7];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_7_40_m_data_1_16_BIT_7_ETC___d445 =
	      m_data_2[7];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_7_40_m_data_1_16_BIT_7_ETC___d445 =
	      m_data_3[7];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_4_TO_3_00_m_data_1_16_ETC___d505 =
	      m_data_0[4:3];
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_4_TO_3_00_m_data_1_16_ETC___d505 =
	      m_data_1[4:3];
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_4_TO_3_00_m_data_1_16_ETC___d505 =
	      m_data_2[4:3];
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_4_TO_3_00_m_data_1_16_ETC___d505 =
	      m_data_3[4:3];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_1_TO_0_06_m_data_1_16_ETC___d511 =
	      m_data_0[1:0];
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_1_TO_0_06_m_data_1_16_ETC___d511 =
	      m_data_1[1:0];
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_1_TO_0_06_m_data_1_16_ETC___d511 =
	      m_data_2[1:0];
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_1_TO_0_06_m_data_1_16_ETC___d511 =
	      m_data_3[1:0];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_6_47_m_data_1_16_BIT_6_ETC___d452 =
	      m_data_0[6];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_6_47_m_data_1_16_BIT_6_ETC___d452 =
	      m_data_1[6];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_6_47_m_data_1_16_BIT_6_ETC___d452 =
	      m_data_2[6];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_6_47_m_data_1_16_BIT_6_ETC___d452 =
	      m_data_3[6];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_5_53_m_data_1_16_BIT_5_ETC___d458 =
	      m_data_0[5];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_5_53_m_data_1_16_BIT_5_ETC___d458 =
	      m_data_1[5];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_5_53_m_data_1_16_BIT_5_ETC___d458 =
	      m_data_2[5];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_5_53_m_data_1_16_BIT_5_ETC___d458 =
	      m_data_3[5];
    endcase
  end
  always@(idx__h41421 or
	  m_spec_tag_0 or m_spec_tag_1 or m_spec_tag_2 or m_spec_tag_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_spec_tag_0_31_BITS_1_TO_0_46_m_spec__ETC___d751 =
	      m_spec_tag_0[1:0];
      2'd1:
	  SEL_ARR_m_spec_tag_0_31_BITS_1_TO_0_46_m_spec__ETC___d751 =
	      m_spec_tag_1[1:0];
      2'd2:
	  SEL_ARR_m_spec_tag_0_31_BITS_1_TO_0_46_m_spec__ETC___d751 =
	      m_spec_tag_2[1:0];
      2'd3:
	  SEL_ARR_m_spec_tag_0_31_BITS_1_TO_0_46_m_spec__ETC___d751 =
	      m_spec_tag_3[1:0];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_3_66_m_data_1_16_BIT_3_ETC___d471 =
	      m_data_0[3];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_3_66_m_data_1_16_BIT_3_ETC___d471 =
	      m_data_1[3];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_3_66_m_data_1_16_BIT_3_ETC___d471 =
	      m_data_2[3];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_3_66_m_data_1_16_BIT_3_ETC___d471 =
	      m_data_3[3];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_4_60_m_data_1_16_BIT_4_ETC___d465 =
	      m_data_0[4];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_4_60_m_data_1_16_BIT_4_ETC___d465 =
	      m_data_1[4];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_4_60_m_data_1_16_BIT_4_ETC___d465 =
	      m_data_2[4];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_4_60_m_data_1_16_BIT_4_ETC___d465 =
	      m_data_3[4];
    endcase
  end
  always@(idx__h41421 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_regs_0_12_BITS_23_TO_17_45_m_regs_1__ETC___d650 =
	      m_regs_0[23:17];
      2'd1:
	  SEL_ARR_m_regs_0_12_BITS_23_TO_17_45_m_regs_1__ETC___d650 =
	      m_regs_1[23:17];
      2'd2:
	  SEL_ARR_m_regs_0_12_BITS_23_TO_17_45_m_regs_1__ETC___d650 =
	      m_regs_2[23:17];
      2'd3:
	  SEL_ARR_m_regs_0_12_BITS_23_TO_17_45_m_regs_1__ETC___d650 =
	      m_regs_3[23:17];
    endcase
  end
  always@(idx__h41421 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_regs_0_12_BITS_7_TO_1_82_m_regs_1_15_ETC___d687 =
	      m_regs_0[7:1];
      2'd1:
	  SEL_ARR_m_regs_0_12_BITS_7_TO_1_82_m_regs_1_15_ETC___d687 =
	      m_regs_1[7:1];
      2'd2:
	  SEL_ARR_m_regs_0_12_BITS_7_TO_1_82_m_regs_1_15_ETC___d687 =
	      m_regs_2[7:1];
      2'd3:
	  SEL_ARR_m_regs_0_12_BITS_7_TO_1_82_m_regs_1_15_ETC___d687 =
	      m_regs_3[7:1];
    endcase
  end
  always@(idx__h41421 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_regs_0_12_BIT_0_88_m_regs_1_15_BIT_0_ETC___d693 =
	      m_regs_0[0];
      2'd1:
	  SEL_ARR_m_regs_0_12_BIT_0_88_m_regs_1_15_BIT_0_ETC___d693 =
	      m_regs_1[0];
      2'd2:
	  SEL_ARR_m_regs_0_12_BIT_0_88_m_regs_1_15_BIT_0_ETC___d693 =
	      m_regs_2[0];
      2'd3:
	  SEL_ARR_m_regs_0_12_BIT_0_88_m_regs_1_15_BIT_0_ETC___d693 =
	      m_regs_3[0];
    endcase
  end
  always@(idx__h41421 or m_tag_0 or m_tag_1 or m_tag_2 or m_tag_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_tag_0_39_BITS_8_TO_5_04_m_tag_1_48_B_ETC___d709 =
	      m_tag_0[8:5];
      2'd1:
	  SEL_ARR_m_tag_0_39_BITS_8_TO_5_04_m_tag_1_48_B_ETC___d709 =
	      m_tag_1[8:5];
      2'd2:
	  SEL_ARR_m_tag_0_39_BITS_8_TO_5_04_m_tag_1_48_B_ETC___d709 =
	      m_tag_2[8:5];
      2'd3:
	  SEL_ARR_m_tag_0_39_BITS_8_TO_5_04_m_tag_1_48_B_ETC___d709 =
	      m_tag_3[8:5];
    endcase
  end
  always@(idx__h41421 or m_tag_0 or m_tag_1 or m_tag_2 or m_tag_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_tag_0_39_BITS_4_TO_0_40_m_tag_1_48_B_ETC___d711 =
	      m_tag_0[4:0];
      2'd1:
	  SEL_ARR_m_tag_0_39_BITS_4_TO_0_40_m_tag_1_48_B_ETC___d711 =
	      m_tag_1[4:0];
      2'd2:
	  SEL_ARR_m_tag_0_39_BITS_4_TO_0_40_m_tag_1_48_B_ETC___d711 =
	      m_tag_2[4:0];
      2'd3:
	  SEL_ARR_m_tag_0_39_BITS_4_TO_0_40_m_tag_1_48_B_ETC___d711 =
	      m_tag_3[4:0];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_1_79_m_data_1_16_BIT_1_ETC___d484 =
	      m_data_0[1];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_1_79_m_data_1_16_BIT_1_ETC___d484 =
	      m_data_1[1];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_1_79_m_data_1_16_BIT_1_ETC___d484 =
	      m_data_2[1];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_1_79_m_data_1_16_BIT_1_ETC___d484 =
	      m_data_3[1];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BIT_10_22_m_data_1_16_BIT__ETC___d427 =
	      m_data_0[10];
      2'd1:
	  SEL_ARR_m_data_0_13_BIT_10_22_m_data_1_16_BIT__ETC___d427 =
	      m_data_1[10];
      2'd2:
	  SEL_ARR_m_data_0_13_BIT_10_22_m_data_1_16_BIT__ETC___d427 =
	      m_data_2[10];
      2'd3:
	  SEL_ARR_m_data_0_13_BIT_10_22_m_data_1_16_BIT__ETC___d427 =
	      m_data_3[10];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_14_TO_11_16_m_data_1__ETC___d421 =
	      m_data_0[14:11];
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_14_TO_11_16_m_data_1__ETC___d421 =
	      m_data_1[14:11];
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_14_TO_11_16_m_data_1__ETC___d421 =
	      m_data_2[14:11];
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_14_TO_11_16_m_data_1__ETC___d421 =
	      m_data_3[14:11];
    endcase
  end
  always@(idx__h41421 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_regs_0_12_BITS_15_TO_9_64_m_regs_1_1_ETC___d669 =
	      m_regs_0[15:9];
      2'd1:
	  SEL_ARR_m_regs_0_12_BITS_15_TO_9_64_m_regs_1_1_ETC___d669 =
	      m_regs_1[15:9];
      2'd2:
	  SEL_ARR_m_regs_0_12_BITS_15_TO_9_64_m_regs_1_1_ETC___d669 =
	      m_regs_2[15:9];
      2'd3:
	  SEL_ARR_m_regs_0_12_BITS_15_TO_9_64_m_regs_1_1_ETC___d669 =
	      m_regs_3[15:9];
    endcase
  end
  always@(idx__h41421 or m_tag_0 or m_tag_1 or m_tag_2 or m_tag_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_tag_0_39_BIT_9_98_m_tag_1_48_BIT_9_9_ETC___d703 =
	      m_tag_0[9];
      2'd1:
	  SEL_ARR_m_tag_0_39_BIT_9_98_m_tag_1_48_BIT_9_9_ETC___d703 =
	      m_tag_1[9];
      2'd2:
	  SEL_ARR_m_tag_0_39_BIT_9_98_m_tag_1_48_BIT_9_9_ETC___d703 =
	      m_tag_2[9];
      2'd3:
	  SEL_ARR_m_tag_0_39_BIT_9_98_m_tag_1_48_BIT_9_9_ETC___d703 =
	      m_tag_3[9];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_4_TO_0_84_m_data_1_16_ETC___d389 =
	      m_data_0[4:0];
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_4_TO_0_84_m_data_1_16_ETC___d389 =
	      m_data_1[4:0];
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_4_TO_0_84_m_data_1_16_ETC___d389 =
	      m_data_2[4:0];
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_4_TO_0_84_m_data_1_16_ETC___d389 =
	      m_data_3[4:0];
    endcase
  end
  always@(idx__h41421 or bs__h64251 or bs__h64439 or bs__h64627 or bs__h64803)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__13_AND_ETC___d730 =
	      bs__h64251;
      2'd1:
	  SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__13_AND_ETC___d730 =
	      bs__h64439;
      2'd2:
	  SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__13_AND_ETC___d730 =
	      bs__h64627;
      2'd3:
	  SEL_ARR_IF_m_spec_bits_0_dummy2_0_read__13_AND_ETC___d730 =
	      bs__h64803;
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_2_TO_0_97_m_data_1_16_ETC___d402 =
	      m_data_0[2:0];
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_2_TO_0_97_m_data_1_16_ETC___d402 =
	      m_data_1[2:0];
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_2_TO_0_97_m_data_1_16_ETC___d402 =
	      m_data_2[2:0];
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_2_TO_0_97_m_data_1_16_ETC___d402 =
	      m_data_3[2:0];
    endcase
  end
  always@(idx__h41421 or m_data_0 or m_data_1 or m_data_2 or m_data_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_data_0_13_BITS_17_TO_15_10_m_data_1__ETC___d415 =
	      m_data_0[17:15];
      2'd1:
	  SEL_ARR_m_data_0_13_BITS_17_TO_15_10_m_data_1__ETC___d415 =
	      m_data_1[17:15];
      2'd2:
	  SEL_ARR_m_data_0_13_BITS_17_TO_15_10_m_data_1__ETC___d415 =
	      m_data_2[17:15];
      2'd3:
	  SEL_ARR_m_data_0_13_BITS_17_TO_15_10_m_data_1__ETC___d415 =
	      m_data_3[17:15];
    endcase
  end
  always@(idx__h41421 or m_regs_0 or m_regs_1 or m_regs_2 or m_regs_3)
  begin
    case (idx__h41421)
      2'd0:
	  SEL_ARR_m_regs_0_12_BITS_31_TO_25_27_m_regs_1__ETC___d632 =
	      m_regs_0[31:25];
      2'd1:
	  SEL_ARR_m_regs_0_12_BITS_31_TO_25_27_m_regs_1__ETC___d632 =
	      m_regs_1[31:25];
      2'd2:
	  SEL_ARR_m_regs_0_12_BITS_31_TO_25_27_m_regs_1__ETC___d632 =
	      m_regs_2[31:25];
      2'd3:
	  SEL_ARR_m_regs_0_12_BITS_31_TO_25_27_m_regs_1__ETC___d632 =
	      m_regs_3[31:25];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        m_regs_ready_0_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_regs_ready_1_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_regs_ready_2_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_regs_ready_3_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_spec_bits_0_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_spec_bits_1_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_spec_bits_2_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_spec_bits_3_rl <= `BSV_ASSIGNMENT_DELAY 4'hA;
	m_validEntryCount <= `BSV_ASSIGNMENT_DELAY 3'd0;
	m_valid_0_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_valid_1_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_valid_2_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_valid_3_rl <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (m_regs_ready_0_rl$EN)
	  m_regs_ready_0_rl <= `BSV_ASSIGNMENT_DELAY m_regs_ready_0_rl$D_IN;
	if (m_regs_ready_1_rl$EN)
	  m_regs_ready_1_rl <= `BSV_ASSIGNMENT_DELAY m_regs_ready_1_rl$D_IN;
	if (m_regs_ready_2_rl$EN)
	  m_regs_ready_2_rl <= `BSV_ASSIGNMENT_DELAY m_regs_ready_2_rl$D_IN;
	if (m_regs_ready_3_rl$EN)
	  m_regs_ready_3_rl <= `BSV_ASSIGNMENT_DELAY m_regs_ready_3_rl$D_IN;
	if (m_spec_bits_0_rl$EN)
	  m_spec_bits_0_rl <= `BSV_ASSIGNMENT_DELAY m_spec_bits_0_rl$D_IN;
	if (m_spec_bits_1_rl$EN)
	  m_spec_bits_1_rl <= `BSV_ASSIGNMENT_DELAY m_spec_bits_1_rl$D_IN;
	if (m_spec_bits_2_rl$EN)
	  m_spec_bits_2_rl <= `BSV_ASSIGNMENT_DELAY m_spec_bits_2_rl$D_IN;
	if (m_spec_bits_3_rl$EN)
	  m_spec_bits_3_rl <= `BSV_ASSIGNMENT_DELAY m_spec_bits_3_rl$D_IN;
	if (m_validEntryCount$EN)
	  m_validEntryCount <= `BSV_ASSIGNMENT_DELAY m_validEntryCount$D_IN;
	if (m_valid_0_rl$EN)
	  m_valid_0_rl <= `BSV_ASSIGNMENT_DELAY m_valid_0_rl$D_IN;
	if (m_valid_1_rl$EN)
	  m_valid_1_rl <= `BSV_ASSIGNMENT_DELAY m_valid_1_rl$D_IN;
	if (m_valid_2_rl$EN)
	  m_valid_2_rl <= `BSV_ASSIGNMENT_DELAY m_valid_2_rl$D_IN;
	if (m_valid_3_rl$EN)
	  m_valid_3_rl <= `BSV_ASSIGNMENT_DELAY m_valid_3_rl$D_IN;
      end
    if (m_data_0$EN) m_data_0 <= `BSV_ASSIGNMENT_DELAY m_data_0$D_IN;
    if (m_data_1$EN) m_data_1 <= `BSV_ASSIGNMENT_DELAY m_data_1$D_IN;
    if (m_data_2$EN) m_data_2 <= `BSV_ASSIGNMENT_DELAY m_data_2$D_IN;
    if (m_data_3$EN) m_data_3 <= `BSV_ASSIGNMENT_DELAY m_data_3$D_IN;
    if (m_regs_0$EN) m_regs_0 <= `BSV_ASSIGNMENT_DELAY m_regs_0$D_IN;
    if (m_regs_1$EN) m_regs_1 <= `BSV_ASSIGNMENT_DELAY m_regs_1$D_IN;
    if (m_regs_2$EN) m_regs_2 <= `BSV_ASSIGNMENT_DELAY m_regs_2$D_IN;
    if (m_regs_3$EN) m_regs_3 <= `BSV_ASSIGNMENT_DELAY m_regs_3$D_IN;
    if (m_spec_tag_0$EN)
      m_spec_tag_0 <= `BSV_ASSIGNMENT_DELAY m_spec_tag_0$D_IN;
    if (m_spec_tag_1$EN)
      m_spec_tag_1 <= `BSV_ASSIGNMENT_DELAY m_spec_tag_1$D_IN;
    if (m_spec_tag_2$EN)
      m_spec_tag_2 <= `BSV_ASSIGNMENT_DELAY m_spec_tag_2$D_IN;
    if (m_spec_tag_3$EN)
      m_spec_tag_3 <= `BSV_ASSIGNMENT_DELAY m_spec_tag_3$D_IN;
    if (m_tag_0$EN) m_tag_0 <= `BSV_ASSIGNMENT_DELAY m_tag_0$D_IN;
    if (m_tag_1$EN) m_tag_1 <= `BSV_ASSIGNMENT_DELAY m_tag_1$D_IN;
    if (m_tag_2$EN) m_tag_2 <= `BSV_ASSIGNMENT_DELAY m_tag_2$D_IN;
    if (m_tag_3$EN) m_tag_3 <= `BSV_ASSIGNMENT_DELAY m_tag_3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    m_data_0 = 21'h0AAAAA;
    m_data_1 = 21'h0AAAAA;
    m_data_2 = 21'h0AAAAA;
    m_data_3 = 21'h0AAAAA;
    m_regs_0 = 33'h0AAAAAAAA;
    m_regs_1 = 33'h0AAAAAAAA;
    m_regs_2 = 33'h0AAAAAAAA;
    m_regs_3 = 33'h0AAAAAAAA;
    m_regs_ready_0_rl = 4'hA;
    m_regs_ready_1_rl = 4'hA;
    m_regs_ready_2_rl = 4'hA;
    m_regs_ready_3_rl = 4'hA;
    m_spec_bits_0_rl = 4'hA;
    m_spec_bits_1_rl = 4'hA;
    m_spec_bits_2_rl = 4'hA;
    m_spec_bits_3_rl = 4'hA;
    m_spec_tag_0 = 3'h2;
    m_spec_tag_1 = 3'h2;
    m_spec_tag_2 = 3'h2;
    m_spec_tag_3 = 3'h2;
    m_tag_0 = 10'h2AA;
    m_tag_1 = 10'h2AA;
    m_tag_2 = 10'h2AA;
    m_tag_3 = 10'h2AA;
    m_validEntryCount = 3'h2;
    m_valid_0_rl = 1'h0;
    m_valid_1_rl = 1'h0;
    m_valid_2_rl = 1'h0;
    m_valid_3_rl = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkReservationStationFpuMulDiv

