//
// Generated by Bluespec Compiler (build e7facc6)
//
// On Wed Mar 25 15:46:32 GMT 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// to_raw_mem_request_get         O   353
// RDY_to_raw_mem_request_get     O     1
// RDY_to_raw_mem_response_put    O     1
// get_to_console_get             O     8 reg
// RDY_get_to_console_get         O     1 reg
// RDY_put_from_console_put       O     1 reg
// status                         O     8 reg
// RDY_start                      O     1
// RST_N_dm_power_on_reset        I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 unused
// to_raw_mem_response_put        I   256
// put_from_console_put           I     8 reg
// start_tohost_addr              I    64
// start_fromhost_addr            I    64 reg
// EN_set_verbosity               I     1
// EN_to_raw_mem_response_put     I     1
// EN_put_from_console_put        I     1
// EN_start                       I     1
// EN_to_raw_mem_request_get      I     1
// EN_get_to_console_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSoC_Top(RST_N_dm_power_on_reset,
		 CLK,
		 RST_N,

		 set_verbosity_verbosity,
		 set_verbosity_logdelay,
		 EN_set_verbosity,
		 RDY_set_verbosity,

		 EN_to_raw_mem_request_get,
		 to_raw_mem_request_get,
		 RDY_to_raw_mem_request_get,

		 to_raw_mem_response_put,
		 EN_to_raw_mem_response_put,
		 RDY_to_raw_mem_response_put,

		 EN_get_to_console_get,
		 get_to_console_get,
		 RDY_get_to_console_get,

		 put_from_console_put,
		 EN_put_from_console_put,
		 RDY_put_from_console_put,

		 status,

		 start_tohost_addr,
		 start_fromhost_addr,
		 EN_start,
		 RDY_start);
  input  RST_N_dm_power_on_reset;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // actionvalue method to_raw_mem_request_get
  input  EN_to_raw_mem_request_get;
  output [352 : 0] to_raw_mem_request_get;
  output RDY_to_raw_mem_request_get;

  // action method to_raw_mem_response_put
  input  [255 : 0] to_raw_mem_response_put;
  input  EN_to_raw_mem_response_put;
  output RDY_to_raw_mem_response_put;

  // actionvalue method get_to_console_get
  input  EN_get_to_console_get;
  output [7 : 0] get_to_console_get;
  output RDY_get_to_console_get;

  // action method put_from_console_put
  input  [7 : 0] put_from_console_put;
  input  EN_put_from_console_put;
  output RDY_put_from_console_put;

  // value method status
  output [7 : 0] status;

  // action method start
  input  [63 : 0] start_tohost_addr;
  input  [63 : 0] start_fromhost_addr;
  input  EN_start;
  output RDY_start;

  // signals for module outputs
  wire [352 : 0] to_raw_mem_request_get;
  wire [7 : 0] get_to_console_get, status;
  wire RDY_get_to_console_get,
       RDY_put_from_console_put,
       RDY_set_verbosity,
       RDY_start,
       RDY_to_raw_mem_request_get,
       RDY_to_raw_mem_response_put;

  // inlined wires
  wire [173 : 0] bus_split_0_doPut$wget,
		 bus_split_1_doPut$wget,
		 bus_split_2_doPut$wget;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1,
		 boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read,
		 boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read;
  wire [99 : 0] bus_ssNoSynth_0_ar_buffer_enqw$wget,
		bus_ssNoSynth_1_ar_buffer_enqw$wget,
		bus_ssNoSynth_2_ar_buffer_enqw$wget,
		uart0_slave_ar_buffer_enqw$wget,
		uart0_slave_aw_buffer_enqw$wget,
		ug_boot_rom_slave_u_ar_putWire$wget,
		ug_boot_rom_slave_u_aw_putWire$wget,
		ug_mem0_slave_u_ar_putWire$wget,
		ug_mem0_slave_u_aw_putWire$wget;
  wire [98 : 0] bus_1_ifcs_0_noRoute_currentReq$port0__write_1,
		bus_1_ifcs_0_noRoute_currentReq$port1__read,
		bus_1_ifcs_1_noRoute_currentReq$port0__write_1,
		bus_1_ifcs_1_noRoute_currentReq$port1__read,
		bus_ifcs_0_noRoute_inner_currentReq$port0__write_1,
		bus_ifcs_0_noRoute_inner_currentReq$port1__read,
		bus_ifcs_1_noRoute_inner_currentReq$port0__write_1,
		bus_ifcs_1_noRoute_inner_currentReq$port1__read;
  wire [75 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1,
		boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read,
		boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read;
  wire [74 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1,
		boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read,
		boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read;
  wire [73 : 0] uart0_slave_w_buffer_enqw$wget,
		ug_boot_rom_slave_u_w_putWire$wget,
		ug_mem0_slave_u_w_putWire$wget;
  wire [72 : 0] bus_msNoSynth_0_r_buffer_enqw$wget,
		bus_msNoSynth_1_r_buffer_enqw$wget;
  wire [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1,
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read,
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read;
  wire [8 : 0] bus_1_ifcs_0_noRoute_flitCount$port0__write_1,
	       bus_1_ifcs_0_noRoute_flitCount$port1__write_1,
	       bus_1_ifcs_0_noRoute_flitCount$port2__read,
	       bus_1_ifcs_1_noRoute_flitCount$port0__write_1,
	       bus_1_ifcs_1_noRoute_flitCount$port1__write_1,
	       bus_1_ifcs_1_noRoute_flitCount$port2__read;
  wire [7 : 0] bus_msNoSynth_0_b_buffer_enqw$wget,
	       bus_msNoSynth_1_b_buffer_enqw$wget;
  wire [1 : 0] boot_rom_axi4_deburster_inSerial_state$port0__write_1,
	       boot_rom_axi4_deburster_inSerial_state$port1__read,
	       boot_rom_axi4_deburster_inSerial_state$port1__write_1,
	       boot_rom_axi4_deburster_inSerial_state$port2__read,
	       mem0_controller_axi4_deburster_inSerial_state$port0__write_1,
	       mem0_controller_axi4_deburster_inSerial_state$port1__read,
	       mem0_controller_axi4_deburster_inSerial_state$port1__write_1,
	       mem0_controller_axi4_deburster_inSerial_state$port2__read;
  wire boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write,
       boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write,
       boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write,
       boot_rom_axi4_deburster_inSerial_state$EN_port0__write,
       boot_rom_axi4_deburster_inSerial_state$EN_port1__write,
       bus_1_1_flitToSink_0$whas,
       bus_1_1_flitToSink_1$whas,
       bus_1_1_reqWires_0$wget,
       bus_1_1_reqWires_1$wget,
       bus_1_1_reqWires_2$wget,
       bus_1_flitToSink_0$whas,
       bus_1_flitToSink_0_1$whas,
       bus_1_flitToSink_1$whas,
       bus_1_flitToSink_1_1$whas,
       bus_1_flitToSink_2$whas,
       bus_1_reqWires_0$wget,
       bus_1_reqWires_0_1$wget,
       bus_1_reqWires_1$wget,
       bus_1_reqWires_1_1$wget,
       bus_1_reqWires_2$wget,
       bus_1_sourceSelect_0$whas,
       bus_1_sourceSelect_0_1$whas,
       bus_1_sourceSelect_1$whas,
       bus_1_sourceSelect_1_1$whas,
       bus_1_sourceSelect_2$whas,
       bus_flitToSink_0$whas,
       bus_flitToSink_1$whas,
       bus_flitToSink_2$whas,
       bus_ifcs_0_noRoute_inner_currentReq$EN_port0__write,
       bus_ifcs_0_noRoute_inner_pendingReq$EN_port0__write,
       bus_ifcs_0_noRoute_inner_pendingReq$port1__read,
       bus_ifcs_0_noRoute_inner_pendingReq$port2__read,
       bus_ifcs_1_noRoute_inner_currentReq$EN_port0__write,
       bus_ifcs_1_noRoute_inner_pendingReq$EN_port0__write,
       bus_ifcs_1_noRoute_inner_pendingReq$port1__read,
       bus_ifcs_1_noRoute_inner_pendingReq$port2__read,
       bus_merged_0_doDrop$whas,
       bus_merged_1_doDrop$whas,
       bus_msNoSynth_0_ar_dwReady$whas,
       bus_msNoSynth_0_b_buffer_enqw$whas,
       bus_msNoSynth_0_r_buffer_enqw$whas,
       bus_msNoSynth_0_w_dwReady$whas,
       bus_msNoSynth_1_ar_dwReady$whas,
       bus_msNoSynth_1_b_buffer_enqw$whas,
       bus_msNoSynth_1_r_buffer_enqw$whas,
       bus_msNoSynth_1_w_dwReady$whas,
       bus_reqWires_0$wget,
       bus_reqWires_1$wget,
       bus_ssNoSynth_0_b_dwReady$whas,
       bus_ssNoSynth_0_r_dwReady$whas,
       bus_ssNoSynth_0_w_buffer_enqw$whas,
       bus_ssNoSynth_1_b_dwReady$whas,
       bus_ssNoSynth_1_r_dwReady$whas,
       bus_ssNoSynth_1_w_buffer_enqw$whas,
       bus_ssNoSynth_2_b_dwReady$whas,
       bus_ssNoSynth_2_r_dwReady$whas,
       bus_ssNoSynth_2_w_buffer_enqw$whas,
       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write,
       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write,
       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write,
       mem0_controller_axi4_deburster_inSerial_state$EN_port0__write,
       mem0_controller_axi4_deburster_inSerial_state$EN_port1__write,
       uart0_slave_ar_buffer_enqw$whas,
       uart0_slave_aw_buffer_enqw$whas,
       uart0_slave_b_dwReady$whas,
       uart0_slave_r_dwReady$whas,
       uart0_slave_w_buffer_enqw$whas,
       ug_boot_rom_slave_u_ar_putWire$whas,
       ug_boot_rom_slave_u_aw_putWire$whas,
       ug_boot_rom_slave_u_b_dropWire$whas,
       ug_boot_rom_slave_u_r_dropWire$whas,
       ug_boot_rom_slave_u_w_putWire$whas,
       ug_mem0_slave_u_ar_putWire$whas,
       ug_mem0_slave_u_aw_putWire$whas,
       ug_mem0_slave_u_b_dropWire$whas,
       ug_mem0_slave_u_r_dropWire$whas,
       ug_mem0_slave_u_w_putWire$whas;

  // register boot_rom_axi4_deburster_flitReceived
  reg [7 : 0] boot_rom_axi4_deburster_flitReceived;
  wire [7 : 0] boot_rom_axi4_deburster_flitReceived$D_IN;
  wire boot_rom_axi4_deburster_flitReceived$EN;

  // register boot_rom_axi4_deburster_inSerial_lastWasRead
  reg boot_rom_axi4_deburster_inSerial_lastWasRead;
  wire boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN,
       boot_rom_axi4_deburster_inSerial_lastWasRead$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_arff_rv
  reg [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_awff_rv
  reg [100 : 0] boot_rom_axi4_deburster_inSerial_shim_awff_rv;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_bff_rv
  reg [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv;
  wire [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_rff_rv
  reg [75 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv;
  wire [75 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_wff_rv
  reg [74 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv;
  wire [74 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_state
  reg [1 : 0] boot_rom_axi4_deburster_inSerial_state;
  wire [1 : 0] boot_rom_axi4_deburster_inSerial_state$D_IN;
  wire boot_rom_axi4_deburster_inSerial_state$EN;

  // register boot_rom_axi4_deburster_readsSent
  reg [7 : 0] boot_rom_axi4_deburster_readsSent;
  wire [7 : 0] boot_rom_axi4_deburster_readsSent$D_IN;
  wire boot_rom_axi4_deburster_readsSent$EN;

  // register boot_rom_axi4_deburster_writesSent
  reg [7 : 0] boot_rom_axi4_deburster_writesSent;
  wire [7 : 0] boot_rom_axi4_deburster_writesSent$D_IN;
  wire boot_rom_axi4_deburster_writesSent$EN;

  // register bus_1_1_activeSource_0
  reg bus_1_1_activeSource_0;
  reg bus_1_1_activeSource_0$D_IN;
  wire bus_1_1_activeSource_0$EN;

  // register bus_1_1_activeSource_1
  reg bus_1_1_activeSource_1;
  reg bus_1_1_activeSource_1$D_IN;
  wire bus_1_1_activeSource_1$EN;

  // register bus_1_1_activeSource_2
  reg bus_1_1_activeSource_2;
  reg bus_1_1_activeSource_2$D_IN;
  wire bus_1_1_activeSource_2$EN;

  // register bus_1_1_arbiter_firstHot
  reg bus_1_1_arbiter_firstHot;
  wire bus_1_1_arbiter_firstHot$D_IN, bus_1_1_arbiter_firstHot$EN;

  // register bus_1_1_arbiter_lastSelect
  reg bus_1_1_arbiter_lastSelect;
  wire bus_1_1_arbiter_lastSelect$D_IN, bus_1_1_arbiter_lastSelect$EN;

  // register bus_1_1_arbiter_lastSelect_1
  reg bus_1_1_arbiter_lastSelect_1;
  wire bus_1_1_arbiter_lastSelect_1$D_IN, bus_1_1_arbiter_lastSelect_1$EN;

  // register bus_1_1_state
  reg bus_1_1_state;
  wire bus_1_1_state$D_IN, bus_1_1_state$EN;

  // register bus_1_activeSource_0
  reg bus_1_activeSource_0;
  wire bus_1_activeSource_0$D_IN, bus_1_activeSource_0$EN;

  // register bus_1_activeSource_0_1
  reg bus_1_activeSource_0_1;
  wire bus_1_activeSource_0_1$D_IN, bus_1_activeSource_0_1$EN;

  // register bus_1_activeSource_1
  reg bus_1_activeSource_1;
  wire bus_1_activeSource_1$D_IN, bus_1_activeSource_1$EN;

  // register bus_1_activeSource_1_1
  reg bus_1_activeSource_1_1;
  wire bus_1_activeSource_1_1$D_IN, bus_1_activeSource_1_1$EN;

  // register bus_1_activeSource_2
  reg bus_1_activeSource_2;
  wire bus_1_activeSource_2$D_IN, bus_1_activeSource_2$EN;

  // register bus_1_arbiter_firstHot
  reg bus_1_arbiter_firstHot;
  wire bus_1_arbiter_firstHot$D_IN, bus_1_arbiter_firstHot$EN;

  // register bus_1_arbiter_firstHot_1
  reg bus_1_arbiter_firstHot_1;
  wire bus_1_arbiter_firstHot_1$D_IN, bus_1_arbiter_firstHot_1$EN;

  // register bus_1_arbiter_lastSelect
  reg bus_1_arbiter_lastSelect;
  wire bus_1_arbiter_lastSelect$D_IN, bus_1_arbiter_lastSelect$EN;

  // register bus_1_arbiter_lastSelect_1
  reg bus_1_arbiter_lastSelect_1;
  wire bus_1_arbiter_lastSelect_1$D_IN, bus_1_arbiter_lastSelect_1$EN;

  // register bus_1_arbiter_lastSelect_2
  reg bus_1_arbiter_lastSelect_2;
  wire bus_1_arbiter_lastSelect_2$D_IN, bus_1_arbiter_lastSelect_2$EN;

  // register bus_1_ifcs_0_noRoute_currentReq
  reg [98 : 0] bus_1_ifcs_0_noRoute_currentReq;
  wire [98 : 0] bus_1_ifcs_0_noRoute_currentReq$D_IN;
  wire bus_1_ifcs_0_noRoute_currentReq$EN;

  // register bus_1_ifcs_0_noRoute_flitCount
  reg [8 : 0] bus_1_ifcs_0_noRoute_flitCount;
  wire [8 : 0] bus_1_ifcs_0_noRoute_flitCount$D_IN;
  wire bus_1_ifcs_0_noRoute_flitCount$EN;

  // register bus_1_ifcs_0_state
  reg [1 : 0] bus_1_ifcs_0_state;
  wire [1 : 0] bus_1_ifcs_0_state$D_IN;
  wire bus_1_ifcs_0_state$EN;

  // register bus_1_ifcs_0_state_1
  reg bus_1_ifcs_0_state_1;
  wire bus_1_ifcs_0_state_1$D_IN, bus_1_ifcs_0_state_1$EN;

  // register bus_1_ifcs_1_noRoute_currentReq
  reg [98 : 0] bus_1_ifcs_1_noRoute_currentReq;
  wire [98 : 0] bus_1_ifcs_1_noRoute_currentReq$D_IN;
  wire bus_1_ifcs_1_noRoute_currentReq$EN;

  // register bus_1_ifcs_1_noRoute_flitCount
  reg [8 : 0] bus_1_ifcs_1_noRoute_flitCount;
  wire [8 : 0] bus_1_ifcs_1_noRoute_flitCount$D_IN;
  wire bus_1_ifcs_1_noRoute_flitCount$EN;

  // register bus_1_ifcs_1_state
  reg [1 : 0] bus_1_ifcs_1_state;
  wire [1 : 0] bus_1_ifcs_1_state$D_IN;
  wire bus_1_ifcs_1_state$EN;

  // register bus_1_ifcs_1_state_1
  reg bus_1_ifcs_1_state_1;
  wire bus_1_ifcs_1_state_1$D_IN, bus_1_ifcs_1_state_1$EN;

  // register bus_1_ifcs_2_state
  reg bus_1_ifcs_2_state;
  wire bus_1_ifcs_2_state$D_IN, bus_1_ifcs_2_state$EN;

  // register bus_1_state
  reg bus_1_state;
  wire bus_1_state$D_IN, bus_1_state$EN;

  // register bus_1_state_1
  reg bus_1_state_1;
  wire bus_1_state_1$D_IN, bus_1_state_1$EN;

  // register bus_activeSource_0
  reg bus_activeSource_0;
  wire bus_activeSource_0$D_IN, bus_activeSource_0$EN;

  // register bus_activeSource_1
  reg bus_activeSource_1;
  wire bus_activeSource_1$D_IN, bus_activeSource_1$EN;

  // register bus_arbiter_firstHot
  reg bus_arbiter_firstHot;
  wire bus_arbiter_firstHot$D_IN, bus_arbiter_firstHot$EN;

  // register bus_arbiter_lastSelect
  reg bus_arbiter_lastSelect;
  wire bus_arbiter_lastSelect$D_IN, bus_arbiter_lastSelect$EN;

  // register bus_ifcs_0_noRoute_inner_currentReq
  reg [98 : 0] bus_ifcs_0_noRoute_inner_currentReq;
  wire [98 : 0] bus_ifcs_0_noRoute_inner_currentReq$D_IN;
  wire bus_ifcs_0_noRoute_inner_currentReq$EN;

  // register bus_ifcs_0_noRoute_inner_pendingReq
  reg bus_ifcs_0_noRoute_inner_pendingReq;
  wire bus_ifcs_0_noRoute_inner_pendingReq$D_IN,
       bus_ifcs_0_noRoute_inner_pendingReq$EN;

  // register bus_ifcs_0_state
  reg [1 : 0] bus_ifcs_0_state;
  reg [1 : 0] bus_ifcs_0_state$D_IN;
  wire bus_ifcs_0_state$EN;

  // register bus_ifcs_0_state_1
  reg bus_ifcs_0_state_1;
  wire bus_ifcs_0_state_1$D_IN, bus_ifcs_0_state_1$EN;

  // register bus_ifcs_1_noRoute_inner_currentReq
  reg [98 : 0] bus_ifcs_1_noRoute_inner_currentReq;
  wire [98 : 0] bus_ifcs_1_noRoute_inner_currentReq$D_IN;
  wire bus_ifcs_1_noRoute_inner_currentReq$EN;

  // register bus_ifcs_1_noRoute_inner_pendingReq
  reg bus_ifcs_1_noRoute_inner_pendingReq;
  wire bus_ifcs_1_noRoute_inner_pendingReq$D_IN,
       bus_ifcs_1_noRoute_inner_pendingReq$EN;

  // register bus_ifcs_1_state
  reg [1 : 0] bus_ifcs_1_state;
  reg [1 : 0] bus_ifcs_1_state$D_IN;
  wire bus_ifcs_1_state$EN;

  // register bus_ifcs_1_state_1
  reg bus_ifcs_1_state_1;
  wire bus_ifcs_1_state_1$D_IN, bus_ifcs_1_state_1$EN;

  // register bus_ifcs_2_state
  reg bus_ifcs_2_state;
  wire bus_ifcs_2_state$D_IN, bus_ifcs_2_state$EN;

  // register bus_merged_0_flitLeft
  reg [7 : 0] bus_merged_0_flitLeft;
  wire [7 : 0] bus_merged_0_flitLeft$D_IN;
  wire bus_merged_0_flitLeft$EN;

  // register bus_merged_1_flitLeft
  reg [7 : 0] bus_merged_1_flitLeft;
  wire [7 : 0] bus_merged_1_flitLeft$D_IN;
  wire bus_merged_1_flitLeft$EN;

  // register bus_split_0_flitLeft
  reg [7 : 0] bus_split_0_flitLeft;
  wire [7 : 0] bus_split_0_flitLeft$D_IN;
  wire bus_split_0_flitLeft$EN;

  // register bus_split_1_flitLeft
  reg [7 : 0] bus_split_1_flitLeft;
  wire [7 : 0] bus_split_1_flitLeft$D_IN;
  wire bus_split_1_flitLeft$EN;

  // register bus_split_2_flitLeft
  reg [7 : 0] bus_split_2_flitLeft;
  wire [7 : 0] bus_split_2_flitLeft$D_IN;
  wire bus_split_2_flitLeft$EN;

  // register bus_state
  reg bus_state;
  wire bus_state$D_IN, bus_state$EN;

  // register mem0_controller_axi4_deburster_flitReceived
  reg [7 : 0] mem0_controller_axi4_deburster_flitReceived;
  wire [7 : 0] mem0_controller_axi4_deburster_flitReceived$D_IN;
  wire mem0_controller_axi4_deburster_flitReceived$EN;

  // register mem0_controller_axi4_deburster_inSerial_lastWasRead
  reg mem0_controller_axi4_deburster_inSerial_lastWasRead;
  wire mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN,
       mem0_controller_axi4_deburster_inSerial_lastWasRead$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_arff_rv
  reg [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_arff_rv;
  wire [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_awff_rv
  reg [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_awff_rv;
  wire [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_bff_rv
  reg [9 : 0] mem0_controller_axi4_deburster_inSerial_shim_bff_rv;
  wire [9 : 0] mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_rff_rv
  reg [75 : 0] mem0_controller_axi4_deburster_inSerial_shim_rff_rv;
  wire [75 : 0] mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_wff_rv
  reg [74 : 0] mem0_controller_axi4_deburster_inSerial_shim_wff_rv;
  wire [74 : 0] mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_state
  reg [1 : 0] mem0_controller_axi4_deburster_inSerial_state;
  wire [1 : 0] mem0_controller_axi4_deburster_inSerial_state$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_state$EN;

  // register mem0_controller_axi4_deburster_readsSent
  reg [7 : 0] mem0_controller_axi4_deburster_readsSent;
  wire [7 : 0] mem0_controller_axi4_deburster_readsSent$D_IN;
  wire mem0_controller_axi4_deburster_readsSent$EN;

  // register mem0_controller_axi4_deburster_writesSent
  reg [7 : 0] mem0_controller_axi4_deburster_writesSent;
  wire [7 : 0] mem0_controller_axi4_deburster_writesSent$D_IN;
  wire mem0_controller_axi4_deburster_writesSent$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  wire [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule boot_rom
  wire [63 : 0] boot_rom$set_addr_map_addr_base,
		boot_rom$set_addr_map_addr_lim,
		boot_rom$slave_araddr,
		boot_rom$slave_awaddr,
		boot_rom$slave_rdata,
		boot_rom$slave_wdata;
  wire [7 : 0] boot_rom$slave_arlen,
	       boot_rom$slave_awlen,
	       boot_rom$slave_wstrb;
  wire [6 : 0] boot_rom$slave_arid,
	       boot_rom$slave_awid,
	       boot_rom$slave_bid,
	       boot_rom$slave_rid;
  wire [3 : 0] boot_rom$slave_arcache,
	       boot_rom$slave_arqos,
	       boot_rom$slave_arregion,
	       boot_rom$slave_awcache,
	       boot_rom$slave_awqos,
	       boot_rom$slave_awregion;
  wire [2 : 0] boot_rom$slave_arprot,
	       boot_rom$slave_arsize,
	       boot_rom$slave_awprot,
	       boot_rom$slave_awsize;
  wire [1 : 0] boot_rom$slave_arburst,
	       boot_rom$slave_awburst,
	       boot_rom$slave_bresp,
	       boot_rom$slave_rresp;
  wire boot_rom$EN_set_addr_map,
       boot_rom$RDY_set_addr_map,
       boot_rom$slave_arlock,
       boot_rom$slave_arready,
       boot_rom$slave_arvalid,
       boot_rom$slave_awlock,
       boot_rom$slave_awready,
       boot_rom$slave_awvalid,
       boot_rom$slave_bready,
       boot_rom$slave_bvalid,
       boot_rom$slave_rlast,
       boot_rom$slave_rready,
       boot_rom$slave_ruser,
       boot_rom$slave_rvalid,
       boot_rom$slave_wlast,
       boot_rom$slave_wready,
       boot_rom$slave_wuser,
       boot_rom$slave_wvalid;

  // ports of submodule boot_rom_axi4_deburster_countWriteRspFF
  wire [7 : 0] boot_rom_axi4_deburster_countWriteRspFF$D_IN,
	       boot_rom_axi4_deburster_countWriteRspFF$D_OUT;
  wire boot_rom_axi4_deburster_countWriteRspFF$CLR,
       boot_rom_axi4_deburster_countWriteRspFF$DEQ,
       boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N,
       boot_rom_axi4_deburster_countWriteRspFF$ENQ,
       boot_rom_axi4_deburster_countWriteRspFF$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_arff
  wire [99 : 0] boot_rom_axi4_deburster_inShim_arff$D_IN,
		boot_rom_axi4_deburster_inShim_arff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_arff$CLR,
       boot_rom_axi4_deburster_inShim_arff$DEQ,
       boot_rom_axi4_deburster_inShim_arff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_arff$ENQ,
       boot_rom_axi4_deburster_inShim_arff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_awff
  wire [99 : 0] boot_rom_axi4_deburster_inShim_awff$D_IN,
		boot_rom_axi4_deburster_inShim_awff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_awff$CLR,
       boot_rom_axi4_deburster_inShim_awff$DEQ,
       boot_rom_axi4_deburster_inShim_awff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_awff$ENQ,
       boot_rom_axi4_deburster_inShim_awff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_bff
  wire [8 : 0] boot_rom_axi4_deburster_inShim_bff$D_IN,
	       boot_rom_axi4_deburster_inShim_bff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_bff$CLR,
       boot_rom_axi4_deburster_inShim_bff$DEQ,
       boot_rom_axi4_deburster_inShim_bff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_bff$ENQ,
       boot_rom_axi4_deburster_inShim_bff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_rff
  wire [74 : 0] boot_rom_axi4_deburster_inShim_rff$D_IN,
		boot_rom_axi4_deburster_inShim_rff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_rff$CLR,
       boot_rom_axi4_deburster_inShim_rff$DEQ,
       boot_rom_axi4_deburster_inShim_rff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_rff$ENQ,
       boot_rom_axi4_deburster_inShim_rff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_wff
  wire [73 : 0] boot_rom_axi4_deburster_inShim_wff$D_IN,
		boot_rom_axi4_deburster_inShim_wff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_wff$CLR,
       boot_rom_axi4_deburster_inShim_wff$DEQ,
       boot_rom_axi4_deburster_inShim_wff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_wff$ENQ,
       boot_rom_axi4_deburster_inShim_wff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_lastReadRspFF
  wire boot_rom_axi4_deburster_lastReadRspFF$CLR,
       boot_rom_axi4_deburster_lastReadRspFF$DEQ,
       boot_rom_axi4_deburster_lastReadRspFF$D_IN,
       boot_rom_axi4_deburster_lastReadRspFF$D_OUT,
       boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N,
       boot_rom_axi4_deburster_lastReadRspFF$ENQ,
       boot_rom_axi4_deburster_lastReadRspFF$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_arff
  wire [99 : 0] boot_rom_axi4_deburster_outShim_arff$D_IN,
		boot_rom_axi4_deburster_outShim_arff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_arff$CLR,
       boot_rom_axi4_deburster_outShim_arff$DEQ,
       boot_rom_axi4_deburster_outShim_arff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_arff$ENQ,
       boot_rom_axi4_deburster_outShim_arff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_awff
  wire [99 : 0] boot_rom_axi4_deburster_outShim_awff$D_IN,
		boot_rom_axi4_deburster_outShim_awff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_awff$CLR,
       boot_rom_axi4_deburster_outShim_awff$DEQ,
       boot_rom_axi4_deburster_outShim_awff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_awff$ENQ,
       boot_rom_axi4_deburster_outShim_awff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_bff
  wire [8 : 0] boot_rom_axi4_deburster_outShim_bff$D_IN,
	       boot_rom_axi4_deburster_outShim_bff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_bff$CLR,
       boot_rom_axi4_deburster_outShim_bff$DEQ,
       boot_rom_axi4_deburster_outShim_bff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_bff$ENQ,
       boot_rom_axi4_deburster_outShim_bff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_rff
  wire [74 : 0] boot_rom_axi4_deburster_outShim_rff$D_IN,
		boot_rom_axi4_deburster_outShim_rff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_rff$CLR,
       boot_rom_axi4_deburster_outShim_rff$DEQ,
       boot_rom_axi4_deburster_outShim_rff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_rff$ENQ,
       boot_rom_axi4_deburster_outShim_rff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_wff
  wire [73 : 0] boot_rom_axi4_deburster_outShim_wff$D_IN,
		boot_rom_axi4_deburster_outShim_wff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_wff$CLR,
       boot_rom_axi4_deburster_outShim_wff$DEQ,
       boot_rom_axi4_deburster_outShim_wff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_wff$ENQ,
       boot_rom_axi4_deburster_outShim_wff$FULL_N;

  // ports of submodule br_ar_buffer_ff
  wire [99 : 0] br_ar_buffer_ff$D_IN, br_ar_buffer_ff$D_OUT;
  wire br_ar_buffer_ff$CLR,
       br_ar_buffer_ff$DEQ,
       br_ar_buffer_ff$EMPTY_N,
       br_ar_buffer_ff$ENQ,
       br_ar_buffer_ff$FULL_N;

  // ports of submodule br_ar_buffer_firstValid
  wire br_ar_buffer_firstValid$D_IN,
       br_ar_buffer_firstValid$EN,
       br_ar_buffer_firstValid$Q_OUT;

  // ports of submodule br_aw_buffer_ff
  wire [99 : 0] br_aw_buffer_ff$D_IN, br_aw_buffer_ff$D_OUT;
  wire br_aw_buffer_ff$CLR,
       br_aw_buffer_ff$DEQ,
       br_aw_buffer_ff$EMPTY_N,
       br_aw_buffer_ff$ENQ,
       br_aw_buffer_ff$FULL_N;

  // ports of submodule br_aw_buffer_firstValid
  wire br_aw_buffer_firstValid$D_IN,
       br_aw_buffer_firstValid$EN,
       br_aw_buffer_firstValid$Q_OUT;

  // ports of submodule br_w_buffer_ff
  wire [73 : 0] br_w_buffer_ff$D_IN, br_w_buffer_ff$D_OUT;
  wire br_w_buffer_ff$CLR,
       br_w_buffer_ff$DEQ,
       br_w_buffer_ff$EMPTY_N,
       br_w_buffer_ff$ENQ,
       br_w_buffer_ff$FULL_N;

  // ports of submodule br_w_buffer_firstValid
  wire br_w_buffer_firstValid$D_IN,
       br_w_buffer_firstValid$EN,
       br_w_buffer_firstValid$Q_OUT;

  // ports of submodule bus_1_ifcs_0_innerReq
  wire [99 : 0] bus_1_ifcs_0_innerReq$D_IN, bus_1_ifcs_0_innerReq$D_OUT;
  wire bus_1_ifcs_0_innerReq$CLR,
       bus_1_ifcs_0_innerReq$DEQ,
       bus_1_ifcs_0_innerReq$EMPTY_N,
       bus_1_ifcs_0_innerReq$ENQ,
       bus_1_ifcs_0_innerReq$FULL_N;

  // ports of submodule bus_1_ifcs_0_innerRoute
  wire [2 : 0] bus_1_ifcs_0_innerRoute$D_IN, bus_1_ifcs_0_innerRoute$D_OUT;
  wire bus_1_ifcs_0_innerRoute$CLR,
       bus_1_ifcs_0_innerRoute$DEQ,
       bus_1_ifcs_0_innerRoute$EMPTY_N,
       bus_1_ifcs_0_innerRoute$ENQ,
       bus_1_ifcs_0_innerRoute$FULL_N;

  // ports of submodule bus_1_ifcs_0_noRouteRsp
  wire [72 : 0] bus_1_ifcs_0_noRouteRsp$D_IN, bus_1_ifcs_0_noRouteRsp$D_OUT;
  wire bus_1_ifcs_0_noRouteRsp$CLR,
       bus_1_ifcs_0_noRouteRsp$DEQ,
       bus_1_ifcs_0_noRouteRsp$EMPTY_N,
       bus_1_ifcs_0_noRouteRsp$ENQ,
       bus_1_ifcs_0_noRouteRsp$FULL_N;

  // ports of submodule bus_1_ifcs_0_routeBack
  wire [1 : 0] bus_1_ifcs_0_routeBack$D_IN, bus_1_ifcs_0_routeBack$D_OUT;
  wire bus_1_ifcs_0_routeBack$CLR,
       bus_1_ifcs_0_routeBack$DEQ,
       bus_1_ifcs_0_routeBack$EMPTY_N,
       bus_1_ifcs_0_routeBack$ENQ,
       bus_1_ifcs_0_routeBack$FULL_N;

  // ports of submodule bus_1_ifcs_0_rspBack
  wire [72 : 0] bus_1_ifcs_0_rspBack$D_IN, bus_1_ifcs_0_rspBack$D_OUT;
  wire bus_1_ifcs_0_rspBack$CLR,
       bus_1_ifcs_0_rspBack$DEQ,
       bus_1_ifcs_0_rspBack$EMPTY_N,
       bus_1_ifcs_0_rspBack$ENQ,
       bus_1_ifcs_0_rspBack$FULL_N;

  // ports of submodule bus_1_ifcs_1_innerReq
  wire [99 : 0] bus_1_ifcs_1_innerReq$D_IN, bus_1_ifcs_1_innerReq$D_OUT;
  wire bus_1_ifcs_1_innerReq$CLR,
       bus_1_ifcs_1_innerReq$DEQ,
       bus_1_ifcs_1_innerReq$EMPTY_N,
       bus_1_ifcs_1_innerReq$ENQ,
       bus_1_ifcs_1_innerReq$FULL_N;

  // ports of submodule bus_1_ifcs_1_innerRoute
  wire [2 : 0] bus_1_ifcs_1_innerRoute$D_IN, bus_1_ifcs_1_innerRoute$D_OUT;
  wire bus_1_ifcs_1_innerRoute$CLR,
       bus_1_ifcs_1_innerRoute$DEQ,
       bus_1_ifcs_1_innerRoute$EMPTY_N,
       bus_1_ifcs_1_innerRoute$ENQ,
       bus_1_ifcs_1_innerRoute$FULL_N;

  // ports of submodule bus_1_ifcs_1_noRouteRsp
  wire [72 : 0] bus_1_ifcs_1_noRouteRsp$D_IN, bus_1_ifcs_1_noRouteRsp$D_OUT;
  wire bus_1_ifcs_1_noRouteRsp$CLR,
       bus_1_ifcs_1_noRouteRsp$DEQ,
       bus_1_ifcs_1_noRouteRsp$EMPTY_N,
       bus_1_ifcs_1_noRouteRsp$ENQ,
       bus_1_ifcs_1_noRouteRsp$FULL_N;

  // ports of submodule bus_1_ifcs_1_routeBack
  wire [1 : 0] bus_1_ifcs_1_routeBack$D_IN, bus_1_ifcs_1_routeBack$D_OUT;
  wire bus_1_ifcs_1_routeBack$CLR,
       bus_1_ifcs_1_routeBack$DEQ,
       bus_1_ifcs_1_routeBack$EMPTY_N,
       bus_1_ifcs_1_routeBack$ENQ,
       bus_1_ifcs_1_routeBack$FULL_N;

  // ports of submodule bus_1_ifcs_1_rspBack
  wire [72 : 0] bus_1_ifcs_1_rspBack$D_IN, bus_1_ifcs_1_rspBack$D_OUT;
  wire bus_1_ifcs_1_rspBack$CLR,
       bus_1_ifcs_1_rspBack$DEQ,
       bus_1_ifcs_1_rspBack$EMPTY_N,
       bus_1_ifcs_1_rspBack$ENQ,
       bus_1_ifcs_1_rspBack$FULL_N;

  // ports of submodule bus_1_ifcs_2_routeBack
  wire [1 : 0] bus_1_ifcs_2_routeBack$D_IN, bus_1_ifcs_2_routeBack$D_OUT;
  wire bus_1_ifcs_2_routeBack$CLR,
       bus_1_ifcs_2_routeBack$DEQ,
       bus_1_ifcs_2_routeBack$EMPTY_N,
       bus_1_ifcs_2_routeBack$ENQ,
       bus_1_ifcs_2_routeBack$FULL_N;

  // ports of submodule bus_1_ifcs_2_rspBack
  wire [72 : 0] bus_1_ifcs_2_rspBack$D_IN, bus_1_ifcs_2_rspBack$D_OUT;
  wire bus_1_ifcs_2_rspBack$CLR,
       bus_1_ifcs_2_rspBack$DEQ,
       bus_1_ifcs_2_rspBack$EMPTY_N,
       bus_1_ifcs_2_rspBack$ENQ,
       bus_1_ifcs_2_rspBack$FULL_N;

  // ports of submodule bus_ifcs_0_innerReq
  wire [173 : 0] bus_ifcs_0_innerReq$D_IN, bus_ifcs_0_innerReq$D_OUT;
  wire bus_ifcs_0_innerReq$CLR,
       bus_ifcs_0_innerReq$DEQ,
       bus_ifcs_0_innerReq$EMPTY_N,
       bus_ifcs_0_innerReq$ENQ,
       bus_ifcs_0_innerReq$FULL_N;

  // ports of submodule bus_ifcs_0_innerRoute
  wire [2 : 0] bus_ifcs_0_innerRoute$D_IN, bus_ifcs_0_innerRoute$D_OUT;
  wire bus_ifcs_0_innerRoute$CLR,
       bus_ifcs_0_innerRoute$DEQ,
       bus_ifcs_0_innerRoute$EMPTY_N,
       bus_ifcs_0_innerRoute$ENQ,
       bus_ifcs_0_innerRoute$FULL_N;

  // ports of submodule bus_ifcs_0_noRouteRsp
  wire [7 : 0] bus_ifcs_0_noRouteRsp$D_IN, bus_ifcs_0_noRouteRsp$D_OUT;
  wire bus_ifcs_0_noRouteRsp$CLR,
       bus_ifcs_0_noRouteRsp$DEQ,
       bus_ifcs_0_noRouteRsp$EMPTY_N,
       bus_ifcs_0_noRouteRsp$ENQ,
       bus_ifcs_0_noRouteRsp$FULL_N;

  // ports of submodule bus_ifcs_0_routeBack
  wire [1 : 0] bus_ifcs_0_routeBack$D_IN, bus_ifcs_0_routeBack$D_OUT;
  wire bus_ifcs_0_routeBack$CLR,
       bus_ifcs_0_routeBack$DEQ,
       bus_ifcs_0_routeBack$EMPTY_N,
       bus_ifcs_0_routeBack$ENQ,
       bus_ifcs_0_routeBack$FULL_N;

  // ports of submodule bus_ifcs_0_rspBack
  wire [7 : 0] bus_ifcs_0_rspBack$D_IN, bus_ifcs_0_rspBack$D_OUT;
  wire bus_ifcs_0_rspBack$CLR,
       bus_ifcs_0_rspBack$DEQ,
       bus_ifcs_0_rspBack$EMPTY_N,
       bus_ifcs_0_rspBack$ENQ,
       bus_ifcs_0_rspBack$FULL_N;

  // ports of submodule bus_ifcs_1_innerReq
  wire [173 : 0] bus_ifcs_1_innerReq$D_IN, bus_ifcs_1_innerReq$D_OUT;
  wire bus_ifcs_1_innerReq$CLR,
       bus_ifcs_1_innerReq$DEQ,
       bus_ifcs_1_innerReq$EMPTY_N,
       bus_ifcs_1_innerReq$ENQ,
       bus_ifcs_1_innerReq$FULL_N;

  // ports of submodule bus_ifcs_1_innerRoute
  wire [2 : 0] bus_ifcs_1_innerRoute$D_IN, bus_ifcs_1_innerRoute$D_OUT;
  wire bus_ifcs_1_innerRoute$CLR,
       bus_ifcs_1_innerRoute$DEQ,
       bus_ifcs_1_innerRoute$EMPTY_N,
       bus_ifcs_1_innerRoute$ENQ,
       bus_ifcs_1_innerRoute$FULL_N;

  // ports of submodule bus_ifcs_1_noRouteRsp
  wire [7 : 0] bus_ifcs_1_noRouteRsp$D_IN, bus_ifcs_1_noRouteRsp$D_OUT;
  wire bus_ifcs_1_noRouteRsp$CLR,
       bus_ifcs_1_noRouteRsp$DEQ,
       bus_ifcs_1_noRouteRsp$EMPTY_N,
       bus_ifcs_1_noRouteRsp$ENQ,
       bus_ifcs_1_noRouteRsp$FULL_N;

  // ports of submodule bus_ifcs_1_routeBack
  wire [1 : 0] bus_ifcs_1_routeBack$D_IN, bus_ifcs_1_routeBack$D_OUT;
  wire bus_ifcs_1_routeBack$CLR,
       bus_ifcs_1_routeBack$DEQ,
       bus_ifcs_1_routeBack$EMPTY_N,
       bus_ifcs_1_routeBack$ENQ,
       bus_ifcs_1_routeBack$FULL_N;

  // ports of submodule bus_ifcs_1_rspBack
  wire [7 : 0] bus_ifcs_1_rspBack$D_IN, bus_ifcs_1_rspBack$D_OUT;
  wire bus_ifcs_1_rspBack$CLR,
       bus_ifcs_1_rspBack$DEQ,
       bus_ifcs_1_rspBack$EMPTY_N,
       bus_ifcs_1_rspBack$ENQ,
       bus_ifcs_1_rspBack$FULL_N;

  // ports of submodule bus_ifcs_2_routeBack
  wire [1 : 0] bus_ifcs_2_routeBack$D_IN, bus_ifcs_2_routeBack$D_OUT;
  wire bus_ifcs_2_routeBack$CLR,
       bus_ifcs_2_routeBack$DEQ,
       bus_ifcs_2_routeBack$EMPTY_N,
       bus_ifcs_2_routeBack$ENQ,
       bus_ifcs_2_routeBack$FULL_N;

  // ports of submodule bus_ifcs_2_rspBack
  wire [7 : 0] bus_ifcs_2_rspBack$D_IN, bus_ifcs_2_rspBack$D_OUT;
  wire bus_ifcs_2_rspBack$CLR,
       bus_ifcs_2_rspBack$DEQ,
       bus_ifcs_2_rspBack$EMPTY_N,
       bus_ifcs_2_rspBack$ENQ,
       bus_ifcs_2_rspBack$FULL_N;

  // ports of submodule bus_msNoSynth_0_b_buffer_ff
  wire [7 : 0] bus_msNoSynth_0_b_buffer_ff$D_IN,
	       bus_msNoSynth_0_b_buffer_ff$D_OUT;
  wire bus_msNoSynth_0_b_buffer_ff$CLR,
       bus_msNoSynth_0_b_buffer_ff$DEQ,
       bus_msNoSynth_0_b_buffer_ff$EMPTY_N,
       bus_msNoSynth_0_b_buffer_ff$ENQ,
       bus_msNoSynth_0_b_buffer_ff$FULL_N;

  // ports of submodule bus_msNoSynth_0_b_buffer_firstValid
  wire bus_msNoSynth_0_b_buffer_firstValid$D_IN,
       bus_msNoSynth_0_b_buffer_firstValid$EN,
       bus_msNoSynth_0_b_buffer_firstValid$Q_OUT;

  // ports of submodule bus_msNoSynth_0_r_buffer_ff
  wire [72 : 0] bus_msNoSynth_0_r_buffer_ff$D_IN,
		bus_msNoSynth_0_r_buffer_ff$D_OUT;
  wire bus_msNoSynth_0_r_buffer_ff$CLR,
       bus_msNoSynth_0_r_buffer_ff$DEQ,
       bus_msNoSynth_0_r_buffer_ff$EMPTY_N,
       bus_msNoSynth_0_r_buffer_ff$ENQ,
       bus_msNoSynth_0_r_buffer_ff$FULL_N;

  // ports of submodule bus_msNoSynth_0_r_buffer_firstValid
  wire bus_msNoSynth_0_r_buffer_firstValid$D_IN,
       bus_msNoSynth_0_r_buffer_firstValid$EN,
       bus_msNoSynth_0_r_buffer_firstValid$Q_OUT;

  // ports of submodule bus_msNoSynth_1_b_buffer_ff
  wire [7 : 0] bus_msNoSynth_1_b_buffer_ff$D_IN,
	       bus_msNoSynth_1_b_buffer_ff$D_OUT;
  wire bus_msNoSynth_1_b_buffer_ff$CLR,
       bus_msNoSynth_1_b_buffer_ff$DEQ,
       bus_msNoSynth_1_b_buffer_ff$EMPTY_N,
       bus_msNoSynth_1_b_buffer_ff$ENQ,
       bus_msNoSynth_1_b_buffer_ff$FULL_N;

  // ports of submodule bus_msNoSynth_1_b_buffer_firstValid
  wire bus_msNoSynth_1_b_buffer_firstValid$D_IN,
       bus_msNoSynth_1_b_buffer_firstValid$EN,
       bus_msNoSynth_1_b_buffer_firstValid$Q_OUT;

  // ports of submodule bus_msNoSynth_1_r_buffer_ff
  wire [72 : 0] bus_msNoSynth_1_r_buffer_ff$D_IN,
		bus_msNoSynth_1_r_buffer_ff$D_OUT;
  wire bus_msNoSynth_1_r_buffer_ff$CLR,
       bus_msNoSynth_1_r_buffer_ff$DEQ,
       bus_msNoSynth_1_r_buffer_ff$EMPTY_N,
       bus_msNoSynth_1_r_buffer_ff$ENQ,
       bus_msNoSynth_1_r_buffer_ff$FULL_N;

  // ports of submodule bus_msNoSynth_1_r_buffer_firstValid
  wire bus_msNoSynth_1_r_buffer_firstValid$D_IN,
       bus_msNoSynth_1_r_buffer_firstValid$EN,
       bus_msNoSynth_1_r_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_0_ar_buffer_ff
  wire [99 : 0] bus_ssNoSynth_0_ar_buffer_ff$D_IN,
		bus_ssNoSynth_0_ar_buffer_ff$D_OUT;
  wire bus_ssNoSynth_0_ar_buffer_ff$CLR,
       bus_ssNoSynth_0_ar_buffer_ff$DEQ,
       bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N,
       bus_ssNoSynth_0_ar_buffer_ff$ENQ,
       bus_ssNoSynth_0_ar_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_0_ar_buffer_firstValid
  wire bus_ssNoSynth_0_ar_buffer_firstValid$D_IN,
       bus_ssNoSynth_0_ar_buffer_firstValid$EN,
       bus_ssNoSynth_0_ar_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_0_aw_buffer_ff
  wire [99 : 0] bus_ssNoSynth_0_aw_buffer_ff$D_IN,
		bus_ssNoSynth_0_aw_buffer_ff$D_OUT;
  wire bus_ssNoSynth_0_aw_buffer_ff$CLR,
       bus_ssNoSynth_0_aw_buffer_ff$DEQ,
       bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N,
       bus_ssNoSynth_0_aw_buffer_ff$ENQ,
       bus_ssNoSynth_0_aw_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_0_aw_buffer_firstValid
  wire bus_ssNoSynth_0_aw_buffer_firstValid$D_IN,
       bus_ssNoSynth_0_aw_buffer_firstValid$EN,
       bus_ssNoSynth_0_aw_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_0_w_buffer_ff
  wire [72 : 0] bus_ssNoSynth_0_w_buffer_ff$D_IN,
		bus_ssNoSynth_0_w_buffer_ff$D_OUT;
  wire bus_ssNoSynth_0_w_buffer_ff$CLR,
       bus_ssNoSynth_0_w_buffer_ff$DEQ,
       bus_ssNoSynth_0_w_buffer_ff$EMPTY_N,
       bus_ssNoSynth_0_w_buffer_ff$ENQ,
       bus_ssNoSynth_0_w_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_0_w_buffer_firstValid
  wire bus_ssNoSynth_0_w_buffer_firstValid$D_IN,
       bus_ssNoSynth_0_w_buffer_firstValid$EN,
       bus_ssNoSynth_0_w_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_1_ar_buffer_ff
  wire [99 : 0] bus_ssNoSynth_1_ar_buffer_ff$D_IN,
		bus_ssNoSynth_1_ar_buffer_ff$D_OUT;
  wire bus_ssNoSynth_1_ar_buffer_ff$CLR,
       bus_ssNoSynth_1_ar_buffer_ff$DEQ,
       bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N,
       bus_ssNoSynth_1_ar_buffer_ff$ENQ,
       bus_ssNoSynth_1_ar_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_1_ar_buffer_firstValid
  wire bus_ssNoSynth_1_ar_buffer_firstValid$D_IN,
       bus_ssNoSynth_1_ar_buffer_firstValid$EN,
       bus_ssNoSynth_1_ar_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_1_aw_buffer_ff
  wire [99 : 0] bus_ssNoSynth_1_aw_buffer_ff$D_IN,
		bus_ssNoSynth_1_aw_buffer_ff$D_OUT;
  wire bus_ssNoSynth_1_aw_buffer_ff$CLR,
       bus_ssNoSynth_1_aw_buffer_ff$DEQ,
       bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N,
       bus_ssNoSynth_1_aw_buffer_ff$ENQ,
       bus_ssNoSynth_1_aw_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_1_aw_buffer_firstValid
  wire bus_ssNoSynth_1_aw_buffer_firstValid$D_IN,
       bus_ssNoSynth_1_aw_buffer_firstValid$EN,
       bus_ssNoSynth_1_aw_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_1_w_buffer_ff
  wire [72 : 0] bus_ssNoSynth_1_w_buffer_ff$D_IN,
		bus_ssNoSynth_1_w_buffer_ff$D_OUT;
  wire bus_ssNoSynth_1_w_buffer_ff$CLR,
       bus_ssNoSynth_1_w_buffer_ff$DEQ,
       bus_ssNoSynth_1_w_buffer_ff$EMPTY_N,
       bus_ssNoSynth_1_w_buffer_ff$ENQ,
       bus_ssNoSynth_1_w_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_1_w_buffer_firstValid
  wire bus_ssNoSynth_1_w_buffer_firstValid$D_IN,
       bus_ssNoSynth_1_w_buffer_firstValid$EN,
       bus_ssNoSynth_1_w_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_2_ar_buffer_ff
  wire [99 : 0] bus_ssNoSynth_2_ar_buffer_ff$D_IN,
		bus_ssNoSynth_2_ar_buffer_ff$D_OUT;
  wire bus_ssNoSynth_2_ar_buffer_ff$CLR,
       bus_ssNoSynth_2_ar_buffer_ff$DEQ,
       bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N,
       bus_ssNoSynth_2_ar_buffer_ff$ENQ,
       bus_ssNoSynth_2_ar_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_2_ar_buffer_firstValid
  wire bus_ssNoSynth_2_ar_buffer_firstValid$D_IN,
       bus_ssNoSynth_2_ar_buffer_firstValid$EN,
       bus_ssNoSynth_2_ar_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_2_aw_buffer_ff
  wire [99 : 0] bus_ssNoSynth_2_aw_buffer_ff$D_IN,
		bus_ssNoSynth_2_aw_buffer_ff$D_OUT;
  wire bus_ssNoSynth_2_aw_buffer_ff$CLR,
       bus_ssNoSynth_2_aw_buffer_ff$DEQ,
       bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N,
       bus_ssNoSynth_2_aw_buffer_ff$ENQ,
       bus_ssNoSynth_2_aw_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_2_aw_buffer_firstValid
  wire bus_ssNoSynth_2_aw_buffer_firstValid$D_IN,
       bus_ssNoSynth_2_aw_buffer_firstValid$EN,
       bus_ssNoSynth_2_aw_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_2_w_buffer_ff
  wire [72 : 0] bus_ssNoSynth_2_w_buffer_ff$D_IN,
		bus_ssNoSynth_2_w_buffer_ff$D_OUT;
  wire bus_ssNoSynth_2_w_buffer_ff$CLR,
       bus_ssNoSynth_2_w_buffer_ff$DEQ,
       bus_ssNoSynth_2_w_buffer_ff$EMPTY_N,
       bus_ssNoSynth_2_w_buffer_ff$ENQ,
       bus_ssNoSynth_2_w_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_2_w_buffer_firstValid
  wire bus_ssNoSynth_2_w_buffer_firstValid$D_IN,
       bus_ssNoSynth_2_w_buffer_firstValid$EN,
       bus_ssNoSynth_2_w_buffer_firstValid$Q_OUT;

  // ports of submodule corew
  wire [63 : 0] corew$cpu_dmem_master_araddr,
		corew$cpu_dmem_master_awaddr,
		corew$cpu_dmem_master_rdata,
		corew$cpu_dmem_master_wdata,
		corew$cpu_imem_master_araddr,
		corew$cpu_imem_master_awaddr,
		corew$cpu_imem_master_rdata,
		corew$cpu_imem_master_wdata,
		corew$set_verbosity_logdelay,
		corew$start_fromhost_addr,
		corew$start_tohost_addr;
  wire [7 : 0] corew$cpu_dmem_master_arlen,
	       corew$cpu_dmem_master_awlen,
	       corew$cpu_dmem_master_wstrb,
	       corew$cpu_imem_master_arlen,
	       corew$cpu_imem_master_awlen,
	       corew$cpu_imem_master_wstrb;
  wire [5 : 0] corew$cpu_dmem_master_arid,
	       corew$cpu_dmem_master_awid,
	       corew$cpu_dmem_master_bid,
	       corew$cpu_dmem_master_rid,
	       corew$cpu_imem_master_arid,
	       corew$cpu_imem_master_awid,
	       corew$cpu_imem_master_bid,
	       corew$cpu_imem_master_rid;
  wire [3 : 0] corew$cpu_dmem_master_arcache,
	       corew$cpu_dmem_master_arqos,
	       corew$cpu_dmem_master_arregion,
	       corew$cpu_dmem_master_awcache,
	       corew$cpu_dmem_master_awqos,
	       corew$cpu_dmem_master_awregion,
	       corew$cpu_imem_master_arcache,
	       corew$cpu_imem_master_arqos,
	       corew$cpu_imem_master_arregion,
	       corew$cpu_imem_master_awcache,
	       corew$cpu_imem_master_awqos,
	       corew$cpu_imem_master_awregion,
	       corew$set_verbosity_verbosity;
  wire [2 : 0] corew$cpu_dmem_master_arprot,
	       corew$cpu_dmem_master_arsize,
	       corew$cpu_dmem_master_awprot,
	       corew$cpu_dmem_master_awsize,
	       corew$cpu_imem_master_arprot,
	       corew$cpu_imem_master_arsize,
	       corew$cpu_imem_master_awprot,
	       corew$cpu_imem_master_awsize;
  wire [1 : 0] corew$cpu_dmem_master_arburst,
	       corew$cpu_dmem_master_awburst,
	       corew$cpu_dmem_master_bresp,
	       corew$cpu_dmem_master_rresp,
	       corew$cpu_imem_master_arburst,
	       corew$cpu_imem_master_awburst,
	       corew$cpu_imem_master_bresp,
	       corew$cpu_imem_master_rresp;
  wire corew$EN_set_verbosity,
       corew$EN_start,
       corew$RDY_start,
       corew$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,
       corew$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,
       corew$cpu_dmem_master_arlock,
       corew$cpu_dmem_master_arready,
       corew$cpu_dmem_master_arvalid,
       corew$cpu_dmem_master_awlock,
       corew$cpu_dmem_master_awready,
       corew$cpu_dmem_master_awvalid,
       corew$cpu_dmem_master_bready,
       corew$cpu_dmem_master_bvalid,
       corew$cpu_dmem_master_rlast,
       corew$cpu_dmem_master_rready,
       corew$cpu_dmem_master_rvalid,
       corew$cpu_dmem_master_wlast,
       corew$cpu_dmem_master_wready,
       corew$cpu_dmem_master_wvalid,
       corew$cpu_imem_master_arlock,
       corew$cpu_imem_master_arready,
       corew$cpu_imem_master_arvalid,
       corew$cpu_imem_master_awlock,
       corew$cpu_imem_master_awready,
       corew$cpu_imem_master_awvalid,
       corew$cpu_imem_master_bready,
       corew$cpu_imem_master_bvalid,
       corew$cpu_imem_master_rlast,
       corew$cpu_imem_master_rready,
       corew$cpu_imem_master_rvalid,
       corew$cpu_imem_master_wlast,
       corew$cpu_imem_master_wready,
       corew$cpu_imem_master_wvalid,
       corew$nmi_req_set_not_clear;

  // ports of submodule mem0_controller
  wire [352 : 0] mem0_controller$to_raw_mem_request_get;
  wire [255 : 0] mem0_controller$to_raw_mem_response_put;
  wire [63 : 0] mem0_controller$set_addr_map_addr_base,
		mem0_controller$set_addr_map_addr_lim,
		mem0_controller$set_watch_tohost_tohost_addr,
		mem0_controller$slave_araddr,
		mem0_controller$slave_awaddr,
		mem0_controller$slave_rdata,
		mem0_controller$slave_wdata;
  wire [7 : 0] mem0_controller$slave_arlen,
	       mem0_controller$slave_awlen,
	       mem0_controller$slave_wstrb,
	       mem0_controller$status;
  wire [6 : 0] mem0_controller$slave_arid,
	       mem0_controller$slave_awid,
	       mem0_controller$slave_bid,
	       mem0_controller$slave_rid;
  wire [3 : 0] mem0_controller$slave_arcache,
	       mem0_controller$slave_arqos,
	       mem0_controller$slave_arregion,
	       mem0_controller$slave_awcache,
	       mem0_controller$slave_awqos,
	       mem0_controller$slave_awregion;
  wire [2 : 0] mem0_controller$slave_arprot,
	       mem0_controller$slave_arsize,
	       mem0_controller$slave_awprot,
	       mem0_controller$slave_awsize;
  wire [1 : 0] mem0_controller$slave_arburst,
	       mem0_controller$slave_awburst,
	       mem0_controller$slave_bresp,
	       mem0_controller$slave_rresp;
  wire mem0_controller$EN_server_reset_request_put,
       mem0_controller$EN_server_reset_response_get,
       mem0_controller$EN_set_addr_map,
       mem0_controller$EN_set_watch_tohost,
       mem0_controller$EN_to_raw_mem_request_get,
       mem0_controller$EN_to_raw_mem_response_put,
       mem0_controller$RDY_server_reset_request_put,
       mem0_controller$RDY_server_reset_response_get,
       mem0_controller$RDY_set_addr_map,
       mem0_controller$RDY_to_raw_mem_request_get,
       mem0_controller$RDY_to_raw_mem_response_put,
       mem0_controller$set_watch_tohost_watch_tohost,
       mem0_controller$slave_arlock,
       mem0_controller$slave_arready,
       mem0_controller$slave_arvalid,
       mem0_controller$slave_awlock,
       mem0_controller$slave_awready,
       mem0_controller$slave_awvalid,
       mem0_controller$slave_bready,
       mem0_controller$slave_bvalid,
       mem0_controller$slave_rlast,
       mem0_controller$slave_rready,
       mem0_controller$slave_ruser,
       mem0_controller$slave_rvalid,
       mem0_controller$slave_wlast,
       mem0_controller$slave_wready,
       mem0_controller$slave_wuser,
       mem0_controller$slave_wvalid;

  // ports of submodule mem0_controller_axi4_deburster_countWriteRspFF
  wire [7 : 0] mem0_controller_axi4_deburster_countWriteRspFF$D_IN,
	       mem0_controller_axi4_deburster_countWriteRspFF$D_OUT;
  wire mem0_controller_axi4_deburster_countWriteRspFF$CLR,
       mem0_controller_axi4_deburster_countWriteRspFF$DEQ,
       mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N,
       mem0_controller_axi4_deburster_countWriteRspFF$ENQ,
       mem0_controller_axi4_deburster_countWriteRspFF$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_arff
  wire [99 : 0] mem0_controller_axi4_deburster_inShim_arff$D_IN,
		mem0_controller_axi4_deburster_inShim_arff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_arff$CLR,
       mem0_controller_axi4_deburster_inShim_arff$DEQ,
       mem0_controller_axi4_deburster_inShim_arff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_arff$ENQ,
       mem0_controller_axi4_deburster_inShim_arff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_awff
  wire [99 : 0] mem0_controller_axi4_deburster_inShim_awff$D_IN,
		mem0_controller_axi4_deburster_inShim_awff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_awff$CLR,
       mem0_controller_axi4_deburster_inShim_awff$DEQ,
       mem0_controller_axi4_deburster_inShim_awff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_awff$ENQ,
       mem0_controller_axi4_deburster_inShim_awff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_bff
  wire [8 : 0] mem0_controller_axi4_deburster_inShim_bff$D_IN,
	       mem0_controller_axi4_deburster_inShim_bff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_bff$CLR,
       mem0_controller_axi4_deburster_inShim_bff$DEQ,
       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_bff$ENQ,
       mem0_controller_axi4_deburster_inShim_bff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_rff
  wire [74 : 0] mem0_controller_axi4_deburster_inShim_rff$D_IN,
		mem0_controller_axi4_deburster_inShim_rff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_rff$CLR,
       mem0_controller_axi4_deburster_inShim_rff$DEQ,
       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_rff$ENQ,
       mem0_controller_axi4_deburster_inShim_rff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_wff
  wire [73 : 0] mem0_controller_axi4_deburster_inShim_wff$D_IN,
		mem0_controller_axi4_deburster_inShim_wff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_wff$CLR,
       mem0_controller_axi4_deburster_inShim_wff$DEQ,
       mem0_controller_axi4_deburster_inShim_wff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_wff$ENQ,
       mem0_controller_axi4_deburster_inShim_wff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_lastReadRspFF
  wire mem0_controller_axi4_deburster_lastReadRspFF$CLR,
       mem0_controller_axi4_deburster_lastReadRspFF$DEQ,
       mem0_controller_axi4_deburster_lastReadRspFF$D_IN,
       mem0_controller_axi4_deburster_lastReadRspFF$D_OUT,
       mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N,
       mem0_controller_axi4_deburster_lastReadRspFF$ENQ,
       mem0_controller_axi4_deburster_lastReadRspFF$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_arff
  wire [99 : 0] mem0_controller_axi4_deburster_outShim_arff$D_IN,
		mem0_controller_axi4_deburster_outShim_arff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_arff$CLR,
       mem0_controller_axi4_deburster_outShim_arff$DEQ,
       mem0_controller_axi4_deburster_outShim_arff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_arff$ENQ,
       mem0_controller_axi4_deburster_outShim_arff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_awff
  wire [99 : 0] mem0_controller_axi4_deburster_outShim_awff$D_IN,
		mem0_controller_axi4_deburster_outShim_awff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_awff$CLR,
       mem0_controller_axi4_deburster_outShim_awff$DEQ,
       mem0_controller_axi4_deburster_outShim_awff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_awff$ENQ,
       mem0_controller_axi4_deburster_outShim_awff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_bff
  wire [8 : 0] mem0_controller_axi4_deburster_outShim_bff$D_IN,
	       mem0_controller_axi4_deburster_outShim_bff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_bff$CLR,
       mem0_controller_axi4_deburster_outShim_bff$DEQ,
       mem0_controller_axi4_deburster_outShim_bff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_bff$ENQ,
       mem0_controller_axi4_deburster_outShim_bff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_rff
  wire [74 : 0] mem0_controller_axi4_deburster_outShim_rff$D_IN,
		mem0_controller_axi4_deburster_outShim_rff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_rff$CLR,
       mem0_controller_axi4_deburster_outShim_rff$DEQ,
       mem0_controller_axi4_deburster_outShim_rff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_rff$ENQ,
       mem0_controller_axi4_deburster_outShim_rff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_wff
  wire [73 : 0] mem0_controller_axi4_deburster_outShim_wff$D_IN,
		mem0_controller_axi4_deburster_outShim_wff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_wff$CLR,
       mem0_controller_axi4_deburster_outShim_wff$DEQ,
       mem0_controller_axi4_deburster_outShim_wff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_wff$ENQ,
       mem0_controller_axi4_deburster_outShim_wff$FULL_N;

  // ports of submodule mem_ar_buffer_ff
  wire [99 : 0] mem_ar_buffer_ff$D_IN, mem_ar_buffer_ff$D_OUT;
  wire mem_ar_buffer_ff$CLR,
       mem_ar_buffer_ff$DEQ,
       mem_ar_buffer_ff$EMPTY_N,
       mem_ar_buffer_ff$ENQ,
       mem_ar_buffer_ff$FULL_N;

  // ports of submodule mem_ar_buffer_firstValid
  wire mem_ar_buffer_firstValid$D_IN,
       mem_ar_buffer_firstValid$EN,
       mem_ar_buffer_firstValid$Q_OUT;

  // ports of submodule mem_aw_buffer_ff
  wire [99 : 0] mem_aw_buffer_ff$D_IN, mem_aw_buffer_ff$D_OUT;
  wire mem_aw_buffer_ff$CLR,
       mem_aw_buffer_ff$DEQ,
       mem_aw_buffer_ff$EMPTY_N,
       mem_aw_buffer_ff$ENQ,
       mem_aw_buffer_ff$FULL_N;

  // ports of submodule mem_aw_buffer_firstValid
  wire mem_aw_buffer_firstValid$D_IN,
       mem_aw_buffer_firstValid$EN,
       mem_aw_buffer_firstValid$Q_OUT;

  // ports of submodule mem_w_buffer_ff
  wire [73 : 0] mem_w_buffer_ff$D_IN, mem_w_buffer_ff$D_OUT;
  wire mem_w_buffer_ff$CLR,
       mem_w_buffer_ff$DEQ,
       mem_w_buffer_ff$EMPTY_N,
       mem_w_buffer_ff$ENQ,
       mem_w_buffer_ff$FULL_N;

  // ports of submodule mem_w_buffer_firstValid
  wire mem_w_buffer_firstValid$D_IN,
       mem_w_buffer_firstValid$EN,
       mem_w_buffer_firstValid$Q_OUT;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_boot_rom_addr_range,
		 soc_map$m_mem0_controller_addr_range,
		 soc_map$m_uart0_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // ports of submodule uart0
  wire [63 : 0] uart0$set_addr_map_addr_base,
		uart0$set_addr_map_addr_lim,
		uart0$slave_araddr,
		uart0$slave_awaddr,
		uart0$slave_rdata,
		uart0$slave_wdata;
  wire [7 : 0] uart0$get_to_console_get,
	       uart0$put_from_console_put,
	       uart0$slave_arlen,
	       uart0$slave_awlen,
	       uart0$slave_wstrb;
  wire [6 : 0] uart0$slave_arid,
	       uart0$slave_awid,
	       uart0$slave_bid,
	       uart0$slave_rid;
  wire [3 : 0] uart0$slave_arcache,
	       uart0$slave_arqos,
	       uart0$slave_arregion,
	       uart0$slave_awcache,
	       uart0$slave_awqos,
	       uart0$slave_awregion;
  wire [2 : 0] uart0$slave_arprot,
	       uart0$slave_arsize,
	       uart0$slave_awprot,
	       uart0$slave_awsize;
  wire [1 : 0] uart0$slave_arburst,
	       uart0$slave_awburst,
	       uart0$slave_bresp,
	       uart0$slave_rresp;
  wire uart0$EN_get_to_console_get,
       uart0$EN_put_from_console_put,
       uart0$EN_server_reset_request_put,
       uart0$EN_server_reset_response_get,
       uart0$EN_set_addr_map,
       uart0$RDY_get_to_console_get,
       uart0$RDY_put_from_console_put,
       uart0$RDY_server_reset_request_put,
       uart0$RDY_server_reset_response_get,
       uart0$intr,
       uart0$slave_arlock,
       uart0$slave_arready,
       uart0$slave_arvalid,
       uart0$slave_awlock,
       uart0$slave_awready,
       uart0$slave_awvalid,
       uart0$slave_bready,
       uart0$slave_bvalid,
       uart0$slave_rlast,
       uart0$slave_rready,
       uart0$slave_rvalid,
       uart0$slave_wlast,
       uart0$slave_wready,
       uart0$slave_wuser,
       uart0$slave_wvalid;

  // ports of submodule uart0_slave_ar_buffer_ff
  wire [99 : 0] uart0_slave_ar_buffer_ff$D_IN, uart0_slave_ar_buffer_ff$D_OUT;
  wire uart0_slave_ar_buffer_ff$CLR,
       uart0_slave_ar_buffer_ff$DEQ,
       uart0_slave_ar_buffer_ff$EMPTY_N,
       uart0_slave_ar_buffer_ff$ENQ,
       uart0_slave_ar_buffer_ff$FULL_N;

  // ports of submodule uart0_slave_ar_buffer_firstValid
  wire uart0_slave_ar_buffer_firstValid$D_IN,
       uart0_slave_ar_buffer_firstValid$EN,
       uart0_slave_ar_buffer_firstValid$Q_OUT;

  // ports of submodule uart0_slave_aw_buffer_ff
  wire [99 : 0] uart0_slave_aw_buffer_ff$D_IN, uart0_slave_aw_buffer_ff$D_OUT;
  wire uart0_slave_aw_buffer_ff$CLR,
       uart0_slave_aw_buffer_ff$DEQ,
       uart0_slave_aw_buffer_ff$EMPTY_N,
       uart0_slave_aw_buffer_ff$ENQ,
       uart0_slave_aw_buffer_ff$FULL_N;

  // ports of submodule uart0_slave_aw_buffer_firstValid
  wire uart0_slave_aw_buffer_firstValid$D_IN,
       uart0_slave_aw_buffer_firstValid$EN,
       uart0_slave_aw_buffer_firstValid$Q_OUT;

  // ports of submodule uart0_slave_w_buffer_ff
  wire [73 : 0] uart0_slave_w_buffer_ff$D_IN, uart0_slave_w_buffer_ff$D_OUT;
  wire uart0_slave_w_buffer_ff$CLR,
       uart0_slave_w_buffer_ff$DEQ,
       uart0_slave_w_buffer_ff$EMPTY_N,
       uart0_slave_w_buffer_ff$ENQ,
       uart0_slave_w_buffer_ff$FULL_N;

  // ports of submodule uart0_slave_w_buffer_firstValid
  wire uart0_slave_w_buffer_firstValid$D_IN,
       uart0_slave_w_buffer_firstValid$EN,
       uart0_slave_w_buffer_firstValid$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req,
       CAN_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW,
       CAN_FIRE_RL_br_ar_buffer_dequeue,
       CAN_FIRE_RL_br_ar_buffer_enqueue,
       CAN_FIRE_RL_br_ar_dropFlit,
       CAN_FIRE_RL_br_ar_forwardFlit,
       CAN_FIRE_RL_br_aw_buffer_dequeue,
       CAN_FIRE_RL_br_aw_buffer_enqueue,
       CAN_FIRE_RL_br_aw_dropFlit,
       CAN_FIRE_RL_br_aw_forwardFlit,
       CAN_FIRE_RL_br_b_forwardReady,
       CAN_FIRE_RL_br_r_forwardReady,
       CAN_FIRE_RL_br_w_buffer_dequeue,
       CAN_FIRE_RL_br_w_buffer_enqueue,
       CAN_FIRE_RL_br_w_dropFlit,
       CAN_FIRE_RL_br_w_forwardFlit,
       CAN_FIRE_RL_bus_1_1_arbitrate,
       CAN_FIRE_RL_bus_1_1_burst,
       CAN_FIRE_RL_bus_1_1_burst_1,
       CAN_FIRE_RL_bus_1_1_burst_2,
       CAN_FIRE_RL_bus_1_1_checkSinkReady,
       CAN_FIRE_RL_bus_1_1_checkSinkReady_1,
       CAN_FIRE_RL_bus_1_1_craftReq,
       CAN_FIRE_RL_bus_1_1_craftReq_1,
       CAN_FIRE_RL_bus_1_1_craftReq_2,
       CAN_FIRE_RL_bus_1_1_sink_selected,
       CAN_FIRE_RL_bus_1_1_sink_selected_1,
       CAN_FIRE_RL_bus_1_1_source_selected,
       CAN_FIRE_RL_bus_1_1_source_selected_1,
       CAN_FIRE_RL_bus_1_1_source_selected_2,
       CAN_FIRE_RL_bus_1_arbitrate,
       CAN_FIRE_RL_bus_1_arbitrate_1,
       CAN_FIRE_RL_bus_1_burst,
       CAN_FIRE_RL_bus_1_burst_1,
       CAN_FIRE_RL_bus_1_burst_2,
       CAN_FIRE_RL_bus_1_burst_3,
       CAN_FIRE_RL_bus_1_burst_4,
       CAN_FIRE_RL_bus_1_checkSinkReady,
       CAN_FIRE_RL_bus_1_checkSinkReady_1,
       CAN_FIRE_RL_bus_1_checkSinkReady_2,
       CAN_FIRE_RL_bus_1_checkSinkReady_3,
       CAN_FIRE_RL_bus_1_checkSinkReady_4,
       CAN_FIRE_RL_bus_1_craftReq,
       CAN_FIRE_RL_bus_1_craftReq_1,
       CAN_FIRE_RL_bus_1_craftReq_2,
       CAN_FIRE_RL_bus_1_craftReq_3,
       CAN_FIRE_RL_bus_1_craftReq_4,
       CAN_FIRE_RL_bus_1_ifcs_0_drainFlits,
       CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse,
       CAN_FIRE_RL_bus_1_ifcs_0_firstFlit,
       CAN_FIRE_RL_bus_1_ifcs_0_firstFlit_1,
       CAN_FIRE_RL_bus_1_ifcs_0_followFlits,
       CAN_FIRE_RL_bus_1_ifcs_0_followFlits_1,
       CAN_FIRE_RL_bus_1_ifcs_0_forwardRsp,
       CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit,
       CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp,
       CAN_FIRE_RL_bus_1_ifcs_1_drainFlits,
       CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse,
       CAN_FIRE_RL_bus_1_ifcs_1_firstFlit,
       CAN_FIRE_RL_bus_1_ifcs_1_firstFlit_1,
       CAN_FIRE_RL_bus_1_ifcs_1_followFlits,
       CAN_FIRE_RL_bus_1_ifcs_1_followFlits_1,
       CAN_FIRE_RL_bus_1_ifcs_1_forwardRsp,
       CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit,
       CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp,
       CAN_FIRE_RL_bus_1_ifcs_2_firstFlit,
       CAN_FIRE_RL_bus_1_ifcs_2_followFlits,
       CAN_FIRE_RL_bus_1_sink_selected,
       CAN_FIRE_RL_bus_1_sink_selected_1,
       CAN_FIRE_RL_bus_1_sink_selected_2,
       CAN_FIRE_RL_bus_1_sink_selected_3,
       CAN_FIRE_RL_bus_1_sink_selected_4,
       CAN_FIRE_RL_bus_1_source_selected,
       CAN_FIRE_RL_bus_1_source_selected_1,
       CAN_FIRE_RL_bus_1_source_selected_2,
       CAN_FIRE_RL_bus_1_source_selected_3,
       CAN_FIRE_RL_bus_1_source_selected_4,
       CAN_FIRE_RL_bus_arbitrate,
       CAN_FIRE_RL_bus_burst,
       CAN_FIRE_RL_bus_burst_1,
       CAN_FIRE_RL_bus_checkSinkReady,
       CAN_FIRE_RL_bus_checkSinkReady_1,
       CAN_FIRE_RL_bus_checkSinkReady_2,
       CAN_FIRE_RL_bus_craftReq,
       CAN_FIRE_RL_bus_craftReq_1,
       CAN_FIRE_RL_bus_ifcs_0_drainFlits,
       CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse,
       CAN_FIRE_RL_bus_ifcs_0_firstFlit,
       CAN_FIRE_RL_bus_ifcs_0_firstFlit_1,
       CAN_FIRE_RL_bus_ifcs_0_followFlits,
       CAN_FIRE_RL_bus_ifcs_0_followFlits_1,
       CAN_FIRE_RL_bus_ifcs_0_forwardRsp,
       CAN_FIRE_RL_bus_ifcs_0_nonRoutableFlit,
       CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp,
       CAN_FIRE_RL_bus_ifcs_1_drainFlits,
       CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse,
       CAN_FIRE_RL_bus_ifcs_1_firstFlit,
       CAN_FIRE_RL_bus_ifcs_1_firstFlit_1,
       CAN_FIRE_RL_bus_ifcs_1_followFlits,
       CAN_FIRE_RL_bus_ifcs_1_followFlits_1,
       CAN_FIRE_RL_bus_ifcs_1_forwardRsp,
       CAN_FIRE_RL_bus_ifcs_1_nonRoutableFlit,
       CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp,
       CAN_FIRE_RL_bus_ifcs_2_firstFlit,
       CAN_FIRE_RL_bus_ifcs_2_followFlits,
       CAN_FIRE_RL_bus_merged_0_genFirst,
       CAN_FIRE_RL_bus_merged_0_genOther,
       CAN_FIRE_RL_bus_merged_1_genFirst,
       CAN_FIRE_RL_bus_merged_1_genOther,
       CAN_FIRE_RL_bus_msNoSynth_0_ar_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_0_aw_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue,
       CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue,
       CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit,
       CAN_FIRE_RL_bus_msNoSynth_0_b_forwardFlit,
       CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue,
       CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue,
       CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit,
       CAN_FIRE_RL_bus_msNoSynth_0_r_forwardFlit,
       CAN_FIRE_RL_bus_msNoSynth_0_w_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_1_ar_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_1_aw_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue,
       CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue,
       CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit,
       CAN_FIRE_RL_bus_msNoSynth_1_b_forwardFlit,
       CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue,
       CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue,
       CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit,
       CAN_FIRE_RL_bus_msNoSynth_1_r_forwardFlit,
       CAN_FIRE_RL_bus_msNoSynth_1_w_forwardReady,
       CAN_FIRE_RL_bus_sink_selected,
       CAN_FIRE_RL_bus_sink_selected_1,
       CAN_FIRE_RL_bus_sink_selected_2,
       CAN_FIRE_RL_bus_source_selected,
       CAN_FIRE_RL_bus_source_selected_1,
       CAN_FIRE_RL_bus_split_0_putFirst,
       CAN_FIRE_RL_bus_split_0_putOther,
       CAN_FIRE_RL_bus_split_1_putFirst,
       CAN_FIRE_RL_bus_split_1_putOther,
       CAN_FIRE_RL_bus_split_2_putFirst,
       CAN_FIRE_RL_bus_split_2_putOther,
       CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_b_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_0_r_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_b_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_1_r_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_b_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_2_r_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW,
       CAN_FIRE_RL_mem_ar_buffer_dequeue,
       CAN_FIRE_RL_mem_ar_buffer_enqueue,
       CAN_FIRE_RL_mem_ar_dropFlit,
       CAN_FIRE_RL_mem_ar_forwardFlit,
       CAN_FIRE_RL_mem_aw_buffer_dequeue,
       CAN_FIRE_RL_mem_aw_buffer_enqueue,
       CAN_FIRE_RL_mem_aw_dropFlit,
       CAN_FIRE_RL_mem_aw_forwardFlit,
       CAN_FIRE_RL_mem_b_forwardReady,
       CAN_FIRE_RL_mem_r_forwardReady,
       CAN_FIRE_RL_mem_w_buffer_dequeue,
       CAN_FIRE_RL_mem_w_buffer_enqueue,
       CAN_FIRE_RL_mem_w_dropFlit,
       CAN_FIRE_RL_mem_w_forwardFlit,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionGetPut_5,
       CAN_FIRE_RL_mkConnectionGetPut_6,
       CAN_FIRE_RL_mkConnectionGetPut_7,
       CAN_FIRE_RL_mkConnectionGetPut_8,
       CAN_FIRE_RL_mkConnectionGetPut_9,
       CAN_FIRE_RL_rl_connect_external_interrupt_requests,
       CAN_FIRE_RL_rl_reset_complete_initial,
       CAN_FIRE_RL_rl_reset_start_initial,
       CAN_FIRE_RL_uart0_slave_ar_buffer_dequeue,
       CAN_FIRE_RL_uart0_slave_ar_buffer_enqueue,
       CAN_FIRE_RL_uart0_slave_ar_dropFlit,
       CAN_FIRE_RL_uart0_slave_ar_forwardFlit,
       CAN_FIRE_RL_uart0_slave_aw_buffer_dequeue,
       CAN_FIRE_RL_uart0_slave_aw_buffer_enqueue,
       CAN_FIRE_RL_uart0_slave_aw_dropFlit,
       CAN_FIRE_RL_uart0_slave_aw_forwardFlit,
       CAN_FIRE_RL_uart0_slave_b_forwardReady,
       CAN_FIRE_RL_uart0_slave_r_forwardReady,
       CAN_FIRE_RL_uart0_slave_w_buffer_dequeue,
       CAN_FIRE_RL_uart0_slave_w_buffer_enqueue,
       CAN_FIRE_RL_uart0_slave_w_dropFlit,
       CAN_FIRE_RL_uart0_slave_w_forwardFlit,
       CAN_FIRE_RL_ug_boot_rom_slave_u_ar_doPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_aw_doPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_b_doDrop,
       CAN_FIRE_RL_ug_boot_rom_slave_u_b_setPeek,
       CAN_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_ug_boot_rom_slave_u_r_doDrop,
       CAN_FIRE_RL_ug_boot_rom_slave_u_r_setPeek,
       CAN_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_ug_boot_rom_slave_u_w_doPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut,
       CAN_FIRE_RL_ug_mem0_slave_u_ar_doPut,
       CAN_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_ug_mem0_slave_u_aw_doPut,
       CAN_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_ug_mem0_slave_u_b_doDrop,
       CAN_FIRE_RL_ug_mem0_slave_u_b_setPeek,
       CAN_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_ug_mem0_slave_u_r_doDrop,
       CAN_FIRE_RL_ug_mem0_slave_u_r_setPeek,
       CAN_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_ug_mem0_slave_u_w_doPut,
       CAN_FIRE_RL_ug_mem0_slave_u_w_warnDoPut,
       CAN_FIRE___me_check_13,
       CAN_FIRE___me_check_168,
       CAN_FIRE___me_check_169,
       CAN_FIRE___me_check_170,
       CAN_FIRE___me_check_172,
       CAN_FIRE___me_check_175,
       CAN_FIRE___me_check_176,
       CAN_FIRE___me_check_177,
       CAN_FIRE___me_check_179,
       CAN_FIRE___me_check_182,
       CAN_FIRE___me_check_184,
       CAN_FIRE___me_check_186,
       CAN_FIRE___me_check_194,
       CAN_FIRE___me_check_196,
       CAN_FIRE___me_check_198,
       CAN_FIRE___me_check_207,
       CAN_FIRE___me_check_209,
       CAN_FIRE___me_check_211,
       CAN_FIRE___me_check_213,
       CAN_FIRE___me_check_215,
       CAN_FIRE___me_check_216,
       CAN_FIRE___me_check_217,
       CAN_FIRE___me_check_219,
       CAN_FIRE___me_check_222,
       CAN_FIRE___me_check_223,
       CAN_FIRE___me_check_224,
       CAN_FIRE___me_check_226,
       CAN_FIRE___me_check_229,
       CAN_FIRE___me_check_231,
       CAN_FIRE___me_check_233,
       CAN_FIRE___me_check_241,
       CAN_FIRE___me_check_243,
       CAN_FIRE___me_check_245,
       CAN_FIRE___me_check_254,
       CAN_FIRE___me_check_256,
       CAN_FIRE___me_check_258,
       CAN_FIRE___me_check_260,
       CAN_FIRE___me_check_4,
       CAN_FIRE_get_to_console_get,
       CAN_FIRE_put_from_console_put,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_start,
       CAN_FIRE_to_raw_mem_request_get,
       CAN_FIRE_to_raw_mem_response_put,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req,
       WILL_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW,
       WILL_FIRE_RL_br_ar_buffer_dequeue,
       WILL_FIRE_RL_br_ar_buffer_enqueue,
       WILL_FIRE_RL_br_ar_dropFlit,
       WILL_FIRE_RL_br_ar_forwardFlit,
       WILL_FIRE_RL_br_aw_buffer_dequeue,
       WILL_FIRE_RL_br_aw_buffer_enqueue,
       WILL_FIRE_RL_br_aw_dropFlit,
       WILL_FIRE_RL_br_aw_forwardFlit,
       WILL_FIRE_RL_br_b_forwardReady,
       WILL_FIRE_RL_br_r_forwardReady,
       WILL_FIRE_RL_br_w_buffer_dequeue,
       WILL_FIRE_RL_br_w_buffer_enqueue,
       WILL_FIRE_RL_br_w_dropFlit,
       WILL_FIRE_RL_br_w_forwardFlit,
       WILL_FIRE_RL_bus_1_1_arbitrate,
       WILL_FIRE_RL_bus_1_1_burst,
       WILL_FIRE_RL_bus_1_1_burst_1,
       WILL_FIRE_RL_bus_1_1_burst_2,
       WILL_FIRE_RL_bus_1_1_checkSinkReady,
       WILL_FIRE_RL_bus_1_1_checkSinkReady_1,
       WILL_FIRE_RL_bus_1_1_craftReq,
       WILL_FIRE_RL_bus_1_1_craftReq_1,
       WILL_FIRE_RL_bus_1_1_craftReq_2,
       WILL_FIRE_RL_bus_1_1_sink_selected,
       WILL_FIRE_RL_bus_1_1_sink_selected_1,
       WILL_FIRE_RL_bus_1_1_source_selected,
       WILL_FIRE_RL_bus_1_1_source_selected_1,
       WILL_FIRE_RL_bus_1_1_source_selected_2,
       WILL_FIRE_RL_bus_1_arbitrate,
       WILL_FIRE_RL_bus_1_arbitrate_1,
       WILL_FIRE_RL_bus_1_burst,
       WILL_FIRE_RL_bus_1_burst_1,
       WILL_FIRE_RL_bus_1_burst_2,
       WILL_FIRE_RL_bus_1_burst_3,
       WILL_FIRE_RL_bus_1_burst_4,
       WILL_FIRE_RL_bus_1_checkSinkReady,
       WILL_FIRE_RL_bus_1_checkSinkReady_1,
       WILL_FIRE_RL_bus_1_checkSinkReady_2,
       WILL_FIRE_RL_bus_1_checkSinkReady_3,
       WILL_FIRE_RL_bus_1_checkSinkReady_4,
       WILL_FIRE_RL_bus_1_craftReq,
       WILL_FIRE_RL_bus_1_craftReq_1,
       WILL_FIRE_RL_bus_1_craftReq_2,
       WILL_FIRE_RL_bus_1_craftReq_3,
       WILL_FIRE_RL_bus_1_craftReq_4,
       WILL_FIRE_RL_bus_1_ifcs_0_drainFlits,
       WILL_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse,
       WILL_FIRE_RL_bus_1_ifcs_0_firstFlit,
       WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1,
       WILL_FIRE_RL_bus_1_ifcs_0_followFlits,
       WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1,
       WILL_FIRE_RL_bus_1_ifcs_0_forwardRsp,
       WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit,
       WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp,
       WILL_FIRE_RL_bus_1_ifcs_1_drainFlits,
       WILL_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse,
       WILL_FIRE_RL_bus_1_ifcs_1_firstFlit,
       WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1,
       WILL_FIRE_RL_bus_1_ifcs_1_followFlits,
       WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1,
       WILL_FIRE_RL_bus_1_ifcs_1_forwardRsp,
       WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit,
       WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp,
       WILL_FIRE_RL_bus_1_ifcs_2_firstFlit,
       WILL_FIRE_RL_bus_1_ifcs_2_followFlits,
       WILL_FIRE_RL_bus_1_sink_selected,
       WILL_FIRE_RL_bus_1_sink_selected_1,
       WILL_FIRE_RL_bus_1_sink_selected_2,
       WILL_FIRE_RL_bus_1_sink_selected_3,
       WILL_FIRE_RL_bus_1_sink_selected_4,
       WILL_FIRE_RL_bus_1_source_selected,
       WILL_FIRE_RL_bus_1_source_selected_1,
       WILL_FIRE_RL_bus_1_source_selected_2,
       WILL_FIRE_RL_bus_1_source_selected_3,
       WILL_FIRE_RL_bus_1_source_selected_4,
       WILL_FIRE_RL_bus_arbitrate,
       WILL_FIRE_RL_bus_burst,
       WILL_FIRE_RL_bus_burst_1,
       WILL_FIRE_RL_bus_checkSinkReady,
       WILL_FIRE_RL_bus_checkSinkReady_1,
       WILL_FIRE_RL_bus_checkSinkReady_2,
       WILL_FIRE_RL_bus_craftReq,
       WILL_FIRE_RL_bus_craftReq_1,
       WILL_FIRE_RL_bus_ifcs_0_drainFlits,
       WILL_FIRE_RL_bus_ifcs_0_drainNoRouteResponse,
       WILL_FIRE_RL_bus_ifcs_0_firstFlit,
       WILL_FIRE_RL_bus_ifcs_0_firstFlit_1,
       WILL_FIRE_RL_bus_ifcs_0_followFlits,
       WILL_FIRE_RL_bus_ifcs_0_followFlits_1,
       WILL_FIRE_RL_bus_ifcs_0_forwardRsp,
       WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit,
       WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp,
       WILL_FIRE_RL_bus_ifcs_1_drainFlits,
       WILL_FIRE_RL_bus_ifcs_1_drainNoRouteResponse,
       WILL_FIRE_RL_bus_ifcs_1_firstFlit,
       WILL_FIRE_RL_bus_ifcs_1_firstFlit_1,
       WILL_FIRE_RL_bus_ifcs_1_followFlits,
       WILL_FIRE_RL_bus_ifcs_1_followFlits_1,
       WILL_FIRE_RL_bus_ifcs_1_forwardRsp,
       WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit,
       WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp,
       WILL_FIRE_RL_bus_ifcs_2_firstFlit,
       WILL_FIRE_RL_bus_ifcs_2_followFlits,
       WILL_FIRE_RL_bus_merged_0_genFirst,
       WILL_FIRE_RL_bus_merged_0_genOther,
       WILL_FIRE_RL_bus_merged_1_genFirst,
       WILL_FIRE_RL_bus_merged_1_genOther,
       WILL_FIRE_RL_bus_msNoSynth_0_ar_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_0_aw_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue,
       WILL_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue,
       WILL_FIRE_RL_bus_msNoSynth_0_b_dropFlit,
       WILL_FIRE_RL_bus_msNoSynth_0_b_forwardFlit,
       WILL_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue,
       WILL_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue,
       WILL_FIRE_RL_bus_msNoSynth_0_r_dropFlit,
       WILL_FIRE_RL_bus_msNoSynth_0_r_forwardFlit,
       WILL_FIRE_RL_bus_msNoSynth_0_w_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_1_ar_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_1_aw_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue,
       WILL_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue,
       WILL_FIRE_RL_bus_msNoSynth_1_b_dropFlit,
       WILL_FIRE_RL_bus_msNoSynth_1_b_forwardFlit,
       WILL_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue,
       WILL_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue,
       WILL_FIRE_RL_bus_msNoSynth_1_r_dropFlit,
       WILL_FIRE_RL_bus_msNoSynth_1_r_forwardFlit,
       WILL_FIRE_RL_bus_msNoSynth_1_w_forwardReady,
       WILL_FIRE_RL_bus_sink_selected,
       WILL_FIRE_RL_bus_sink_selected_1,
       WILL_FIRE_RL_bus_sink_selected_2,
       WILL_FIRE_RL_bus_source_selected,
       WILL_FIRE_RL_bus_source_selected_1,
       WILL_FIRE_RL_bus_split_0_putFirst,
       WILL_FIRE_RL_bus_split_0_putOther,
       WILL_FIRE_RL_bus_split_1_putFirst,
       WILL_FIRE_RL_bus_split_1_putOther,
       WILL_FIRE_RL_bus_split_2_putFirst,
       WILL_FIRE_RL_bus_split_2_putOther,
       WILL_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_b_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_0_r_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_0_w_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_b_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_1_r_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_1_w_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_b_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_2_r_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_2_w_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW,
       WILL_FIRE_RL_mem_ar_buffer_dequeue,
       WILL_FIRE_RL_mem_ar_buffer_enqueue,
       WILL_FIRE_RL_mem_ar_dropFlit,
       WILL_FIRE_RL_mem_ar_forwardFlit,
       WILL_FIRE_RL_mem_aw_buffer_dequeue,
       WILL_FIRE_RL_mem_aw_buffer_enqueue,
       WILL_FIRE_RL_mem_aw_dropFlit,
       WILL_FIRE_RL_mem_aw_forwardFlit,
       WILL_FIRE_RL_mem_b_forwardReady,
       WILL_FIRE_RL_mem_r_forwardReady,
       WILL_FIRE_RL_mem_w_buffer_dequeue,
       WILL_FIRE_RL_mem_w_buffer_enqueue,
       WILL_FIRE_RL_mem_w_dropFlit,
       WILL_FIRE_RL_mem_w_forwardFlit,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionGetPut_5,
       WILL_FIRE_RL_mkConnectionGetPut_6,
       WILL_FIRE_RL_mkConnectionGetPut_7,
       WILL_FIRE_RL_mkConnectionGetPut_8,
       WILL_FIRE_RL_mkConnectionGetPut_9,
       WILL_FIRE_RL_rl_connect_external_interrupt_requests,
       WILL_FIRE_RL_rl_reset_complete_initial,
       WILL_FIRE_RL_rl_reset_start_initial,
       WILL_FIRE_RL_uart0_slave_ar_buffer_dequeue,
       WILL_FIRE_RL_uart0_slave_ar_buffer_enqueue,
       WILL_FIRE_RL_uart0_slave_ar_dropFlit,
       WILL_FIRE_RL_uart0_slave_ar_forwardFlit,
       WILL_FIRE_RL_uart0_slave_aw_buffer_dequeue,
       WILL_FIRE_RL_uart0_slave_aw_buffer_enqueue,
       WILL_FIRE_RL_uart0_slave_aw_dropFlit,
       WILL_FIRE_RL_uart0_slave_aw_forwardFlit,
       WILL_FIRE_RL_uart0_slave_b_forwardReady,
       WILL_FIRE_RL_uart0_slave_r_forwardReady,
       WILL_FIRE_RL_uart0_slave_w_buffer_dequeue,
       WILL_FIRE_RL_uart0_slave_w_buffer_enqueue,
       WILL_FIRE_RL_uart0_slave_w_dropFlit,
       WILL_FIRE_RL_uart0_slave_w_forwardFlit,
       WILL_FIRE_RL_ug_boot_rom_slave_u_ar_doPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_aw_doPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_b_doDrop,
       WILL_FIRE_RL_ug_boot_rom_slave_u_b_setPeek,
       WILL_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_ug_boot_rom_slave_u_r_doDrop,
       WILL_FIRE_RL_ug_boot_rom_slave_u_r_setPeek,
       WILL_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_ug_boot_rom_slave_u_w_doPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut,
       WILL_FIRE_RL_ug_mem0_slave_u_ar_doPut,
       WILL_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_ug_mem0_slave_u_aw_doPut,
       WILL_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_ug_mem0_slave_u_b_doDrop,
       WILL_FIRE_RL_ug_mem0_slave_u_b_setPeek,
       WILL_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_ug_mem0_slave_u_r_doDrop,
       WILL_FIRE_RL_ug_mem0_slave_u_r_setPeek,
       WILL_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_ug_mem0_slave_u_w_doPut,
       WILL_FIRE_RL_ug_mem0_slave_u_w_warnDoPut,
       WILL_FIRE___me_check_13,
       WILL_FIRE___me_check_168,
       WILL_FIRE___me_check_169,
       WILL_FIRE___me_check_170,
       WILL_FIRE___me_check_172,
       WILL_FIRE___me_check_175,
       WILL_FIRE___me_check_176,
       WILL_FIRE___me_check_177,
       WILL_FIRE___me_check_179,
       WILL_FIRE___me_check_182,
       WILL_FIRE___me_check_184,
       WILL_FIRE___me_check_186,
       WILL_FIRE___me_check_194,
       WILL_FIRE___me_check_196,
       WILL_FIRE___me_check_198,
       WILL_FIRE___me_check_207,
       WILL_FIRE___me_check_209,
       WILL_FIRE___me_check_211,
       WILL_FIRE___me_check_213,
       WILL_FIRE___me_check_215,
       WILL_FIRE___me_check_216,
       WILL_FIRE___me_check_217,
       WILL_FIRE___me_check_219,
       WILL_FIRE___me_check_222,
       WILL_FIRE___me_check_223,
       WILL_FIRE___me_check_224,
       WILL_FIRE___me_check_226,
       WILL_FIRE___me_check_229,
       WILL_FIRE___me_check_231,
       WILL_FIRE___me_check_233,
       WILL_FIRE___me_check_241,
       WILL_FIRE___me_check_243,
       WILL_FIRE___me_check_245,
       WILL_FIRE___me_check_254,
       WILL_FIRE___me_check_256,
       WILL_FIRE___me_check_258,
       WILL_FIRE___me_check_260,
       WILL_FIRE___me_check_4,
       WILL_FIRE_get_to_console_get,
       WILL_FIRE_put_from_console_put,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_start,
       WILL_FIRE_to_raw_mem_request_get,
       WILL_FIRE_to_raw_mem_response_put;

  // inputs to muxes for submodule ports
  reg [72 : 0] MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2,
	       MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2;
  reg [7 : 0] MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2,
	      MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2;
  wire [72 : 0] MUX_bus_ssNoSynth_0_w_buffer_enqw$wset_1__VAL_2,
		MUX_bus_ssNoSynth_1_w_buffer_enqw$wset_1__VAL_2,
		MUX_bus_ssNoSynth_2_w_buffer_enqw$wset_1__VAL_2;
  wire [7 : 0] MUX_boot_rom_axi4_deburster_flitReceived$write_1__VAL_2,
	       MUX_boot_rom_axi4_deburster_readsSent$write_1__VAL_2,
	       MUX_boot_rom_axi4_deburster_writesSent$write_1__VAL_2,
	       MUX_bus_merged_0_flitLeft$write_1__VAL_1,
	       MUX_bus_merged_1_flitLeft$write_1__VAL_1,
	       MUX_bus_split_0_flitLeft$write_1__VAL_1,
	       MUX_bus_split_1_flitLeft$write_1__VAL_1,
	       MUX_bus_split_2_flitLeft$write_1__VAL_1,
	       MUX_mem0_controller_axi4_deburster_flitReceived$write_1__VAL_2,
	       MUX_mem0_controller_axi4_deburster_readsSent$write_1__VAL_2,
	       MUX_mem0_controller_axi4_deburster_writesSent$write_1__VAL_2;
  wire MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_1,
       MUX_bus_1_1_activeSource_0$write_1__SEL_1,
       MUX_bus_1_1_activeSource_0$write_1__SEL_2,
       MUX_bus_1_1_activeSource_0$write_1__SEL_3,
       MUX_bus_1_1_activeSource_0$write_1__VAL_1,
       MUX_bus_1_1_activeSource_1$write_1__VAL_1,
       MUX_bus_1_1_activeSource_2$write_1__VAL_1,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_1,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_2,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_3,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_4,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_5,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_6,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_1,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_2,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_3,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_4,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_5,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_6,
       MUX_bus_1_1_state$write_1__SEL_1,
       MUX_bus_1_1_state$write_1__SEL_2,
       MUX_bus_1_1_state$write_1__SEL_3,
       MUX_bus_1_flitToSink_0$wset_1__SEL_1,
       MUX_bus_1_flitToSink_0$wset_1__SEL_2,
       MUX_bus_1_flitToSink_0$wset_1__SEL_3,
       MUX_bus_1_flitToSink_0$wset_1__SEL_4,
       MUX_bus_1_flitToSink_0$wset_1__SEL_5,
       MUX_bus_1_flitToSink_0$wset_1__SEL_6,
       MUX_bus_1_flitToSink_0_1$wset_1__SEL_1,
       MUX_bus_1_flitToSink_0_1$wset_1__SEL_3,
       MUX_bus_1_flitToSink_1$wset_1__SEL_1,
       MUX_bus_1_flitToSink_1$wset_1__SEL_2,
       MUX_bus_1_flitToSink_1$wset_1__SEL_3,
       MUX_bus_1_flitToSink_1$wset_1__SEL_4,
       MUX_bus_1_flitToSink_1$wset_1__SEL_5,
       MUX_bus_1_flitToSink_1$wset_1__SEL_6,
       MUX_bus_1_flitToSink_1_1$wset_1__SEL_1,
       MUX_bus_1_flitToSink_1_1$wset_1__SEL_3,
       MUX_bus_1_flitToSink_2$wset_1__SEL_1,
       MUX_bus_1_flitToSink_2$wset_1__SEL_3,
       MUX_bus_1_ifcs_0_state_1$write_1__SEL_1,
       MUX_bus_1_ifcs_1_state_1$write_1__SEL_1,
       MUX_bus_1_ifcs_2_state$write_1__SEL_1,
       MUX_bus_activeSource_0$write_1__SEL_1,
       MUX_bus_activeSource_0$write_1__VAL_1,
       MUX_bus_activeSource_1$write_1__VAL_1,
       MUX_bus_flitToSink_0$wset_1__SEL_1,
       MUX_bus_flitToSink_0$wset_1__SEL_3,
       MUX_bus_flitToSink_1$wset_1__SEL_1,
       MUX_bus_flitToSink_1$wset_1__SEL_3,
       MUX_bus_flitToSink_2$wset_1__SEL_1,
       MUX_bus_flitToSink_2$wset_1__SEL_3,
       MUX_bus_ifcs_0_state$write_1__PSEL_1,
       MUX_bus_ifcs_0_state$write_1__SEL_1,
       MUX_bus_ifcs_0_state$write_1__SEL_2,
       MUX_bus_ifcs_0_state$write_1__SEL_3,
       MUX_bus_ifcs_1_state$write_1__PSEL_1,
       MUX_bus_ifcs_1_state$write_1__SEL_1,
       MUX_bus_ifcs_1_state$write_1__SEL_2,
       MUX_bus_ifcs_1_state$write_1__SEL_3,
       MUX_bus_split_0_flitLeft$write_1__SEL_1,
       MUX_bus_split_0_flitLeft$write_1__SEL_2,
       MUX_bus_split_1_flitLeft$write_1__SEL_1,
       MUX_bus_split_1_flitLeft$write_1__SEL_2,
       MUX_bus_split_2_flitLeft$write_1__SEL_1,
       MUX_bus_split_2_flitLeft$write_1__SEL_2,
       MUX_bus_state$write_1__SEL_1,
       MUX_bus_state$write_1__SEL_2,
       MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h109045;
  reg [63 : 0] v__h52342;
  reg [63 : 0] v__h51731;
  reg [63 : 0] v__h56351;
  reg [63 : 0] v__h55740;
  reg [63 : 0] v__h67046;
  reg [63 : 0] v__h66665;
  reg [63 : 0] v__h69116;
  reg [63 : 0] v__h68735;
  reg [63 : 0] v__h71015;
  reg [63 : 0] v__h70634;
  reg [63 : 0] v__h87406;
  reg [63 : 0] v__h86795;
  reg [63 : 0] v__h90299;
  reg [63 : 0] v__h89688;
  reg [63 : 0] v__h99579;
  reg [63 : 0] v__h99198;
  reg [63 : 0] v__h102070;
  reg [63 : 0] v__h101689;
  reg [31 : 0] v__h108522;
  reg [63 : 0] v__h104380;
  reg [63 : 0] v__h103999;
  reg [31 : 0] v__h108753;
  reg [31 : 0] v__h108516;
  reg [31 : 0] v__h108747;
  reg [31 : 0] v__h109039;
  // synopsys translate_on

  // remaining internal signals
  wire [72 : 0] bus_split_0_doPutwget_BITS_72_TO_0__q5,
		bus_split_1_doPutwget_BITS_72_TO_0__q6,
		bus_split_2_doPutwget_BITS_72_TO_0__q7;
  wire [63 : 0] x__h12424,
		x__h13123,
		x__h38286,
		x__h38359,
		x__h38440,
		x__h41654,
		x__h41717,
		x__h41788,
		x__h6182,
		x__h6883,
		x__h73881,
		x__h73944,
		x__h74015,
		x__h76890,
		x__h76953,
		x__h77024,
		x_araddr__h13003,
		x_araddr__h6763,
		x_awaddr__h12304,
		x_awaddr__h6058,
		x_wdata__h28214,
		x_wdata__h30432,
		x_wdata__h32655,
		y__h12412,
		y__h13111,
		y__h6170,
		y__h6871;
  wire [8 : 0] x_port1__read__h75247, x_port1__read__h78238;
  wire [7 : 0] x__h12672,
	       x__h12789,
	       x__h13323,
	       x__h6432,
	       x__h6549,
	       x__h7083,
	       x_wstrb__h28215,
	       x_wstrb__h30433,
	       x_wstrb__h32656;
  wire [6 : 0] a_awid__h39710,
	       a_awid__h43014,
	       boot_rom_axi4_deburster_inShim_bffD_OUT_BITS__ETC__q26,
	       boot_rom_axi4_deburster_inShim_rffD_OUT_BITS__ETC__q24,
	       fatReq_arid__h74677,
	       fatReq_arid__h77671,
	       mem0_controller_axi4_deburster_inShim_bffD_OU_ETC__q27,
	       mem0_controller_axi4_deburster_inShim_rffD_OU_ETC__q25;
  wire [1 : 0] IF_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_T_ETC___d1377,
	       IF_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_T_ETC___d1378,
	       IF_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_T_ETC___d1488,
	       IF_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_T_ETC___d1489,
	       IF_NOT_corew_cpu_dmem_master_ar_araddr__133_UL_ETC___d2148,
	       IF_NOT_corew_cpu_dmem_master_ar_araddr__133_UL_ETC___d2149,
	       IF_NOT_corew_cpu_imem_master_ar_araddr__036_UL_ETC___d2051,
	       IF_NOT_corew_cpu_imem_master_ar_araddr__036_UL_ETC___d2052,
	       SEXT_SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_ETC__q21,
	       SEXT_SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_ETC__q16,
	       SEXT_SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_ETC__q11,
	       SEXT_SEXT_bus_arbiter_firstHot_680_681_BIT_0_6_ETC__q3,
	       SEXT_bus_1_1_arbiter_firstHot__q18,
	       SEXT_bus_1_1_arbiter_lastSelect_1__q20,
	       SEXT_bus_1_1_arbiter_lastSelect__q19,
	       SEXT_bus_1_arbiter_firstHot_1__q14,
	       SEXT_bus_1_arbiter_firstHot__q8,
	       SEXT_bus_1_arbiter_lastSelect_1__q10,
	       SEXT_bus_1_arbiter_lastSelect_2__q15,
	       SEXT_bus_1_arbiter_lastSelect__q9,
	       SEXT_bus_arbiter_firstHot__q1,
	       SEXT_bus_arbiter_lastSelect__q2,
	       SEXT_x0861__q4,
	       SEXT_x5347__q12,
	       SEXT_x5381__q13,
	       SEXT_x5931__q17,
	       SEXT_x7876__q22,
	       SEXT_x7910__q23;
  wire IF_NOT_bus_1_ifcs_0_innerRoute_first__296_BIT__ETC___d2318,
       IF_NOT_bus_1_ifcs_1_innerRoute_first__325_BIT__ETC___d2334,
       IF_NOT_bus_ifcs_0_innerRoute_first__626_BIT_1__ETC___d1648,
       IF_NOT_bus_ifcs_1_innerRoute_first__655_BIT_1__ETC___d1664,
       IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2570,
       IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2576,
       IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2582,
       IF_SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_ETC___d2370,
       IF_SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_ETC___d2374,
       IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1910,
       IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1916,
       IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1922,
       IF_SEXT_bus_arbiter_lastSelect_676_677_BIT_0_6_ETC___d1700,
       IF_SEXT_bus_arbiter_lastSelect_676_677_BIT_0_6_ETC___d1704,
       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_NOT_ETC___d1347,
       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_NOT_ETC___d1429,
       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1340,
       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1359,
       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1363,
       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1368,
       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1372,
       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_NOT_ETC___d1464,
       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_NOT_ETC___d1537,
       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1457,
       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1474,
       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1477,
       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1480,
       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1483,
       IF_bus_split_0_flitLeft_261_EQ_0_262_THEN_bus__ETC___d1618,
       IF_bus_split_1_flitLeft_290_EQ_0_291_THEN_bus__ETC___d1619,
       IF_bus_split_2_flitLeft_319_EQ_0_320_THEN_bus__ETC___d1620,
       NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_ETC___d1390,
       NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_ETC___d1498,
       NOT_corew_cpu_dmem_master_ar_araddr__133_ULT_s_ETC___d2158,
       NOT_corew_cpu_imem_master_ar_araddr__036_ULT_s_ETC___d2061,
       SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551,
       SEXT_bus_1_1_arbiter_lastSelect_1_530_531_BIT__ETC___d2545,
       SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_0__ETC___d2539,
       SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_0_35_ETC___d2358,
       SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891,
       SEXT_bus_1_arbiter_lastSelect_1_870_871_BIT_0__ETC___d1885,
       SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_0__ETC___d2354,
       SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_86_ETC___d1879,
       SEXT_bus_arbiter_firstHot_680_681_BIT_0_682_AN_ETC___d1688,
       SEXT_bus_arbiter_lastSelect_676_677_BIT_0_678__ETC___d1684,
       _0_OR_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_ETC___d1416,
       _0_OR_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_ETC___d1524,
       _0_OR_NOT_corew_cpu_dmem_master_ar_araddr__133__ETC___d2180,
       _0_OR_NOT_corew_cpu_imem_master_ar_araddr__036__ETC___d2083,
       boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d97,
       boot_rom_axi4_deburster_readsSent_19_EQ_boot_r_ETC___d130,
       bus_1_1_reqWires_0_whas__512_AND_bus_1_1_reqWi_ETC___d2522,
       bus_1_1_state_523_AND_bus_1_1_activeSource_0_6_ETC___d2620,
       bus_1_1_state_523_AND_bus_1_1_activeSource_1_6_ETC___d2656,
       bus_1_1_state_523_AND_bus_1_1_activeSource_2_6_ETC___d2692,
       bus_1_ifcs_0_state_034_EQ_0_035_AND_IF_NOT_cor_ETC___d2065,
       bus_1_ifcs_0_state_034_EQ_0_035_AND_NOT_IF_NOT_ETC___d2094,
       bus_1_ifcs_1_state_131_EQ_0_132_AND_IF_NOT_cor_ETC___d2162,
       bus_1_ifcs_1_state_131_EQ_0_132_AND_NOT_IF_NOT_ETC___d2191,
       bus_1_reqWires_0_whas__852_AND_bus_1_reqWires__ETC___d1862,
       bus_1_state_1_343_AND_bus_1_activeSource_0_1_4_ETC___d2413,
       bus_1_state_1_343_AND_bus_1_activeSource_1_1_4_ETC___d2453,
       bus_1_state_863_AND_bus_1_activeSource_0_951_9_ETC___d1954,
       bus_1_state_863_AND_bus_1_activeSource_1_984_9_ETC___d1987,
       bus_1_state_863_AND_bus_1_activeSource_2_018_0_ETC___d2021,
       bus_ifcs_0_state_353_EQ_0_354_AND_IF_NOT_IF_bu_ETC___d1394,
       bus_ifcs_0_state_353_EQ_0_354_AND_NOT_IF_NOT_I_ETC___d1432,
       bus_ifcs_1_state_470_EQ_0_471_AND_IF_NOT_IF_bu_ETC___d1502,
       bus_ifcs_1_state_470_EQ_0_471_AND_NOT_IF_NOT_I_ETC___d1540,
       bus_split_0_doPut_whas__253_AND_bus_split_0_do_ETC___d1260,
       bus_split_1_doPut_whas__282_AND_bus_split_1_do_ETC___d1289,
       bus_split_2_doPut_whas__311_AND_bus_split_2_do_ETC___d1318,
       bus_state_673_AND_bus_activeSource_0_746_747_A_ETC___d1749,
       bus_state_673_AND_bus_activeSource_1_790_791_A_ETC___d1793,
       corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2137,
       corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2143,
       corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2134,
       corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2140,
       corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2040,
       corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2046,
       corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2037,
       corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2043,
       mem0_controller_axi4_deburster_countWriteRspFF_ETC___d238,
       mem0_controller_axi4_deburster_readsSent_60_EQ_ETC___d271,
       x__h50334,
       x__h50437,
       x__h50802,
       x__h50861,
       x__h50943,
       x__h64526,
       x__h64528,
       x__h64677,
       x__h64679,
       x__h64813,
       x__h64815,
       x__h65285,
       x__h65287,
       x__h65347,
       x__h65381,
       x__h65473,
       x__h65475,
       x__h65654,
       x__h65656,
       x__h85404,
       x__h85507,
       x__h85872,
       x__h85931,
       x__h86013,
       x__h97055,
       x__h97057,
       x__h97206,
       x__h97208,
       x__h97342,
       x__h97344,
       x__h97814,
       x__h97816,
       x__h97876,
       x__h97910,
       x__h98002,
       x__h98004,
       x__h98183,
       x__h98185,
       y__h50335,
       y__h50438,
       y__h50803,
       y__h50944,
       y__h64527,
       y__h64529,
       y__h64678,
       y__h64680,
       y__h64814,
       y__h64816,
       y__h65286,
       y__h65288,
       y__h65474,
       y__h65476,
       y__h65655,
       y__h65657,
       y__h85405,
       y__h85508,
       y__h85873,
       y__h86014,
       y__h97056,
       y__h97058,
       y__h97207,
       y__h97209,
       y__h97343,
       y__h97345,
       y__h97815,
       y__h97817,
       y__h98003,
       y__h98005,
       y__h98184,
       y__h98186;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // actionvalue method to_raw_mem_request_get
  assign to_raw_mem_request_get = mem0_controller$to_raw_mem_request_get ;
  assign RDY_to_raw_mem_request_get =
	     mem0_controller$RDY_to_raw_mem_request_get ;
  assign CAN_FIRE_to_raw_mem_request_get =
	     mem0_controller$RDY_to_raw_mem_request_get ;
  assign WILL_FIRE_to_raw_mem_request_get = EN_to_raw_mem_request_get ;

  // action method to_raw_mem_response_put
  assign RDY_to_raw_mem_response_put =
	     mem0_controller$RDY_to_raw_mem_response_put ;
  assign CAN_FIRE_to_raw_mem_response_put =
	     mem0_controller$RDY_to_raw_mem_response_put ;
  assign WILL_FIRE_to_raw_mem_response_put = EN_to_raw_mem_response_put ;

  // actionvalue method get_to_console_get
  assign get_to_console_get = uart0$get_to_console_get ;
  assign RDY_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign CAN_FIRE_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign WILL_FIRE_get_to_console_get = EN_get_to_console_get ;

  // action method put_from_console_put
  assign RDY_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign CAN_FIRE_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign WILL_FIRE_put_from_console_put = EN_put_from_console_put ;

  // value method status
  assign status = mem0_controller$status ;

  // action method start
  assign RDY_start = corew$RDY_start ;
  assign CAN_FIRE_start = corew$RDY_start ;
  assign WILL_FIRE_start = EN_start ;

  // submodule boot_rom
  mkBoot_ROM boot_rom(.CLK(CLK),
		      .RST_N(RST_N),
		      .set_addr_map_addr_base(boot_rom$set_addr_map_addr_base),
		      .set_addr_map_addr_lim(boot_rom$set_addr_map_addr_lim),
		      .slave_araddr(boot_rom$slave_araddr),
		      .slave_arburst(boot_rom$slave_arburst),
		      .slave_arcache(boot_rom$slave_arcache),
		      .slave_arid(boot_rom$slave_arid),
		      .slave_arlen(boot_rom$slave_arlen),
		      .slave_arlock(boot_rom$slave_arlock),
		      .slave_arprot(boot_rom$slave_arprot),
		      .slave_arqos(boot_rom$slave_arqos),
		      .slave_arregion(boot_rom$slave_arregion),
		      .slave_arsize(boot_rom$slave_arsize),
		      .slave_awaddr(boot_rom$slave_awaddr),
		      .slave_awburst(boot_rom$slave_awburst),
		      .slave_awcache(boot_rom$slave_awcache),
		      .slave_awid(boot_rom$slave_awid),
		      .slave_awlen(boot_rom$slave_awlen),
		      .slave_awlock(boot_rom$slave_awlock),
		      .slave_awprot(boot_rom$slave_awprot),
		      .slave_awqos(boot_rom$slave_awqos),
		      .slave_awregion(boot_rom$slave_awregion),
		      .slave_awsize(boot_rom$slave_awsize),
		      .slave_bready(boot_rom$slave_bready),
		      .slave_rready(boot_rom$slave_rready),
		      .slave_wdata(boot_rom$slave_wdata),
		      .slave_wlast(boot_rom$slave_wlast),
		      .slave_wstrb(boot_rom$slave_wstrb),
		      .slave_wuser(boot_rom$slave_wuser),
		      .EN_set_addr_map(boot_rom$EN_set_addr_map),
		      .slave_awvalid(boot_rom$slave_awvalid),
		      .slave_wvalid(boot_rom$slave_wvalid),
		      .slave_arvalid(boot_rom$slave_arvalid),
		      .RDY_set_addr_map(boot_rom$RDY_set_addr_map),
		      .slave_awready(boot_rom$slave_awready),
		      .slave_wready(boot_rom$slave_wready),
		      .slave_bid(boot_rom$slave_bid),
		      .slave_bresp(boot_rom$slave_bresp),
		      .slave_bvalid(boot_rom$slave_bvalid),
		      .slave_arready(boot_rom$slave_arready),
		      .slave_rid(boot_rom$slave_rid),
		      .slave_rdata(boot_rom$slave_rdata),
		      .slave_rresp(boot_rom$slave_rresp),
		      .slave_rlast(boot_rom$slave_rlast),
		      .slave_ruser(boot_rom$slave_ruser),
		      .slave_rvalid(boot_rom$slave_rvalid));

  // submodule boot_rom_axi4_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) boot_rom_axi4_deburster_countWriteRspFF(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(boot_rom_axi4_deburster_countWriteRspFF$D_IN),
								       .ENQ(boot_rom_axi4_deburster_countWriteRspFF$ENQ),
								       .DEQ(boot_rom_axi4_deburster_countWriteRspFF$DEQ),
								       .CLR(boot_rom_axi4_deburster_countWriteRspFF$CLR),
								       .D_OUT(boot_rom_axi4_deburster_countWriteRspFF$D_OUT),
								       .FULL_N(boot_rom_axi4_deburster_countWriteRspFF$FULL_N),
								       .EMPTY_N(boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_arff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_inShim_arff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_inShim_arff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_inShim_arff$DEQ),
							       .CLR(boot_rom_axi4_deburster_inShim_arff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_inShim_arff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_inShim_arff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_inShim_arff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_awff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_inShim_awff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_inShim_awff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_inShim_awff$DEQ),
							       .CLR(boot_rom_axi4_deburster_inShim_awff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_inShim_awff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_inShim_awff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_inShim_awff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_bff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_bff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_bff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_bff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_bff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_bff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_bff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_bff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_rff
  FIFO2 #(.width(32'd75),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_rff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_rff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_rff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_rff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_rff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_rff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_rff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_rff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_wff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_wff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_wff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_wff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_wff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_wff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_wff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_wff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) boot_rom_axi4_deburster_lastReadRspFF(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(boot_rom_axi4_deburster_lastReadRspFF$D_IN),
								     .ENQ(boot_rom_axi4_deburster_lastReadRspFF$ENQ),
								     .DEQ(boot_rom_axi4_deburster_lastReadRspFF$DEQ),
								     .CLR(boot_rom_axi4_deburster_lastReadRspFF$CLR),
								     .D_OUT(boot_rom_axi4_deburster_lastReadRspFF$D_OUT),
								     .FULL_N(boot_rom_axi4_deburster_lastReadRspFF$FULL_N),
								     .EMPTY_N(boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_arff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(boot_rom_axi4_deburster_outShim_arff$D_IN),
								.ENQ(boot_rom_axi4_deburster_outShim_arff$ENQ),
								.DEQ(boot_rom_axi4_deburster_outShim_arff$DEQ),
								.CLR(boot_rom_axi4_deburster_outShim_arff$CLR),
								.D_OUT(boot_rom_axi4_deburster_outShim_arff$D_OUT),
								.FULL_N(boot_rom_axi4_deburster_outShim_arff$FULL_N),
								.EMPTY_N(boot_rom_axi4_deburster_outShim_arff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_awff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(boot_rom_axi4_deburster_outShim_awff$D_IN),
								.ENQ(boot_rom_axi4_deburster_outShim_awff$ENQ),
								.DEQ(boot_rom_axi4_deburster_outShim_awff$DEQ),
								.CLR(boot_rom_axi4_deburster_outShim_awff$CLR),
								.D_OUT(boot_rom_axi4_deburster_outShim_awff$D_OUT),
								.FULL_N(boot_rom_axi4_deburster_outShim_awff$FULL_N),
								.EMPTY_N(boot_rom_axi4_deburster_outShim_awff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_bff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_bff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_bff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_bff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_bff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_bff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_bff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_bff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_rff
  FIFO2 #(.width(32'd75),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_rff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_rff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_rff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_rff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_rff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_rff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_rff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_rff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_wff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_wff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_wff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_wff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_wff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_wff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_wff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_wff$EMPTY_N));

  // submodule br_ar_buffer_ff
  FIFO1 #(.width(32'd100), .guarded(32'd0)) br_ar_buffer_ff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(br_ar_buffer_ff$D_IN),
							    .ENQ(br_ar_buffer_ff$ENQ),
							    .DEQ(br_ar_buffer_ff$DEQ),
							    .CLR(br_ar_buffer_ff$CLR),
							    .D_OUT(br_ar_buffer_ff$D_OUT),
							    .FULL_N(br_ar_buffer_ff$FULL_N),
							    .EMPTY_N(br_ar_buffer_ff$EMPTY_N));

  // submodule br_ar_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) br_ar_buffer_firstValid(.CLK(CLK),
								  .D_IN(br_ar_buffer_firstValid$D_IN),
								  .EN(br_ar_buffer_firstValid$EN),
								  .Q_OUT(br_ar_buffer_firstValid$Q_OUT));

  // submodule br_aw_buffer_ff
  FIFO1 #(.width(32'd100), .guarded(32'd0)) br_aw_buffer_ff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(br_aw_buffer_ff$D_IN),
							    .ENQ(br_aw_buffer_ff$ENQ),
							    .DEQ(br_aw_buffer_ff$DEQ),
							    .CLR(br_aw_buffer_ff$CLR),
							    .D_OUT(br_aw_buffer_ff$D_OUT),
							    .FULL_N(br_aw_buffer_ff$FULL_N),
							    .EMPTY_N(br_aw_buffer_ff$EMPTY_N));

  // submodule br_aw_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) br_aw_buffer_firstValid(.CLK(CLK),
								  .D_IN(br_aw_buffer_firstValid$D_IN),
								  .EN(br_aw_buffer_firstValid$EN),
								  .Q_OUT(br_aw_buffer_firstValid$Q_OUT));

  // submodule br_w_buffer_ff
  FIFO1 #(.width(32'd74), .guarded(32'd0)) br_w_buffer_ff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(br_w_buffer_ff$D_IN),
							  .ENQ(br_w_buffer_ff$ENQ),
							  .DEQ(br_w_buffer_ff$DEQ),
							  .CLR(br_w_buffer_ff$CLR),
							  .D_OUT(br_w_buffer_ff$D_OUT),
							  .FULL_N(br_w_buffer_ff$FULL_N),
							  .EMPTY_N(br_w_buffer_ff$EMPTY_N));

  // submodule br_w_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) br_w_buffer_firstValid(.CLK(CLK),
								 .D_IN(br_w_buffer_firstValid$D_IN),
								 .EN(br_w_buffer_firstValid$EN),
								 .Q_OUT(br_w_buffer_firstValid$Q_OUT));

  // submodule bus_1_ifcs_0_innerReq
  FIFO2 #(.width(32'd100), .guarded(32'd1)) bus_1_ifcs_0_innerReq(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(bus_1_ifcs_0_innerReq$D_IN),
								  .ENQ(bus_1_ifcs_0_innerReq$ENQ),
								  .DEQ(bus_1_ifcs_0_innerReq$DEQ),
								  .CLR(bus_1_ifcs_0_innerReq$CLR),
								  .D_OUT(bus_1_ifcs_0_innerReq$D_OUT),
								  .FULL_N(bus_1_ifcs_0_innerReq$FULL_N),
								  .EMPTY_N(bus_1_ifcs_0_innerReq$EMPTY_N));

  // submodule bus_1_ifcs_0_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) bus_1_ifcs_0_innerRoute(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(bus_1_ifcs_0_innerRoute$D_IN),
								  .ENQ(bus_1_ifcs_0_innerRoute$ENQ),
								  .DEQ(bus_1_ifcs_0_innerRoute$DEQ),
								  .CLR(bus_1_ifcs_0_innerRoute$CLR),
								  .D_OUT(bus_1_ifcs_0_innerRoute$D_OUT),
								  .FULL_N(bus_1_ifcs_0_innerRoute$FULL_N),
								  .EMPTY_N(bus_1_ifcs_0_innerRoute$EMPTY_N));

  // submodule bus_1_ifcs_0_noRouteRsp
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) bus_1_ifcs_0_noRouteRsp(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(bus_1_ifcs_0_noRouteRsp$D_IN),
						   .ENQ(bus_1_ifcs_0_noRouteRsp$ENQ),
						   .DEQ(bus_1_ifcs_0_noRouteRsp$DEQ),
						   .CLR(bus_1_ifcs_0_noRouteRsp$CLR),
						   .D_OUT(bus_1_ifcs_0_noRouteRsp$D_OUT),
						   .FULL_N(bus_1_ifcs_0_noRouteRsp$FULL_N),
						   .EMPTY_N(bus_1_ifcs_0_noRouteRsp$EMPTY_N));

  // submodule bus_1_ifcs_0_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_1_ifcs_0_routeBack(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(bus_1_ifcs_0_routeBack$D_IN),
								 .ENQ(bus_1_ifcs_0_routeBack$ENQ),
								 .DEQ(bus_1_ifcs_0_routeBack$DEQ),
								 .CLR(bus_1_ifcs_0_routeBack$CLR),
								 .D_OUT(bus_1_ifcs_0_routeBack$D_OUT),
								 .FULL_N(bus_1_ifcs_0_routeBack$FULL_N),
								 .EMPTY_N(bus_1_ifcs_0_routeBack$EMPTY_N));

  // submodule bus_1_ifcs_0_rspBack
  FIFO2 #(.width(32'd73), .guarded(32'd1)) bus_1_ifcs_0_rspBack(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_1_ifcs_0_rspBack$D_IN),
								.ENQ(bus_1_ifcs_0_rspBack$ENQ),
								.DEQ(bus_1_ifcs_0_rspBack$DEQ),
								.CLR(bus_1_ifcs_0_rspBack$CLR),
								.D_OUT(bus_1_ifcs_0_rspBack$D_OUT),
								.FULL_N(bus_1_ifcs_0_rspBack$FULL_N),
								.EMPTY_N(bus_1_ifcs_0_rspBack$EMPTY_N));

  // submodule bus_1_ifcs_1_innerReq
  FIFO2 #(.width(32'd100), .guarded(32'd1)) bus_1_ifcs_1_innerReq(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(bus_1_ifcs_1_innerReq$D_IN),
								  .ENQ(bus_1_ifcs_1_innerReq$ENQ),
								  .DEQ(bus_1_ifcs_1_innerReq$DEQ),
								  .CLR(bus_1_ifcs_1_innerReq$CLR),
								  .D_OUT(bus_1_ifcs_1_innerReq$D_OUT),
								  .FULL_N(bus_1_ifcs_1_innerReq$FULL_N),
								  .EMPTY_N(bus_1_ifcs_1_innerReq$EMPTY_N));

  // submodule bus_1_ifcs_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) bus_1_ifcs_1_innerRoute(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(bus_1_ifcs_1_innerRoute$D_IN),
								  .ENQ(bus_1_ifcs_1_innerRoute$ENQ),
								  .DEQ(bus_1_ifcs_1_innerRoute$DEQ),
								  .CLR(bus_1_ifcs_1_innerRoute$CLR),
								  .D_OUT(bus_1_ifcs_1_innerRoute$D_OUT),
								  .FULL_N(bus_1_ifcs_1_innerRoute$FULL_N),
								  .EMPTY_N(bus_1_ifcs_1_innerRoute$EMPTY_N));

  // submodule bus_1_ifcs_1_noRouteRsp
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) bus_1_ifcs_1_noRouteRsp(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(bus_1_ifcs_1_noRouteRsp$D_IN),
						   .ENQ(bus_1_ifcs_1_noRouteRsp$ENQ),
						   .DEQ(bus_1_ifcs_1_noRouteRsp$DEQ),
						   .CLR(bus_1_ifcs_1_noRouteRsp$CLR),
						   .D_OUT(bus_1_ifcs_1_noRouteRsp$D_OUT),
						   .FULL_N(bus_1_ifcs_1_noRouteRsp$FULL_N),
						   .EMPTY_N(bus_1_ifcs_1_noRouteRsp$EMPTY_N));

  // submodule bus_1_ifcs_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_1_ifcs_1_routeBack(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(bus_1_ifcs_1_routeBack$D_IN),
								 .ENQ(bus_1_ifcs_1_routeBack$ENQ),
								 .DEQ(bus_1_ifcs_1_routeBack$DEQ),
								 .CLR(bus_1_ifcs_1_routeBack$CLR),
								 .D_OUT(bus_1_ifcs_1_routeBack$D_OUT),
								 .FULL_N(bus_1_ifcs_1_routeBack$FULL_N),
								 .EMPTY_N(bus_1_ifcs_1_routeBack$EMPTY_N));

  // submodule bus_1_ifcs_1_rspBack
  FIFO2 #(.width(32'd73), .guarded(32'd1)) bus_1_ifcs_1_rspBack(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_1_ifcs_1_rspBack$D_IN),
								.ENQ(bus_1_ifcs_1_rspBack$ENQ),
								.DEQ(bus_1_ifcs_1_rspBack$DEQ),
								.CLR(bus_1_ifcs_1_rspBack$CLR),
								.D_OUT(bus_1_ifcs_1_rspBack$D_OUT),
								.FULL_N(bus_1_ifcs_1_rspBack$FULL_N),
								.EMPTY_N(bus_1_ifcs_1_rspBack$EMPTY_N));

  // submodule bus_1_ifcs_2_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_1_ifcs_2_routeBack(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(bus_1_ifcs_2_routeBack$D_IN),
								 .ENQ(bus_1_ifcs_2_routeBack$ENQ),
								 .DEQ(bus_1_ifcs_2_routeBack$DEQ),
								 .CLR(bus_1_ifcs_2_routeBack$CLR),
								 .D_OUT(bus_1_ifcs_2_routeBack$D_OUT),
								 .FULL_N(bus_1_ifcs_2_routeBack$FULL_N),
								 .EMPTY_N(bus_1_ifcs_2_routeBack$EMPTY_N));

  // submodule bus_1_ifcs_2_rspBack
  FIFO2 #(.width(32'd73), .guarded(32'd1)) bus_1_ifcs_2_rspBack(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_1_ifcs_2_rspBack$D_IN),
								.ENQ(bus_1_ifcs_2_rspBack$ENQ),
								.DEQ(bus_1_ifcs_2_rspBack$DEQ),
								.CLR(bus_1_ifcs_2_rspBack$CLR),
								.D_OUT(bus_1_ifcs_2_rspBack$D_OUT),
								.FULL_N(bus_1_ifcs_2_rspBack$FULL_N),
								.EMPTY_N(bus_1_ifcs_2_rspBack$EMPTY_N));

  // submodule bus_ifcs_0_innerReq
  FIFO2 #(.width(32'd174), .guarded(32'd1)) bus_ifcs_0_innerReq(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_0_innerReq$D_IN),
								.ENQ(bus_ifcs_0_innerReq$ENQ),
								.DEQ(bus_ifcs_0_innerReq$DEQ),
								.CLR(bus_ifcs_0_innerReq$CLR),
								.D_OUT(bus_ifcs_0_innerReq$D_OUT),
								.FULL_N(bus_ifcs_0_innerReq$FULL_N),
								.EMPTY_N(bus_ifcs_0_innerReq$EMPTY_N));

  // submodule bus_ifcs_0_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) bus_ifcs_0_innerRoute(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_0_innerRoute$D_IN),
								.ENQ(bus_ifcs_0_innerRoute$ENQ),
								.DEQ(bus_ifcs_0_innerRoute$DEQ),
								.CLR(bus_ifcs_0_innerRoute$CLR),
								.D_OUT(bus_ifcs_0_innerRoute$D_OUT),
								.FULL_N(bus_ifcs_0_innerRoute$FULL_N),
								.EMPTY_N(bus_ifcs_0_innerRoute$EMPTY_N));

  // submodule bus_ifcs_0_noRouteRsp
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_0_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_0_noRouteRsp$D_IN),
								.ENQ(bus_ifcs_0_noRouteRsp$ENQ),
								.DEQ(bus_ifcs_0_noRouteRsp$DEQ),
								.CLR(bus_ifcs_0_noRouteRsp$CLR),
								.D_OUT(bus_ifcs_0_noRouteRsp$D_OUT),
								.FULL_N(bus_ifcs_0_noRouteRsp$FULL_N),
								.EMPTY_N(bus_ifcs_0_noRouteRsp$EMPTY_N));

  // submodule bus_ifcs_0_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_ifcs_0_routeBack(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(bus_ifcs_0_routeBack$D_IN),
							       .ENQ(bus_ifcs_0_routeBack$ENQ),
							       .DEQ(bus_ifcs_0_routeBack$DEQ),
							       .CLR(bus_ifcs_0_routeBack$CLR),
							       .D_OUT(bus_ifcs_0_routeBack$D_OUT),
							       .FULL_N(bus_ifcs_0_routeBack$FULL_N),
							       .EMPTY_N(bus_ifcs_0_routeBack$EMPTY_N));

  // submodule bus_ifcs_0_rspBack
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_0_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(bus_ifcs_0_rspBack$D_IN),
							     .ENQ(bus_ifcs_0_rspBack$ENQ),
							     .DEQ(bus_ifcs_0_rspBack$DEQ),
							     .CLR(bus_ifcs_0_rspBack$CLR),
							     .D_OUT(bus_ifcs_0_rspBack$D_OUT),
							     .FULL_N(bus_ifcs_0_rspBack$FULL_N),
							     .EMPTY_N(bus_ifcs_0_rspBack$EMPTY_N));

  // submodule bus_ifcs_1_innerReq
  FIFO2 #(.width(32'd174), .guarded(32'd1)) bus_ifcs_1_innerReq(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_1_innerReq$D_IN),
								.ENQ(bus_ifcs_1_innerReq$ENQ),
								.DEQ(bus_ifcs_1_innerReq$DEQ),
								.CLR(bus_ifcs_1_innerReq$CLR),
								.D_OUT(bus_ifcs_1_innerReq$D_OUT),
								.FULL_N(bus_ifcs_1_innerReq$FULL_N),
								.EMPTY_N(bus_ifcs_1_innerReq$EMPTY_N));

  // submodule bus_ifcs_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) bus_ifcs_1_innerRoute(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_1_innerRoute$D_IN),
								.ENQ(bus_ifcs_1_innerRoute$ENQ),
								.DEQ(bus_ifcs_1_innerRoute$DEQ),
								.CLR(bus_ifcs_1_innerRoute$CLR),
								.D_OUT(bus_ifcs_1_innerRoute$D_OUT),
								.FULL_N(bus_ifcs_1_innerRoute$FULL_N),
								.EMPTY_N(bus_ifcs_1_innerRoute$EMPTY_N));

  // submodule bus_ifcs_1_noRouteRsp
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_1_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_1_noRouteRsp$D_IN),
								.ENQ(bus_ifcs_1_noRouteRsp$ENQ),
								.DEQ(bus_ifcs_1_noRouteRsp$DEQ),
								.CLR(bus_ifcs_1_noRouteRsp$CLR),
								.D_OUT(bus_ifcs_1_noRouteRsp$D_OUT),
								.FULL_N(bus_ifcs_1_noRouteRsp$FULL_N),
								.EMPTY_N(bus_ifcs_1_noRouteRsp$EMPTY_N));

  // submodule bus_ifcs_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_ifcs_1_routeBack(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(bus_ifcs_1_routeBack$D_IN),
							       .ENQ(bus_ifcs_1_routeBack$ENQ),
							       .DEQ(bus_ifcs_1_routeBack$DEQ),
							       .CLR(bus_ifcs_1_routeBack$CLR),
							       .D_OUT(bus_ifcs_1_routeBack$D_OUT),
							       .FULL_N(bus_ifcs_1_routeBack$FULL_N),
							       .EMPTY_N(bus_ifcs_1_routeBack$EMPTY_N));

  // submodule bus_ifcs_1_rspBack
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(bus_ifcs_1_rspBack$D_IN),
							     .ENQ(bus_ifcs_1_rspBack$ENQ),
							     .DEQ(bus_ifcs_1_rspBack$DEQ),
							     .CLR(bus_ifcs_1_rspBack$CLR),
							     .D_OUT(bus_ifcs_1_rspBack$D_OUT),
							     .FULL_N(bus_ifcs_1_rspBack$FULL_N),
							     .EMPTY_N(bus_ifcs_1_rspBack$EMPTY_N));

  // submodule bus_ifcs_2_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_ifcs_2_routeBack(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(bus_ifcs_2_routeBack$D_IN),
							       .ENQ(bus_ifcs_2_routeBack$ENQ),
							       .DEQ(bus_ifcs_2_routeBack$DEQ),
							       .CLR(bus_ifcs_2_routeBack$CLR),
							       .D_OUT(bus_ifcs_2_routeBack$D_OUT),
							       .FULL_N(bus_ifcs_2_routeBack$FULL_N),
							       .EMPTY_N(bus_ifcs_2_routeBack$EMPTY_N));

  // submodule bus_ifcs_2_rspBack
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_2_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(bus_ifcs_2_rspBack$D_IN),
							     .ENQ(bus_ifcs_2_rspBack$ENQ),
							     .DEQ(bus_ifcs_2_rspBack$DEQ),
							     .CLR(bus_ifcs_2_rspBack$CLR),
							     .D_OUT(bus_ifcs_2_rspBack$D_OUT),
							     .FULL_N(bus_ifcs_2_rspBack$FULL_N),
							     .EMPTY_N(bus_ifcs_2_rspBack$EMPTY_N));

  // submodule bus_msNoSynth_0_b_buffer_ff
  FIFO1 #(.width(32'd8),
	  .guarded(32'd0)) bus_msNoSynth_0_b_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_msNoSynth_0_b_buffer_ff$D_IN),
						       .ENQ(bus_msNoSynth_0_b_buffer_ff$ENQ),
						       .DEQ(bus_msNoSynth_0_b_buffer_ff$DEQ),
						       .CLR(bus_msNoSynth_0_b_buffer_ff$CLR),
						       .D_OUT(bus_msNoSynth_0_b_buffer_ff$D_OUT),
						       .FULL_N(bus_msNoSynth_0_b_buffer_ff$FULL_N),
						       .EMPTY_N(bus_msNoSynth_0_b_buffer_ff$EMPTY_N));

  // submodule bus_msNoSynth_0_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_msNoSynth_0_b_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_msNoSynth_0_b_buffer_firstValid$D_IN),
							       .EN(bus_msNoSynth_0_b_buffer_firstValid$EN),
							       .Q_OUT(bus_msNoSynth_0_b_buffer_firstValid$Q_OUT));

  // submodule bus_msNoSynth_0_r_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_msNoSynth_0_r_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_msNoSynth_0_r_buffer_ff$D_IN),
						       .ENQ(bus_msNoSynth_0_r_buffer_ff$ENQ),
						       .DEQ(bus_msNoSynth_0_r_buffer_ff$DEQ),
						       .CLR(bus_msNoSynth_0_r_buffer_ff$CLR),
						       .D_OUT(bus_msNoSynth_0_r_buffer_ff$D_OUT),
						       .FULL_N(bus_msNoSynth_0_r_buffer_ff$FULL_N),
						       .EMPTY_N(bus_msNoSynth_0_r_buffer_ff$EMPTY_N));

  // submodule bus_msNoSynth_0_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_msNoSynth_0_r_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_msNoSynth_0_r_buffer_firstValid$D_IN),
							       .EN(bus_msNoSynth_0_r_buffer_firstValid$EN),
							       .Q_OUT(bus_msNoSynth_0_r_buffer_firstValid$Q_OUT));

  // submodule bus_msNoSynth_1_b_buffer_ff
  FIFO1 #(.width(32'd8),
	  .guarded(32'd0)) bus_msNoSynth_1_b_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_msNoSynth_1_b_buffer_ff$D_IN),
						       .ENQ(bus_msNoSynth_1_b_buffer_ff$ENQ),
						       .DEQ(bus_msNoSynth_1_b_buffer_ff$DEQ),
						       .CLR(bus_msNoSynth_1_b_buffer_ff$CLR),
						       .D_OUT(bus_msNoSynth_1_b_buffer_ff$D_OUT),
						       .FULL_N(bus_msNoSynth_1_b_buffer_ff$FULL_N),
						       .EMPTY_N(bus_msNoSynth_1_b_buffer_ff$EMPTY_N));

  // submodule bus_msNoSynth_1_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_msNoSynth_1_b_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_msNoSynth_1_b_buffer_firstValid$D_IN),
							       .EN(bus_msNoSynth_1_b_buffer_firstValid$EN),
							       .Q_OUT(bus_msNoSynth_1_b_buffer_firstValid$Q_OUT));

  // submodule bus_msNoSynth_1_r_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_msNoSynth_1_r_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_msNoSynth_1_r_buffer_ff$D_IN),
						       .ENQ(bus_msNoSynth_1_r_buffer_ff$ENQ),
						       .DEQ(bus_msNoSynth_1_r_buffer_ff$DEQ),
						       .CLR(bus_msNoSynth_1_r_buffer_ff$CLR),
						       .D_OUT(bus_msNoSynth_1_r_buffer_ff$D_OUT),
						       .FULL_N(bus_msNoSynth_1_r_buffer_ff$FULL_N),
						       .EMPTY_N(bus_msNoSynth_1_r_buffer_ff$EMPTY_N));

  // submodule bus_msNoSynth_1_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_msNoSynth_1_r_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_msNoSynth_1_r_buffer_firstValid$D_IN),
							       .EN(bus_msNoSynth_1_r_buffer_firstValid$EN),
							       .Q_OUT(bus_msNoSynth_1_r_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_0_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_0_ar_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_0_ar_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_0_ar_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_0_ar_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_0_ar_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_0_ar_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_0_ar_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_0_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_0_ar_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_0_ar_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_0_ar_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_0_ar_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_0_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_0_aw_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_0_aw_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_0_aw_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_0_aw_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_0_aw_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_0_aw_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_0_aw_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_0_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_0_aw_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_0_aw_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_0_aw_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_0_aw_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_0_w_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_ssNoSynth_0_w_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_ssNoSynth_0_w_buffer_ff$D_IN),
						       .ENQ(bus_ssNoSynth_0_w_buffer_ff$ENQ),
						       .DEQ(bus_ssNoSynth_0_w_buffer_ff$DEQ),
						       .CLR(bus_ssNoSynth_0_w_buffer_ff$CLR),
						       .D_OUT(bus_ssNoSynth_0_w_buffer_ff$D_OUT),
						       .FULL_N(bus_ssNoSynth_0_w_buffer_ff$FULL_N),
						       .EMPTY_N(bus_ssNoSynth_0_w_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_0_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_0_w_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_ssNoSynth_0_w_buffer_firstValid$D_IN),
							       .EN(bus_ssNoSynth_0_w_buffer_firstValid$EN),
							       .Q_OUT(bus_ssNoSynth_0_w_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_1_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_1_ar_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_1_ar_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_1_ar_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_1_ar_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_1_ar_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_1_ar_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_1_ar_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_1_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_1_ar_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_1_ar_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_1_ar_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_1_ar_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_1_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_1_aw_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_1_aw_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_1_aw_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_1_aw_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_1_aw_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_1_aw_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_1_aw_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_1_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_1_aw_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_1_aw_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_1_aw_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_1_aw_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_1_w_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_ssNoSynth_1_w_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_ssNoSynth_1_w_buffer_ff$D_IN),
						       .ENQ(bus_ssNoSynth_1_w_buffer_ff$ENQ),
						       .DEQ(bus_ssNoSynth_1_w_buffer_ff$DEQ),
						       .CLR(bus_ssNoSynth_1_w_buffer_ff$CLR),
						       .D_OUT(bus_ssNoSynth_1_w_buffer_ff$D_OUT),
						       .FULL_N(bus_ssNoSynth_1_w_buffer_ff$FULL_N),
						       .EMPTY_N(bus_ssNoSynth_1_w_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_1_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_1_w_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_ssNoSynth_1_w_buffer_firstValid$D_IN),
							       .EN(bus_ssNoSynth_1_w_buffer_firstValid$EN),
							       .Q_OUT(bus_ssNoSynth_1_w_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_2_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_2_ar_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_2_ar_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_2_ar_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_2_ar_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_2_ar_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_2_ar_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_2_ar_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_2_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_2_ar_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_2_ar_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_2_ar_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_2_ar_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_2_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_2_aw_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_2_aw_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_2_aw_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_2_aw_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_2_aw_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_2_aw_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_2_aw_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_2_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_2_aw_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_2_aw_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_2_aw_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_2_aw_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_2_w_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_ssNoSynth_2_w_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_ssNoSynth_2_w_buffer_ff$D_IN),
						       .ENQ(bus_ssNoSynth_2_w_buffer_ff$ENQ),
						       .DEQ(bus_ssNoSynth_2_w_buffer_ff$DEQ),
						       .CLR(bus_ssNoSynth_2_w_buffer_ff$CLR),
						       .D_OUT(bus_ssNoSynth_2_w_buffer_ff$D_OUT),
						       .FULL_N(bus_ssNoSynth_2_w_buffer_ff$FULL_N),
						       .EMPTY_N(bus_ssNoSynth_2_w_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_2_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_2_w_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_ssNoSynth_2_w_buffer_firstValid$D_IN),
							       .EN(bus_ssNoSynth_2_w_buffer_firstValid$EN),
							       .Q_OUT(bus_ssNoSynth_2_w_buffer_firstValid$Q_OUT));

  // submodule corew
  mkCoreW corew(.RST_N_dm_power_on_reset(RST_N_dm_power_on_reset),
		.CLK(CLK),
		.RST_N(RST_N),
		.core_external_interrupt_sources_0_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_10_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_11_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_12_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_13_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_14_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_15_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_1_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_2_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_3_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_4_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_5_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_6_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_7_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_8_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear),
		.core_external_interrupt_sources_9_m_interrupt_req_set_not_clear(corew$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear),
		.cpu_dmem_master_arready(corew$cpu_dmem_master_arready),
		.cpu_dmem_master_awready(corew$cpu_dmem_master_awready),
		.cpu_dmem_master_bid(corew$cpu_dmem_master_bid),
		.cpu_dmem_master_bresp(corew$cpu_dmem_master_bresp),
		.cpu_dmem_master_rdata(corew$cpu_dmem_master_rdata),
		.cpu_dmem_master_rid(corew$cpu_dmem_master_rid),
		.cpu_dmem_master_rlast(corew$cpu_dmem_master_rlast),
		.cpu_dmem_master_rresp(corew$cpu_dmem_master_rresp),
		.cpu_dmem_master_wready(corew$cpu_dmem_master_wready),
		.cpu_imem_master_arready(corew$cpu_imem_master_arready),
		.cpu_imem_master_awready(corew$cpu_imem_master_awready),
		.cpu_imem_master_bid(corew$cpu_imem_master_bid),
		.cpu_imem_master_bresp(corew$cpu_imem_master_bresp),
		.cpu_imem_master_rdata(corew$cpu_imem_master_rdata),
		.cpu_imem_master_rid(corew$cpu_imem_master_rid),
		.cpu_imem_master_rlast(corew$cpu_imem_master_rlast),
		.cpu_imem_master_rresp(corew$cpu_imem_master_rresp),
		.cpu_imem_master_wready(corew$cpu_imem_master_wready),
		.nmi_req_set_not_clear(corew$nmi_req_set_not_clear),
		.set_verbosity_logdelay(corew$set_verbosity_logdelay),
		.set_verbosity_verbosity(corew$set_verbosity_verbosity),
		.start_fromhost_addr(corew$start_fromhost_addr),
		.start_tohost_addr(corew$start_tohost_addr),
		.EN_set_verbosity(corew$EN_set_verbosity),
		.EN_start(corew$EN_start),
		.cpu_imem_master_bvalid(corew$cpu_imem_master_bvalid),
		.cpu_imem_master_rvalid(corew$cpu_imem_master_rvalid),
		.cpu_dmem_master_bvalid(corew$cpu_dmem_master_bvalid),
		.cpu_dmem_master_rvalid(corew$cpu_dmem_master_rvalid),
		.RDY_set_verbosity(),
		.RDY_start(corew$RDY_start),
		.cpu_imem_master_awid(corew$cpu_imem_master_awid),
		.cpu_imem_master_awaddr(corew$cpu_imem_master_awaddr),
		.cpu_imem_master_awlen(corew$cpu_imem_master_awlen),
		.cpu_imem_master_awsize(corew$cpu_imem_master_awsize),
		.cpu_imem_master_awburst(corew$cpu_imem_master_awburst),
		.cpu_imem_master_awlock(corew$cpu_imem_master_awlock),
		.cpu_imem_master_awcache(corew$cpu_imem_master_awcache),
		.cpu_imem_master_awprot(corew$cpu_imem_master_awprot),
		.cpu_imem_master_awqos(corew$cpu_imem_master_awqos),
		.cpu_imem_master_awregion(corew$cpu_imem_master_awregion),
		.cpu_imem_master_awvalid(corew$cpu_imem_master_awvalid),
		.cpu_imem_master_wdata(corew$cpu_imem_master_wdata),
		.cpu_imem_master_wstrb(corew$cpu_imem_master_wstrb),
		.cpu_imem_master_wlast(corew$cpu_imem_master_wlast),
		.cpu_imem_master_wvalid(corew$cpu_imem_master_wvalid),
		.cpu_imem_master_bready(corew$cpu_imem_master_bready),
		.cpu_imem_master_arid(corew$cpu_imem_master_arid),
		.cpu_imem_master_araddr(corew$cpu_imem_master_araddr),
		.cpu_imem_master_arlen(corew$cpu_imem_master_arlen),
		.cpu_imem_master_arsize(corew$cpu_imem_master_arsize),
		.cpu_imem_master_arburst(corew$cpu_imem_master_arburst),
		.cpu_imem_master_arlock(corew$cpu_imem_master_arlock),
		.cpu_imem_master_arcache(corew$cpu_imem_master_arcache),
		.cpu_imem_master_arprot(corew$cpu_imem_master_arprot),
		.cpu_imem_master_arqos(corew$cpu_imem_master_arqos),
		.cpu_imem_master_arregion(corew$cpu_imem_master_arregion),
		.cpu_imem_master_arvalid(corew$cpu_imem_master_arvalid),
		.cpu_imem_master_rready(corew$cpu_imem_master_rready),
		.cpu_dmem_master_awid(corew$cpu_dmem_master_awid),
		.cpu_dmem_master_awaddr(corew$cpu_dmem_master_awaddr),
		.cpu_dmem_master_awlen(corew$cpu_dmem_master_awlen),
		.cpu_dmem_master_awsize(corew$cpu_dmem_master_awsize),
		.cpu_dmem_master_awburst(corew$cpu_dmem_master_awburst),
		.cpu_dmem_master_awlock(corew$cpu_dmem_master_awlock),
		.cpu_dmem_master_awcache(corew$cpu_dmem_master_awcache),
		.cpu_dmem_master_awprot(corew$cpu_dmem_master_awprot),
		.cpu_dmem_master_awqos(corew$cpu_dmem_master_awqos),
		.cpu_dmem_master_awregion(corew$cpu_dmem_master_awregion),
		.cpu_dmem_master_awvalid(corew$cpu_dmem_master_awvalid),
		.cpu_dmem_master_wdata(corew$cpu_dmem_master_wdata),
		.cpu_dmem_master_wstrb(corew$cpu_dmem_master_wstrb),
		.cpu_dmem_master_wlast(corew$cpu_dmem_master_wlast),
		.cpu_dmem_master_wvalid(corew$cpu_dmem_master_wvalid),
		.cpu_dmem_master_bready(corew$cpu_dmem_master_bready),
		.cpu_dmem_master_arid(corew$cpu_dmem_master_arid),
		.cpu_dmem_master_araddr(corew$cpu_dmem_master_araddr),
		.cpu_dmem_master_arlen(corew$cpu_dmem_master_arlen),
		.cpu_dmem_master_arsize(corew$cpu_dmem_master_arsize),
		.cpu_dmem_master_arburst(corew$cpu_dmem_master_arburst),
		.cpu_dmem_master_arlock(corew$cpu_dmem_master_arlock),
		.cpu_dmem_master_arcache(corew$cpu_dmem_master_arcache),
		.cpu_dmem_master_arprot(corew$cpu_dmem_master_arprot),
		.cpu_dmem_master_arqos(corew$cpu_dmem_master_arqos),
		.cpu_dmem_master_arregion(corew$cpu_dmem_master_arregion),
		.cpu_dmem_master_arvalid(corew$cpu_dmem_master_arvalid),
		.cpu_dmem_master_rready(corew$cpu_dmem_master_rready));

  // submodule mem0_controller
  mkMem_Controller mem0_controller(.CLK(CLK),
				   .RST_N(RST_N),
				   .set_addr_map_addr_base(mem0_controller$set_addr_map_addr_base),
				   .set_addr_map_addr_lim(mem0_controller$set_addr_map_addr_lim),
				   .set_watch_tohost_tohost_addr(mem0_controller$set_watch_tohost_tohost_addr),
				   .set_watch_tohost_watch_tohost(mem0_controller$set_watch_tohost_watch_tohost),
				   .slave_araddr(mem0_controller$slave_araddr),
				   .slave_arburst(mem0_controller$slave_arburst),
				   .slave_arcache(mem0_controller$slave_arcache),
				   .slave_arid(mem0_controller$slave_arid),
				   .slave_arlen(mem0_controller$slave_arlen),
				   .slave_arlock(mem0_controller$slave_arlock),
				   .slave_arprot(mem0_controller$slave_arprot),
				   .slave_arqos(mem0_controller$slave_arqos),
				   .slave_arregion(mem0_controller$slave_arregion),
				   .slave_arsize(mem0_controller$slave_arsize),
				   .slave_awaddr(mem0_controller$slave_awaddr),
				   .slave_awburst(mem0_controller$slave_awburst),
				   .slave_awcache(mem0_controller$slave_awcache),
				   .slave_awid(mem0_controller$slave_awid),
				   .slave_awlen(mem0_controller$slave_awlen),
				   .slave_awlock(mem0_controller$slave_awlock),
				   .slave_awprot(mem0_controller$slave_awprot),
				   .slave_awqos(mem0_controller$slave_awqos),
				   .slave_awregion(mem0_controller$slave_awregion),
				   .slave_awsize(mem0_controller$slave_awsize),
				   .slave_bready(mem0_controller$slave_bready),
				   .slave_rready(mem0_controller$slave_rready),
				   .slave_wdata(mem0_controller$slave_wdata),
				   .slave_wlast(mem0_controller$slave_wlast),
				   .slave_wstrb(mem0_controller$slave_wstrb),
				   .slave_wuser(mem0_controller$slave_wuser),
				   .to_raw_mem_response_put(mem0_controller$to_raw_mem_response_put),
				   .EN_server_reset_request_put(mem0_controller$EN_server_reset_request_put),
				   .EN_server_reset_response_get(mem0_controller$EN_server_reset_response_get),
				   .EN_set_addr_map(mem0_controller$EN_set_addr_map),
				   .slave_awvalid(mem0_controller$slave_awvalid),
				   .slave_wvalid(mem0_controller$slave_wvalid),
				   .slave_arvalid(mem0_controller$slave_arvalid),
				   .EN_to_raw_mem_request_get(mem0_controller$EN_to_raw_mem_request_get),
				   .EN_to_raw_mem_response_put(mem0_controller$EN_to_raw_mem_response_put),
				   .EN_set_watch_tohost(mem0_controller$EN_set_watch_tohost),
				   .RDY_server_reset_request_put(mem0_controller$RDY_server_reset_request_put),
				   .RDY_server_reset_response_get(mem0_controller$RDY_server_reset_response_get),
				   .RDY_set_addr_map(mem0_controller$RDY_set_addr_map),
				   .slave_awready(mem0_controller$slave_awready),
				   .slave_wready(mem0_controller$slave_wready),
				   .slave_bid(mem0_controller$slave_bid),
				   .slave_bresp(mem0_controller$slave_bresp),
				   .slave_bvalid(mem0_controller$slave_bvalid),
				   .slave_arready(mem0_controller$slave_arready),
				   .slave_rid(mem0_controller$slave_rid),
				   .slave_rdata(mem0_controller$slave_rdata),
				   .slave_rresp(mem0_controller$slave_rresp),
				   .slave_rlast(mem0_controller$slave_rlast),
				   .slave_ruser(mem0_controller$slave_ruser),
				   .slave_rvalid(mem0_controller$slave_rvalid),
				   .to_raw_mem_request_get(mem0_controller$to_raw_mem_request_get),
				   .RDY_to_raw_mem_request_get(mem0_controller$RDY_to_raw_mem_request_get),
				   .RDY_to_raw_mem_response_put(mem0_controller$RDY_to_raw_mem_response_put),
				   .status(mem0_controller$status),
				   .RDY_set_watch_tohost());

  // submodule mem0_controller_axi4_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) mem0_controller_axi4_deburster_countWriteRspFF(.RST(RST_N),
									      .CLK(CLK),
									      .D_IN(mem0_controller_axi4_deburster_countWriteRspFF$D_IN),
									      .ENQ(mem0_controller_axi4_deburster_countWriteRspFF$ENQ),
									      .DEQ(mem0_controller_axi4_deburster_countWriteRspFF$DEQ),
									      .CLR(mem0_controller_axi4_deburster_countWriteRspFF$CLR),
									      .D_OUT(mem0_controller_axi4_deburster_countWriteRspFF$D_OUT),
									      .FULL_N(mem0_controller_axi4_deburster_countWriteRspFF$FULL_N),
									      .EMPTY_N(mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_arff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_inShim_arff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_inShim_arff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_inShim_arff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_inShim_arff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_inShim_arff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_inShim_arff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_inShim_arff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_awff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_inShim_awff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_inShim_awff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_inShim_awff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_inShim_awff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_inShim_awff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_inShim_awff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_inShim_awff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_bff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_bff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_bff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_bff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_bff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_bff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_bff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_bff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_rff
  FIFO2 #(.width(32'd75),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_rff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_rff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_rff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_rff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_rff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_rff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_rff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_rff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_wff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_wff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_wff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_wff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_wff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_wff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_wff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_wff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) mem0_controller_axi4_deburster_lastReadRspFF(.RST(RST_N),
									    .CLK(CLK),
									    .D_IN(mem0_controller_axi4_deburster_lastReadRspFF$D_IN),
									    .ENQ(mem0_controller_axi4_deburster_lastReadRspFF$ENQ),
									    .DEQ(mem0_controller_axi4_deburster_lastReadRspFF$DEQ),
									    .CLR(mem0_controller_axi4_deburster_lastReadRspFF$CLR),
									    .D_OUT(mem0_controller_axi4_deburster_lastReadRspFF$D_OUT),
									    .FULL_N(mem0_controller_axi4_deburster_lastReadRspFF$FULL_N),
									    .EMPTY_N(mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_arff(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(mem0_controller_axi4_deburster_outShim_arff$D_IN),
								       .ENQ(mem0_controller_axi4_deburster_outShim_arff$ENQ),
								       .DEQ(mem0_controller_axi4_deburster_outShim_arff$DEQ),
								       .CLR(mem0_controller_axi4_deburster_outShim_arff$CLR),
								       .D_OUT(mem0_controller_axi4_deburster_outShim_arff$D_OUT),
								       .FULL_N(mem0_controller_axi4_deburster_outShim_arff$FULL_N),
								       .EMPTY_N(mem0_controller_axi4_deburster_outShim_arff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_awff(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(mem0_controller_axi4_deburster_outShim_awff$D_IN),
								       .ENQ(mem0_controller_axi4_deburster_outShim_awff$ENQ),
								       .DEQ(mem0_controller_axi4_deburster_outShim_awff$DEQ),
								       .CLR(mem0_controller_axi4_deburster_outShim_awff$CLR),
								       .D_OUT(mem0_controller_axi4_deburster_outShim_awff$D_OUT),
								       .FULL_N(mem0_controller_axi4_deburster_outShim_awff$FULL_N),
								       .EMPTY_N(mem0_controller_axi4_deburster_outShim_awff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_bff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_bff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_bff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_bff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_bff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_bff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_bff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_bff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_rff
  FIFO2 #(.width(32'd75),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_rff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_rff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_rff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_rff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_rff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_rff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_rff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_rff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_wff
  FIFO2 #(.width(32'd74),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_wff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_wff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_wff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_wff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_wff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_wff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_wff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_wff$EMPTY_N));

  // submodule mem_ar_buffer_ff
  FIFO1 #(.width(32'd100), .guarded(32'd0)) mem_ar_buffer_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(mem_ar_buffer_ff$D_IN),
							     .ENQ(mem_ar_buffer_ff$ENQ),
							     .DEQ(mem_ar_buffer_ff$DEQ),
							     .CLR(mem_ar_buffer_ff$CLR),
							     .D_OUT(mem_ar_buffer_ff$D_OUT),
							     .FULL_N(mem_ar_buffer_ff$FULL_N),
							     .EMPTY_N(mem_ar_buffer_ff$EMPTY_N));

  // submodule mem_ar_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) mem_ar_buffer_firstValid(.CLK(CLK),
								   .D_IN(mem_ar_buffer_firstValid$D_IN),
								   .EN(mem_ar_buffer_firstValid$EN),
								   .Q_OUT(mem_ar_buffer_firstValid$Q_OUT));

  // submodule mem_aw_buffer_ff
  FIFO1 #(.width(32'd100), .guarded(32'd0)) mem_aw_buffer_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(mem_aw_buffer_ff$D_IN),
							     .ENQ(mem_aw_buffer_ff$ENQ),
							     .DEQ(mem_aw_buffer_ff$DEQ),
							     .CLR(mem_aw_buffer_ff$CLR),
							     .D_OUT(mem_aw_buffer_ff$D_OUT),
							     .FULL_N(mem_aw_buffer_ff$FULL_N),
							     .EMPTY_N(mem_aw_buffer_ff$EMPTY_N));

  // submodule mem_aw_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) mem_aw_buffer_firstValid(.CLK(CLK),
								   .D_IN(mem_aw_buffer_firstValid$D_IN),
								   .EN(mem_aw_buffer_firstValid$EN),
								   .Q_OUT(mem_aw_buffer_firstValid$Q_OUT));

  // submodule mem_w_buffer_ff
  FIFO1 #(.width(32'd74), .guarded(32'd0)) mem_w_buffer_ff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(mem_w_buffer_ff$D_IN),
							   .ENQ(mem_w_buffer_ff$ENQ),
							   .DEQ(mem_w_buffer_ff$DEQ),
							   .CLR(mem_w_buffer_ff$CLR),
							   .D_OUT(mem_w_buffer_ff$D_OUT),
							   .FULL_N(mem_w_buffer_ff$FULL_N),
							   .EMPTY_N(mem_w_buffer_ff$EMPTY_N));

  // submodule mem_w_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) mem_w_buffer_firstValid(.CLK(CLK),
								  .D_IN(mem_w_buffer_firstValid$D_IN),
								  .EN(mem_w_buffer_firstValid$EN),
								  .Q_OUT(mem_w_buffer_firstValid$Q_OUT));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_range(),
		    .m_plic_addr_range(),
		    .m_uart0_addr_range(soc_map$m_uart0_addr_range),
		    .m_boot_rom_addr_range(soc_map$m_boot_rom_addr_range),
		    .m_mem0_controller_addr_range(soc_map$m_mem0_controller_addr_range),
		    .m_tcm_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule uart0
  mkUART uart0(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_from_console_put(uart0$put_from_console_put),
	       .set_addr_map_addr_base(uart0$set_addr_map_addr_base),
	       .set_addr_map_addr_lim(uart0$set_addr_map_addr_lim),
	       .slave_araddr(uart0$slave_araddr),
	       .slave_arburst(uart0$slave_arburst),
	       .slave_arcache(uart0$slave_arcache),
	       .slave_arid(uart0$slave_arid),
	       .slave_arlen(uart0$slave_arlen),
	       .slave_arlock(uart0$slave_arlock),
	       .slave_arprot(uart0$slave_arprot),
	       .slave_arqos(uart0$slave_arqos),
	       .slave_arregion(uart0$slave_arregion),
	       .slave_arsize(uart0$slave_arsize),
	       .slave_awaddr(uart0$slave_awaddr),
	       .slave_awburst(uart0$slave_awburst),
	       .slave_awcache(uart0$slave_awcache),
	       .slave_awid(uart0$slave_awid),
	       .slave_awlen(uart0$slave_awlen),
	       .slave_awlock(uart0$slave_awlock),
	       .slave_awprot(uart0$slave_awprot),
	       .slave_awqos(uart0$slave_awqos),
	       .slave_awregion(uart0$slave_awregion),
	       .slave_awsize(uart0$slave_awsize),
	       .slave_bready(uart0$slave_bready),
	       .slave_rready(uart0$slave_rready),
	       .slave_wdata(uart0$slave_wdata),
	       .slave_wlast(uart0$slave_wlast),
	       .slave_wstrb(uart0$slave_wstrb),
	       .slave_wuser(uart0$slave_wuser),
	       .EN_server_reset_request_put(uart0$EN_server_reset_request_put),
	       .EN_server_reset_response_get(uart0$EN_server_reset_response_get),
	       .EN_set_addr_map(uart0$EN_set_addr_map),
	       .slave_awvalid(uart0$slave_awvalid),
	       .slave_wvalid(uart0$slave_wvalid),
	       .slave_arvalid(uart0$slave_arvalid),
	       .EN_get_to_console_get(uart0$EN_get_to_console_get),
	       .EN_put_from_console_put(uart0$EN_put_from_console_put),
	       .RDY_server_reset_request_put(uart0$RDY_server_reset_request_put),
	       .RDY_server_reset_response_get(uart0$RDY_server_reset_response_get),
	       .RDY_set_addr_map(),
	       .slave_awready(uart0$slave_awready),
	       .slave_wready(uart0$slave_wready),
	       .slave_bid(uart0$slave_bid),
	       .slave_bresp(uart0$slave_bresp),
	       .slave_bvalid(uart0$slave_bvalid),
	       .slave_arready(uart0$slave_arready),
	       .slave_rid(uart0$slave_rid),
	       .slave_rdata(uart0$slave_rdata),
	       .slave_rresp(uart0$slave_rresp),
	       .slave_rlast(uart0$slave_rlast),
	       .slave_ruser(),
	       .slave_rvalid(uart0$slave_rvalid),
	       .get_to_console_get(uart0$get_to_console_get),
	       .RDY_get_to_console_get(uart0$RDY_get_to_console_get),
	       .RDY_put_from_console_put(uart0$RDY_put_from_console_put),
	       .intr(uart0$intr));

  // submodule uart0_slave_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) uart0_slave_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(uart0_slave_ar_buffer_ff$D_IN),
						    .ENQ(uart0_slave_ar_buffer_ff$ENQ),
						    .DEQ(uart0_slave_ar_buffer_ff$DEQ),
						    .CLR(uart0_slave_ar_buffer_ff$CLR),
						    .D_OUT(uart0_slave_ar_buffer_ff$D_OUT),
						    .FULL_N(uart0_slave_ar_buffer_ff$FULL_N),
						    .EMPTY_N(uart0_slave_ar_buffer_ff$EMPTY_N));

  // submodule uart0_slave_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) uart0_slave_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(uart0_slave_ar_buffer_firstValid$D_IN),
							    .EN(uart0_slave_ar_buffer_firstValid$EN),
							    .Q_OUT(uart0_slave_ar_buffer_firstValid$Q_OUT));

  // submodule uart0_slave_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) uart0_slave_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(uart0_slave_aw_buffer_ff$D_IN),
						    .ENQ(uart0_slave_aw_buffer_ff$ENQ),
						    .DEQ(uart0_slave_aw_buffer_ff$DEQ),
						    .CLR(uart0_slave_aw_buffer_ff$CLR),
						    .D_OUT(uart0_slave_aw_buffer_ff$D_OUT),
						    .FULL_N(uart0_slave_aw_buffer_ff$FULL_N),
						    .EMPTY_N(uart0_slave_aw_buffer_ff$EMPTY_N));

  // submodule uart0_slave_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) uart0_slave_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(uart0_slave_aw_buffer_firstValid$D_IN),
							    .EN(uart0_slave_aw_buffer_firstValid$EN),
							    .Q_OUT(uart0_slave_aw_buffer_firstValid$Q_OUT));

  // submodule uart0_slave_w_buffer_ff
  FIFO1 #(.width(32'd74),
	  .guarded(32'd0)) uart0_slave_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(uart0_slave_w_buffer_ff$D_IN),
						   .ENQ(uart0_slave_w_buffer_ff$ENQ),
						   .DEQ(uart0_slave_w_buffer_ff$DEQ),
						   .CLR(uart0_slave_w_buffer_ff$CLR),
						   .D_OUT(uart0_slave_w_buffer_ff$D_OUT),
						   .FULL_N(uart0_slave_w_buffer_ff$FULL_N),
						   .EMPTY_N(uart0_slave_w_buffer_ff$EMPTY_N));

  // submodule uart0_slave_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) uart0_slave_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(uart0_slave_w_buffer_firstValid$D_IN),
							   .EN(uart0_slave_w_buffer_firstValid$EN),
							   .Q_OUT(uart0_slave_w_buffer_firstValid$Q_OUT));

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N &&
	     br_aw_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N &&
	     br_w_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     boot_rom$slave_bvalid &&
	     boot_rom_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N &&
	     br_ar_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     boot_rom$slave_rvalid &&
	     boot_rom_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // rule RL_mkConnectionGetPut_5
  assign CAN_FIRE_RL_mkConnectionGetPut_5 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N &&
	     mem_aw_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_5 =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // rule RL_mkConnectionGetPut_6
  assign CAN_FIRE_RL_mkConnectionGetPut_6 =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N &&
	     mem_w_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_6 =
	     CAN_FIRE_RL_mkConnectionGetPut_6 ;

  // rule RL_mkConnectionGetPut_7
  assign CAN_FIRE_RL_mkConnectionGetPut_7 =
	     mem0_controller$slave_bvalid &&
	     mem0_controller_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_7 =
	     CAN_FIRE_RL_mkConnectionGetPut_7 ;

  // rule RL_mkConnectionGetPut_8
  assign CAN_FIRE_RL_mkConnectionGetPut_8 =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N &&
	     mem_ar_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_8 =
	     CAN_FIRE_RL_mkConnectionGetPut_8 ;

  // rule RL_mkConnectionGetPut_9
  assign CAN_FIRE_RL_mkConnectionGetPut_9 =
	     mem0_controller$slave_rvalid &&
	     mem0_controller_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_9 =
	     CAN_FIRE_RL_mkConnectionGetPut_9 ;

  // rule RL_rl_connect_external_interrupt_requests
  assign CAN_FIRE_RL_rl_connect_external_interrupt_requests = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_external_interrupt_requests = 1'd1 ;

  // rule RL_boot_rom_axi4_deburster_handle_write_rsp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp =
	     boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N &&
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N &&
	     (!boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d97 ||
	      !boot_rom_axi4_deburster_inSerial_shim_bff_rv[9]) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp ;

  // rule RL_boot_rom_axi4_deburster_forward_read_rsp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp =
	     !boot_rom_axi4_deburster_inSerial_shim_rff_rv[75] &&
	     boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N &&
	     boot_rom_axi4_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;

  // rule RL_mem0_controller_axi4_deburster_handle_write_rsp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp =
	     mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N &&
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N &&
	     (!mem0_controller_axi4_deburster_countWriteRspFF_ETC___d238 ||
	      !mem0_controller_axi4_deburster_inSerial_shim_bff_rv[9]) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp ;

  // rule RL_mem0_controller_axi4_deburster_forward_read_rsp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp =
	     !mem0_controller_axi4_deburster_inSerial_shim_rff_rv[75] &&
	     mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N &&
	     mem0_controller_axi4_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;

  // rule RL_br_aw_forwardFlit
  assign CAN_FIRE_RL_br_aw_forwardFlit =
	     br_aw_buffer_firstValid$Q_OUT &&
	     (br_aw_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut) ;
  assign WILL_FIRE_RL_br_aw_forwardFlit = CAN_FIRE_RL_br_aw_forwardFlit ;

  // rule RL_br_aw_dropFlit
  assign CAN_FIRE_RL_br_aw_dropFlit =
	     (br_aw_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut) &&
	     boot_rom$slave_awready ;
  assign WILL_FIRE_RL_br_aw_dropFlit = CAN_FIRE_RL_br_aw_dropFlit ;

  // rule RL_br_aw_buffer_enqueue
  assign CAN_FIRE_RL_br_aw_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut &&
	     (!CAN_FIRE_RL_br_aw_dropFlit || br_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_br_aw_buffer_enqueue =
	     CAN_FIRE_RL_br_aw_buffer_enqueue ;

  // rule RL_br_aw_buffer_dequeue
  assign CAN_FIRE_RL_br_aw_buffer_dequeue =
	     CAN_FIRE_RL_br_aw_dropFlit && br_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_br_aw_buffer_dequeue =
	     CAN_FIRE_RL_br_aw_buffer_dequeue ;

  // rule RL_br_w_forwardFlit
  assign CAN_FIRE_RL_br_w_forwardFlit =
	     br_w_buffer_firstValid$Q_OUT &&
	     (br_w_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_1) ;
  assign WILL_FIRE_RL_br_w_forwardFlit = CAN_FIRE_RL_br_w_forwardFlit ;

  // rule RL_br_w_dropFlit
  assign CAN_FIRE_RL_br_w_dropFlit =
	     (br_w_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_1) &&
	     boot_rom$slave_wready ;
  assign WILL_FIRE_RL_br_w_dropFlit = CAN_FIRE_RL_br_w_dropFlit ;

  // rule RL_br_w_buffer_enqueue
  assign CAN_FIRE_RL_br_w_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_1 &&
	     (!CAN_FIRE_RL_br_w_dropFlit || br_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_br_w_buffer_enqueue = CAN_FIRE_RL_br_w_buffer_enqueue ;

  // rule RL_br_w_buffer_dequeue
  assign CAN_FIRE_RL_br_w_buffer_dequeue =
	     CAN_FIRE_RL_br_w_dropFlit && br_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_br_w_buffer_dequeue = CAN_FIRE_RL_br_w_buffer_dequeue ;

  // rule RL_br_b_forwardReady
  assign CAN_FIRE_RL_br_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_br_b_forwardReady = 1'd1 ;

  // rule RL_br_ar_forwardFlit
  assign CAN_FIRE_RL_br_ar_forwardFlit =
	     br_ar_buffer_firstValid$Q_OUT &&
	     (br_ar_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_3) ;
  assign WILL_FIRE_RL_br_ar_forwardFlit = CAN_FIRE_RL_br_ar_forwardFlit ;

  // rule RL_br_ar_dropFlit
  assign CAN_FIRE_RL_br_ar_dropFlit =
	     (br_ar_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_3) &&
	     boot_rom$slave_arready ;
  assign WILL_FIRE_RL_br_ar_dropFlit = CAN_FIRE_RL_br_ar_dropFlit ;

  // rule RL_br_ar_buffer_enqueue
  assign CAN_FIRE_RL_br_ar_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_3 &&
	     (!CAN_FIRE_RL_br_ar_dropFlit || br_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_br_ar_buffer_enqueue =
	     CAN_FIRE_RL_br_ar_buffer_enqueue ;

  // rule RL_br_ar_buffer_dequeue
  assign CAN_FIRE_RL_br_ar_buffer_dequeue =
	     CAN_FIRE_RL_br_ar_dropFlit && br_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_br_ar_buffer_dequeue =
	     CAN_FIRE_RL_br_ar_buffer_dequeue ;

  // rule RL_br_r_forwardReady
  assign CAN_FIRE_RL_br_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_br_r_forwardReady = 1'd1 ;

  // rule RL_ug_boot_rom_slave_u_b_setPeek
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_b_setPeek =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_b_setPeek =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;

  // rule RL_ug_boot_rom_slave_u_r_setPeek
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_r_setPeek =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_r_setPeek =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;

  // rule RL_mem_aw_forwardFlit
  assign CAN_FIRE_RL_mem_aw_forwardFlit =
	     mem_aw_buffer_firstValid$Q_OUT &&
	     (mem_aw_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_5) ;
  assign WILL_FIRE_RL_mem_aw_forwardFlit = CAN_FIRE_RL_mem_aw_forwardFlit ;

  // rule RL_mem_aw_dropFlit
  assign CAN_FIRE_RL_mem_aw_dropFlit =
	     (mem_aw_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_5) &&
	     mem0_controller$slave_awready ;
  assign WILL_FIRE_RL_mem_aw_dropFlit = CAN_FIRE_RL_mem_aw_dropFlit ;

  // rule RL_mem_aw_buffer_enqueue
  assign CAN_FIRE_RL_mem_aw_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_5 &&
	     (!CAN_FIRE_RL_mem_aw_dropFlit || mem_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem_aw_buffer_enqueue =
	     CAN_FIRE_RL_mem_aw_buffer_enqueue ;

  // rule RL_mem_aw_buffer_dequeue
  assign CAN_FIRE_RL_mem_aw_buffer_dequeue =
	     CAN_FIRE_RL_mem_aw_dropFlit && mem_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_mem_aw_buffer_dequeue =
	     CAN_FIRE_RL_mem_aw_buffer_dequeue ;

  // rule RL_mem_w_forwardFlit
  assign CAN_FIRE_RL_mem_w_forwardFlit =
	     mem_w_buffer_firstValid$Q_OUT &&
	     (mem_w_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_6) ;
  assign WILL_FIRE_RL_mem_w_forwardFlit = CAN_FIRE_RL_mem_w_forwardFlit ;

  // rule RL_mem_w_dropFlit
  assign CAN_FIRE_RL_mem_w_dropFlit =
	     (mem_w_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_6) &&
	     mem0_controller$slave_wready ;
  assign WILL_FIRE_RL_mem_w_dropFlit = CAN_FIRE_RL_mem_w_dropFlit ;

  // rule RL_mem_w_buffer_enqueue
  assign CAN_FIRE_RL_mem_w_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_6 &&
	     (!CAN_FIRE_RL_mem_w_dropFlit || mem_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem_w_buffer_enqueue =
	     CAN_FIRE_RL_mem_w_buffer_enqueue ;

  // rule RL_mem_w_buffer_dequeue
  assign CAN_FIRE_RL_mem_w_buffer_dequeue =
	     CAN_FIRE_RL_mem_w_dropFlit && mem_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_mem_w_buffer_dequeue =
	     CAN_FIRE_RL_mem_w_buffer_dequeue ;

  // rule RL_mem_b_forwardReady
  assign CAN_FIRE_RL_mem_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_mem_b_forwardReady = 1'd1 ;

  // rule RL_mem_ar_forwardFlit
  assign CAN_FIRE_RL_mem_ar_forwardFlit =
	     mem_ar_buffer_firstValid$Q_OUT &&
	     (mem_ar_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_8) ;
  assign WILL_FIRE_RL_mem_ar_forwardFlit = CAN_FIRE_RL_mem_ar_forwardFlit ;

  // rule RL_mem_ar_dropFlit
  assign CAN_FIRE_RL_mem_ar_dropFlit =
	     (mem_ar_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_8) &&
	     mem0_controller$slave_arready ;
  assign WILL_FIRE_RL_mem_ar_dropFlit = CAN_FIRE_RL_mem_ar_dropFlit ;

  // rule RL_mem_ar_buffer_enqueue
  assign CAN_FIRE_RL_mem_ar_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_8 &&
	     (!CAN_FIRE_RL_mem_ar_dropFlit || mem_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem_ar_buffer_enqueue =
	     CAN_FIRE_RL_mem_ar_buffer_enqueue ;

  // rule RL_mem_ar_buffer_dequeue
  assign CAN_FIRE_RL_mem_ar_buffer_dequeue =
	     CAN_FIRE_RL_mem_ar_dropFlit && mem_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_mem_ar_buffer_dequeue =
	     CAN_FIRE_RL_mem_ar_buffer_dequeue ;

  // rule RL_mem_r_forwardReady
  assign CAN_FIRE_RL_mem_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_mem_r_forwardReady = 1'd1 ;

  // rule RL_ug_mem0_slave_u_b_setPeek
  assign CAN_FIRE_RL_ug_mem0_slave_u_b_setPeek =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_b_setPeek =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;

  // rule RL_ug_mem0_slave_u_r_setPeek
  assign CAN_FIRE_RL_ug_mem0_slave_u_r_setPeek =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_r_setPeek =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;

  // rule RL_bus_checkSinkReady
  assign CAN_FIRE_RL_bus_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_checkSinkReady = 1'd1 ;

  // rule RL_bus_checkSinkReady_1
  assign CAN_FIRE_RL_bus_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_checkSinkReady_1 = 1'd1 ;

  // rule RL_bus_checkSinkReady_2
  assign CAN_FIRE_RL_bus_checkSinkReady_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_checkSinkReady_2 = 1'd1 ;

  // rule RL_bus_craftReq
  assign CAN_FIRE_RL_bus_craftReq =
	     bus_ifcs_0_innerRoute$EMPTY_N && bus_ifcs_0_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_bus_craftReq = CAN_FIRE_RL_bus_craftReq ;

  // rule RL_bus_craftReq_1
  assign CAN_FIRE_RL_bus_craftReq_1 =
	     bus_ifcs_1_innerRoute$EMPTY_N && bus_ifcs_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_bus_craftReq_1 = CAN_FIRE_RL_bus_craftReq_1 ;

  // rule RL_bus_arbitrate
  assign CAN_FIRE_RL_bus_arbitrate =
	     (CAN_FIRE_RL_bus_craftReq && bus_reqWires_0$wget ||
	      CAN_FIRE_RL_bus_craftReq_1 && bus_reqWires_1$wget) &&
	     !bus_state ;
  assign WILL_FIRE_RL_bus_arbitrate = CAN_FIRE_RL_bus_arbitrate ;

  // rule RL_bus_source_selected
  assign CAN_FIRE_RL_bus_source_selected =
	     (!bus_ifcs_0_innerRoute$EMPTY_N ||
	      bus_ifcs_0_innerReq$EMPTY_N) &&
	     !bus_state &&
	     MUX_bus_activeSource_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_source_selected = CAN_FIRE_RL_bus_source_selected ;

  // rule RL_bus_burst
  assign CAN_FIRE_RL_bus_burst =
	     bus_ifcs_0_innerReq$EMPTY_N && bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_state_673_AND_bus_activeSource_0_746_747_A_ETC___d1749 ;
  assign WILL_FIRE_RL_bus_burst = CAN_FIRE_RL_bus_burst ;

  // rule RL_bus_source_selected_1
  assign CAN_FIRE_RL_bus_source_selected_1 =
	     (!bus_ifcs_1_innerRoute$EMPTY_N ||
	      bus_ifcs_1_innerReq$EMPTY_N) &&
	     !bus_state &&
	     MUX_bus_activeSource_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_source_selected_1 =
	     CAN_FIRE_RL_bus_source_selected_1 ;

  // rule RL_bus_burst_1
  assign CAN_FIRE_RL_bus_burst_1 =
	     bus_ifcs_1_innerReq$EMPTY_N && bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_state_673_AND_bus_activeSource_1_790_791_A_ETC___d1793 ;
  assign WILL_FIRE_RL_bus_burst_1 = CAN_FIRE_RL_bus_burst_1 ;

  // rule __me_check_194
  assign CAN_FIRE___me_check_194 = 1'b1 ;
  assign WILL_FIRE___me_check_194 = 1'b1 ;

  // rule __me_check_196
  assign CAN_FIRE___me_check_196 = 1'b1 ;
  assign WILL_FIRE___me_check_196 = 1'b1 ;

  // rule RL_bus_sink_selected
  assign CAN_FIRE_RL_bus_sink_selected =
	     IF_bus_split_0_flitLeft_261_EQ_0_262_THEN_bus__ETC___d1618 &&
	     bus_flitToSink_0$whas ;
  assign WILL_FIRE_RL_bus_sink_selected = CAN_FIRE_RL_bus_sink_selected ;

  // rule RL_bus_sink_selected_1
  assign CAN_FIRE_RL_bus_sink_selected_1 =
	     IF_bus_split_1_flitLeft_290_EQ_0_291_THEN_bus__ETC___d1619 &&
	     bus_flitToSink_1$whas ;
  assign WILL_FIRE_RL_bus_sink_selected_1 = CAN_FIRE_RL_bus_sink_selected_1 ;

  // rule RL_bus_sink_selected_2
  assign CAN_FIRE_RL_bus_sink_selected_2 =
	     IF_bus_split_2_flitLeft_319_EQ_0_320_THEN_bus__ETC___d1620 &&
	     bus_flitToSink_2$whas ;
  assign WILL_FIRE_RL_bus_sink_selected_2 = CAN_FIRE_RL_bus_sink_selected_2 ;

  // rule __me_check_198
  assign CAN_FIRE___me_check_198 = 1'b1 ;
  assign WILL_FIRE___me_check_198 = 1'b1 ;

  // rule RL_bus_split_0_putFirst
  assign CAN_FIRE_RL_bus_split_0_putFirst =
	     bus_split_0_doPut_whas__253_AND_bus_split_0_do_ETC___d1260 &&
	     bus_split_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_split_0_putFirst =
	     CAN_FIRE_RL_bus_split_0_putFirst ;

  // rule RL_bus_ssNoSynth_0_aw_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit =
	     !boot_rom_axi4_deburster_inShim_awff$FULL_N ||
	     bus_ssNoSynth_0_aw_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_0_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit ;

  // rule RL_ug_boot_rom_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut =
	     ug_boot_rom_slave_u_aw_putWire$whas &&
	     !boot_rom_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut ;

  // rule RL_bus_ssNoSynth_0_aw_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit =
	     (bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_0_flitLeft$write_1__SEL_2) &&
	     boot_rom_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW =
	     boot_rom_axi4_deburster_inShim_awff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_awff_rv[100] &&
	     boot_rom_axi4_deburster_inSerial_state == 2'd0 &&
	     (boot_rom_axi4_deburster_inSerial_lastWasRead ||
	      !boot_rom_axi4_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;

  // rule RL_bus_ssNoSynth_0_aw_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue =
	     MUX_bus_split_0_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit ||
	      bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_0_aw_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit &&
	     bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue ;

  // rule RL_bus_split_0_putOther
  assign CAN_FIRE_RL_bus_split_0_putOther =
	     CAN_FIRE_RL_bus_sink_selected &&
	     (!bus_split_0_doPut$wget[173] ||
	      bus_ssNoSynth_0_w_buffer_ff$FULL_N) &&
	     bus_split_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_split_0_putOther =
	     CAN_FIRE_RL_bus_split_0_putOther ;

  // rule RL_bus_ssNoSynth_0_w_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit =
	     !boot_rom_axi4_deburster_inShim_wff$FULL_N ||
	     bus_ssNoSynth_0_w_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_0_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit ;

  // rule RL_ug_boot_rom_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut =
	     ug_boot_rom_slave_u_w_putWire$whas &&
	     !boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut ;

  // rule RL_bus_ssNoSynth_0_w_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit =
	     (bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_0_w_buffer_enqw$whas) &&
	     boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_w_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit ;

  // rule RL_bus_ssNoSynth_0_w_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue =
	     bus_ssNoSynth_0_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit ||
	      bus_ssNoSynth_0_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_0_w_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit &&
	     bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue ;

  // rule RL_bus_split_1_putFirst
  assign CAN_FIRE_RL_bus_split_1_putFirst =
	     bus_split_1_doPut_whas__282_AND_bus_split_1_do_ETC___d1289 &&
	     bus_split_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_split_1_putFirst =
	     CAN_FIRE_RL_bus_split_1_putFirst ;

  // rule RL_bus_ssNoSynth_1_aw_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit =
	     !mem0_controller_axi4_deburster_inShim_awff$FULL_N ||
	     bus_ssNoSynth_1_aw_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_1_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit ;

  // rule RL_ug_mem0_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut =
	     ug_mem0_slave_u_aw_putWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut ;

  // rule RL_bus_ssNoSynth_1_aw_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit =
	     (bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_1_flitLeft$write_1__SEL_2) &&
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW =
	     mem0_controller_axi4_deburster_inShim_awff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_awff_rv[100] &&
	     mem0_controller_axi4_deburster_inSerial_state == 2'd0 &&
	     (mem0_controller_axi4_deburster_inSerial_lastWasRead ||
	      !mem0_controller_axi4_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;

  // rule RL_bus_ssNoSynth_1_aw_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue =
	     MUX_bus_split_1_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit ||
	      bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_1_aw_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit &&
	     bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue ;

  // rule RL_bus_split_1_putOther
  assign CAN_FIRE_RL_bus_split_1_putOther =
	     CAN_FIRE_RL_bus_sink_selected_1 &&
	     (!bus_split_1_doPut$wget[173] ||
	      bus_ssNoSynth_1_w_buffer_ff$FULL_N) &&
	     bus_split_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_split_1_putOther =
	     CAN_FIRE_RL_bus_split_1_putOther ;

  // rule RL_bus_ssNoSynth_1_w_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit =
	     !mem0_controller_axi4_deburster_inShim_wff$FULL_N ||
	     bus_ssNoSynth_1_w_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_1_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit ;

  // rule RL_ug_mem0_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_w_warnDoPut =
	     ug_mem0_slave_u_w_putWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_w_warnDoPut ;

  // rule RL_bus_ssNoSynth_1_w_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit =
	     (bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_1_w_buffer_enqw$whas) &&
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_w_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit ;

  // rule RL_bus_ssNoSynth_1_w_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue =
	     bus_ssNoSynth_1_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit ||
	      bus_ssNoSynth_1_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_1_w_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit &&
	     bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue ;

  // rule RL_bus_split_2_putFirst
  assign CAN_FIRE_RL_bus_split_2_putFirst =
	     bus_split_2_doPut_whas__311_AND_bus_split_2_do_ETC___d1318 &&
	     bus_split_2_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_split_2_putFirst =
	     CAN_FIRE_RL_bus_split_2_putFirst ;

  // rule RL_bus_ssNoSynth_2_aw_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit =
	     !uart0_slave_aw_buffer_ff$FULL_N ||
	     bus_ssNoSynth_2_aw_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_2_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit ;

  // rule RL_uart0_slave_aw_forwardFlit
  assign CAN_FIRE_RL_uart0_slave_aw_forwardFlit =
	     uart0_slave_aw_buffer_firstValid$Q_OUT &&
	     (uart0_slave_aw_buffer_ff$EMPTY_N ||
	      uart0_slave_aw_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_uart0_slave_aw_forwardFlit =
	     CAN_FIRE_RL_uart0_slave_aw_forwardFlit ;

  // rule RL_uart0_slave_aw_dropFlit
  assign CAN_FIRE_RL_uart0_slave_aw_dropFlit =
	     (uart0_slave_aw_buffer_ff$EMPTY_N ||
	      uart0_slave_aw_buffer_enqw$whas) &&
	     uart0$slave_awready ;
  assign WILL_FIRE_RL_uart0_slave_aw_dropFlit =
	     CAN_FIRE_RL_uart0_slave_aw_dropFlit ;

  // rule RL_uart0_slave_aw_buffer_enqueue
  assign CAN_FIRE_RL_uart0_slave_aw_buffer_enqueue =
	     uart0_slave_aw_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_uart0_slave_aw_dropFlit ||
	      uart0_slave_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_uart0_slave_aw_buffer_enqueue =
	     CAN_FIRE_RL_uart0_slave_aw_buffer_enqueue ;

  // rule RL_uart0_slave_aw_buffer_dequeue
  assign CAN_FIRE_RL_uart0_slave_aw_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_aw_dropFlit &&
	     uart0_slave_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_uart0_slave_aw_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_aw_buffer_dequeue ;

  // rule RL_bus_ssNoSynth_2_aw_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit =
	     (bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_2_flitLeft$write_1__SEL_2) &&
	     uart0_slave_aw_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit ;

  // rule RL_bus_ssNoSynth_2_aw_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue =
	     MUX_bus_split_2_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit ||
	      bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_2_aw_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit &&
	     bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue ;

  // rule RL_bus_split_2_putOther
  assign CAN_FIRE_RL_bus_split_2_putOther =
	     CAN_FIRE_RL_bus_sink_selected_2 &&
	     (!bus_split_2_doPut$wget[173] ||
	      bus_ssNoSynth_2_w_buffer_ff$FULL_N) &&
	     bus_split_2_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_split_2_putOther =
	     CAN_FIRE_RL_bus_split_2_putOther ;

  // rule RL_bus_ssNoSynth_2_w_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit =
	     !uart0_slave_w_buffer_ff$FULL_N ||
	     bus_ssNoSynth_2_w_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_2_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit ;

  // rule RL_uart0_slave_w_forwardFlit
  assign CAN_FIRE_RL_uart0_slave_w_forwardFlit =
	     uart0_slave_w_buffer_firstValid$Q_OUT &&
	     (uart0_slave_w_buffer_ff$EMPTY_N ||
	      uart0_slave_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_uart0_slave_w_forwardFlit =
	     CAN_FIRE_RL_uart0_slave_w_forwardFlit ;

  // rule RL_uart0_slave_w_dropFlit
  assign CAN_FIRE_RL_uart0_slave_w_dropFlit =
	     (uart0_slave_w_buffer_ff$EMPTY_N ||
	      uart0_slave_w_buffer_enqw$whas) &&
	     uart0$slave_wready ;
  assign WILL_FIRE_RL_uart0_slave_w_dropFlit =
	     CAN_FIRE_RL_uart0_slave_w_dropFlit ;

  // rule RL_uart0_slave_w_buffer_enqueue
  assign CAN_FIRE_RL_uart0_slave_w_buffer_enqueue =
	     uart0_slave_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_uart0_slave_w_dropFlit ||
	      uart0_slave_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_uart0_slave_w_buffer_enqueue =
	     CAN_FIRE_RL_uart0_slave_w_buffer_enqueue ;

  // rule RL_uart0_slave_w_buffer_dequeue
  assign CAN_FIRE_RL_uart0_slave_w_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_w_dropFlit &&
	     uart0_slave_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_uart0_slave_w_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_w_buffer_dequeue ;

  // rule RL_bus_ssNoSynth_2_w_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit =
	     (bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_2_w_buffer_enqw$whas) &&
	     uart0_slave_w_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_w_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit ;

  // rule RL_bus_ssNoSynth_2_w_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue =
	     bus_ssNoSynth_2_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit ||
	      bus_ssNoSynth_2_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_2_w_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit &&
	     bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue ;

  // rule RL_bus_ifcs_0_firstFlit
  assign CAN_FIRE_RL_bus_ifcs_0_firstFlit =
	     corew$cpu_imem_master_wvalid &&
	     IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1340 &&
	     bus_ifcs_0_innerReq$FULL_N &&
	     bus_ifcs_0_innerRoute$FULL_N &&
	     (IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_NOT_ETC___d1347 ||
	      corew$cpu_imem_master_awvalid) &&
	     bus_ifcs_0_state_353_EQ_0_354_AND_IF_NOT_IF_bu_ETC___d1394 ;
  assign WILL_FIRE_RL_bus_ifcs_0_firstFlit =
	     CAN_FIRE_RL_bus_ifcs_0_firstFlit ;

  // rule RL_bus_ifcs_0_followFlits
  assign CAN_FIRE_RL_bus_ifcs_0_followFlits =
	     corew$cpu_imem_master_wvalid &&
	     IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1340 &&
	     bus_ifcs_0_innerReq$FULL_N &&
	     (IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_NOT_ETC___d1347 ||
	      corew$cpu_imem_master_awvalid) &&
	     bus_ifcs_0_state == 2'd1 ;
  assign WILL_FIRE_RL_bus_ifcs_0_followFlits =
	     CAN_FIRE_RL_bus_ifcs_0_followFlits ;

  // rule RL_bus_ifcs_0_nonRoutableFlit
  assign CAN_FIRE_RL_bus_ifcs_0_nonRoutableFlit =
	     IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1340 &&
	     IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_NOT_ETC___d1429 &&
	     bus_ifcs_0_state_353_EQ_0_354_AND_NOT_IF_NOT_I_ETC___d1432 ;
  assign WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit =
	     CAN_FIRE_RL_bus_ifcs_0_nonRoutableFlit ;

  // rule RL_bus_ifcs_0_drainFlits
  assign CAN_FIRE_RL_bus_ifcs_0_drainFlits =
	     IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1340 &&
	     corew$cpu_imem_master_wvalid &&
	     bus_ifcs_0_state == 2'd2 ;
  assign WILL_FIRE_RL_bus_ifcs_0_drainFlits =
	     CAN_FIRE_RL_bus_ifcs_0_drainFlits ;

  // rule __me_check_170
  assign CAN_FIRE___me_check_170 = 1'b1 ;
  assign WILL_FIRE___me_check_170 = 1'b1 ;

  // rule RL_bus_ifcs_0_drainNoRouteResponse
  assign CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse =
	     bus_msNoSynth_0_b_buffer_ff$FULL_N &&
	     bus_ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ifcs_0_drainNoRouteResponse =
	     CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse ;

  // rule RL_bus_ifcs_1_firstFlit
  assign CAN_FIRE_RL_bus_ifcs_1_firstFlit =
	     corew$cpu_dmem_master_wvalid &&
	     IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1457 &&
	     bus_ifcs_1_innerReq$FULL_N &&
	     bus_ifcs_1_innerRoute$FULL_N &&
	     (IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_NOT_ETC___d1464 ||
	      corew$cpu_dmem_master_awvalid) &&
	     bus_ifcs_1_state_470_EQ_0_471_AND_IF_NOT_IF_bu_ETC___d1502 ;
  assign WILL_FIRE_RL_bus_ifcs_1_firstFlit =
	     CAN_FIRE_RL_bus_ifcs_1_firstFlit ;

  // rule RL_bus_ifcs_1_followFlits
  assign CAN_FIRE_RL_bus_ifcs_1_followFlits =
	     corew$cpu_dmem_master_wvalid &&
	     IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1457 &&
	     bus_ifcs_1_innerReq$FULL_N &&
	     (IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_NOT_ETC___d1464 ||
	      corew$cpu_dmem_master_awvalid) &&
	     bus_ifcs_1_state == 2'd1 ;
  assign WILL_FIRE_RL_bus_ifcs_1_followFlits =
	     CAN_FIRE_RL_bus_ifcs_1_followFlits ;

  // rule RL_bus_ifcs_1_nonRoutableFlit
  assign CAN_FIRE_RL_bus_ifcs_1_nonRoutableFlit =
	     IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1457 &&
	     IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_NOT_ETC___d1537 &&
	     bus_ifcs_1_state_470_EQ_0_471_AND_NOT_IF_NOT_I_ETC___d1540 ;
  assign WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit =
	     CAN_FIRE_RL_bus_ifcs_1_nonRoutableFlit ;

  // rule RL_bus_ifcs_1_drainFlits
  assign CAN_FIRE_RL_bus_ifcs_1_drainFlits =
	     IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1457 &&
	     corew$cpu_dmem_master_wvalid &&
	     bus_ifcs_1_state == 2'd2 ;
  assign WILL_FIRE_RL_bus_ifcs_1_drainFlits =
	     CAN_FIRE_RL_bus_ifcs_1_drainFlits ;

  // rule __me_check_177
  assign CAN_FIRE___me_check_177 = 1'b1 ;
  assign WILL_FIRE___me_check_177 = 1'b1 ;

  // rule RL_bus_ifcs_1_drainNoRouteResponse
  assign CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse =
	     bus_msNoSynth_1_b_buffer_ff$FULL_N &&
	     bus_ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ifcs_1_drainNoRouteResponse =
	     CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse ;

  // rule RL_bus_1_checkSinkReady
  assign CAN_FIRE_RL_bus_1_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady = 1'd1 ;

  // rule RL_bus_1_checkSinkReady_1
  assign CAN_FIRE_RL_bus_1_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady_1 = 1'd1 ;

  // rule RL_bus_1_craftReq
  assign CAN_FIRE_RL_bus_1_craftReq =
	     bus_ifcs_0_routeBack$EMPTY_N && bus_ifcs_0_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq = CAN_FIRE_RL_bus_1_craftReq ;

  // rule RL_bus_1_craftReq_1
  assign CAN_FIRE_RL_bus_1_craftReq_1 =
	     bus_ifcs_1_routeBack$EMPTY_N && bus_ifcs_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq_1 = CAN_FIRE_RL_bus_1_craftReq_1 ;

  // rule RL_bus_1_craftReq_2
  assign CAN_FIRE_RL_bus_1_craftReq_2 =
	     bus_ifcs_2_routeBack$EMPTY_N && bus_ifcs_2_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq_2 = CAN_FIRE_RL_bus_1_craftReq_2 ;

  // rule RL_bus_1_arbitrate
  assign CAN_FIRE_RL_bus_1_arbitrate =
	     bus_1_reqWires_0_whas__852_AND_bus_1_reqWires__ETC___d1862 &&
	     !bus_1_state ;
  assign WILL_FIRE_RL_bus_1_arbitrate = CAN_FIRE_RL_bus_1_arbitrate ;

  // rule RL_bus_1_source_selected
  assign CAN_FIRE_RL_bus_1_source_selected =
	     (!bus_ifcs_0_routeBack$EMPTY_N || bus_ifcs_0_rspBack$EMPTY_N) &&
	     !bus_1_state &&
	     bus_1_sourceSelect_0$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected =
	     CAN_FIRE_RL_bus_1_source_selected ;

  // rule RL_bus_1_burst
  assign CAN_FIRE_RL_bus_1_burst =
	     bus_ifcs_0_rspBack$EMPTY_N && bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_state_863_AND_bus_1_activeSource_0_951_9_ETC___d1954 ;
  assign WILL_FIRE_RL_bus_1_burst = CAN_FIRE_RL_bus_1_burst ;

  // rule RL_bus_ifcs_0_firstFlit_1
  assign CAN_FIRE_RL_bus_ifcs_0_firstFlit_1 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ifcs_0_rspBack$FULL_N &&
	     bus_ifcs_0_routeBack$FULL_N &&
	     !bus_ifcs_0_state_1 ;
  assign WILL_FIRE_RL_bus_ifcs_0_firstFlit_1 =
	     CAN_FIRE_RL_bus_ifcs_0_firstFlit_1 ;

  // rule RL_bus_ifcs_0_followFlits_1
  assign CAN_FIRE_RL_bus_ifcs_0_followFlits_1 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ifcs_0_rspBack$FULL_N &&
	     bus_ifcs_0_state_1 ;
  assign WILL_FIRE_RL_bus_ifcs_0_followFlits_1 =
	     CAN_FIRE_RL_bus_ifcs_0_followFlits_1 ;

  // rule __me_check_182
  assign CAN_FIRE___me_check_182 = 1'b1 ;
  assign WILL_FIRE___me_check_182 = 1'b1 ;

  // rule RL_bus_ssNoSynth_0_b_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_0_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_b_forwardReady = 1'd1 ;

  // rule RL_ug_boot_rom_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop =
	     ug_boot_rom_slave_u_b_dropWire$whas &&
	     !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop ;

  // rule RL_ug_boot_rom_slave_u_b_doDrop
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_b_doDrop =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     ug_boot_rom_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_b_doDrop =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_b_doDrop ;

  // rule RL_bus_1_source_selected_1
  assign CAN_FIRE_RL_bus_1_source_selected_1 =
	     (!bus_ifcs_1_routeBack$EMPTY_N || bus_ifcs_1_rspBack$EMPTY_N) &&
	     !bus_1_state &&
	     bus_1_sourceSelect_1$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected_1 =
	     CAN_FIRE_RL_bus_1_source_selected_1 ;

  // rule RL_bus_1_burst_1
  assign CAN_FIRE_RL_bus_1_burst_1 =
	     bus_ifcs_1_rspBack$EMPTY_N && bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_state_863_AND_bus_1_activeSource_1_984_9_ETC___d1987 ;
  assign WILL_FIRE_RL_bus_1_burst_1 = CAN_FIRE_RL_bus_1_burst_1 ;

  // rule __me_check_209
  assign CAN_FIRE___me_check_209 = 1'b1 ;
  assign WILL_FIRE___me_check_209 = 1'b1 ;

  // rule RL_bus_ifcs_1_firstFlit_1
  assign CAN_FIRE_RL_bus_ifcs_1_firstFlit_1 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ifcs_1_rspBack$FULL_N &&
	     bus_ifcs_1_routeBack$FULL_N &&
	     !bus_ifcs_1_state_1 ;
  assign WILL_FIRE_RL_bus_ifcs_1_firstFlit_1 =
	     CAN_FIRE_RL_bus_ifcs_1_firstFlit_1 ;

  // rule RL_bus_ifcs_1_followFlits_1
  assign CAN_FIRE_RL_bus_ifcs_1_followFlits_1 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ifcs_1_rspBack$FULL_N &&
	     bus_ifcs_1_state_1 ;
  assign WILL_FIRE_RL_bus_ifcs_1_followFlits_1 =
	     CAN_FIRE_RL_bus_ifcs_1_followFlits_1 ;

  // rule __me_check_184
  assign CAN_FIRE___me_check_184 = 1'b1 ;
  assign WILL_FIRE___me_check_184 = 1'b1 ;

  // rule RL_bus_ssNoSynth_1_b_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_1_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_b_forwardReady = 1'd1 ;

  // rule RL_ug_mem0_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop =
	     ug_mem0_slave_u_b_dropWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop ;

  // rule RL_ug_mem0_slave_u_b_doDrop
  assign CAN_FIRE_RL_ug_mem0_slave_u_b_doDrop =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     ug_mem0_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_b_doDrop =
	     CAN_FIRE_RL_ug_mem0_slave_u_b_doDrop ;

  // rule RL_bus_1_source_selected_2
  assign CAN_FIRE_RL_bus_1_source_selected_2 =
	     (!bus_ifcs_2_routeBack$EMPTY_N || bus_ifcs_2_rspBack$EMPTY_N) &&
	     !bus_1_state &&
	     bus_1_sourceSelect_2$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected_2 =
	     CAN_FIRE_RL_bus_1_source_selected_2 ;

  // rule RL_bus_1_burst_2
  assign CAN_FIRE_RL_bus_1_burst_2 =
	     bus_ifcs_2_rspBack$EMPTY_N && bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_state_863_AND_bus_1_activeSource_2_018_0_ETC___d2021 ;
  assign WILL_FIRE_RL_bus_1_burst_2 = CAN_FIRE_RL_bus_1_burst_2 ;

  // rule __me_check_207
  assign CAN_FIRE___me_check_207 = 1'b1 ;
  assign WILL_FIRE___me_check_207 = 1'b1 ;

  // rule __me_check_211
  assign CAN_FIRE___me_check_211 = 1'b1 ;
  assign WILL_FIRE___me_check_211 = 1'b1 ;

  // rule RL_bus_ifcs_2_firstFlit
  assign CAN_FIRE_RL_bus_ifcs_2_firstFlit =
	     uart0$slave_bvalid && bus_ifcs_2_rspBack$FULL_N &&
	     bus_ifcs_2_routeBack$FULL_N &&
	     !bus_ifcs_2_state ;
  assign WILL_FIRE_RL_bus_ifcs_2_firstFlit =
	     CAN_FIRE_RL_bus_ifcs_2_firstFlit ;

  // rule RL_bus_ifcs_2_followFlits
  assign CAN_FIRE_RL_bus_ifcs_2_followFlits =
	     uart0$slave_bvalid && bus_ifcs_2_rspBack$FULL_N &&
	     bus_ifcs_2_state ;
  assign WILL_FIRE_RL_bus_ifcs_2_followFlits =
	     CAN_FIRE_RL_bus_ifcs_2_followFlits ;

  // rule __me_check_186
  assign CAN_FIRE___me_check_186 = 1'b1 ;
  assign WILL_FIRE___me_check_186 = 1'b1 ;

  // rule RL_bus_ssNoSynth_2_b_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_2_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_b_forwardReady = 1'd1 ;

  // rule RL_uart0_slave_b_forwardReady
  assign CAN_FIRE_RL_uart0_slave_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_uart0_slave_b_forwardReady = 1'd1 ;

  // rule RL_bus_1_sink_selected
  assign CAN_FIRE_RL_bus_1_sink_selected =
	     !CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse &&
	     bus_1_flitToSink_0$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected = CAN_FIRE_RL_bus_1_sink_selected ;

  // rule RL_bus_ifcs_0_forwardRsp
  assign CAN_FIRE_RL_bus_ifcs_0_forwardRsp =
	     bus_msNoSynth_0_b_buffer_ff$FULL_N &&
	     CAN_FIRE_RL_bus_1_sink_selected &&
	     !bus_ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ifcs_0_forwardRsp =
	     CAN_FIRE_RL_bus_ifcs_0_forwardRsp ;

  // rule RL_bus_msNoSynth_0_b_forwardFlit
  assign CAN_FIRE_RL_bus_msNoSynth_0_b_forwardFlit =
	     bus_msNoSynth_0_b_buffer_firstValid$Q_OUT &&
	     (bus_msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_0_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_b_forwardFlit =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_forwardFlit ;

  // rule RL_bus_msNoSynth_0_b_dropFlit
  assign CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit =
	     (bus_msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_0_b_buffer_enqw$whas) &&
	     corew$cpu_imem_master_bready ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_b_dropFlit =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit ;

  // rule RL_bus_msNoSynth_0_b_buffer_enqueue
  assign CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue =
	     bus_msNoSynth_0_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit ||
	      bus_msNoSynth_0_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue ;

  // rule RL_bus_msNoSynth_0_b_buffer_dequeue
  assign CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit &&
	     bus_msNoSynth_0_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue ;

  // rule RL_bus_ifcs_0_nonRoutableGenRsp
  assign CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp =
	     IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1340 &&
	     bus_ifcs_0_noRoute_inner_pendingReq$port1__read &&
	     bus_ifcs_0_noRouteRsp$FULL_N &&
	     corew$cpu_imem_master_wvalid ;
  assign WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp =
	     CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp ;

  // rule __me_check_168
  assign CAN_FIRE___me_check_168 = 1'b1 ;
  assign WILL_FIRE___me_check_168 = 1'b1 ;

  // rule __me_check_169
  assign CAN_FIRE___me_check_169 = 1'b1 ;
  assign WILL_FIRE___me_check_169 = 1'b1 ;

  // rule __me_check_172
  assign CAN_FIRE___me_check_172 = 1'b1 ;
  assign WILL_FIRE___me_check_172 = 1'b1 ;

  // rule RL_bus_merged_0_genFirst
  assign CAN_FIRE_RL_bus_merged_0_genFirst =
	     corew$cpu_imem_master_awvalid && corew$cpu_imem_master_wvalid &&
	     bus_merged_0_doDrop$whas &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_genFirst =
	     CAN_FIRE_RL_bus_merged_0_genFirst ;

  // rule RL_bus_msNoSynth_0_aw_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_0_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_aw_forwardReady = 1'd1 ;

  // rule RL_bus_merged_0_genOther
  assign CAN_FIRE_RL_bus_merged_0_genOther =
	     corew$cpu_imem_master_wvalid && bus_merged_0_doDrop$whas &&
	     bus_merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_genOther =
	     CAN_FIRE_RL_bus_merged_0_genOther ;

  // rule RL_bus_msNoSynth_0_w_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_0_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_w_forwardReady = 1'd1 ;

  // rule RL_bus_1_sink_selected_1
  assign CAN_FIRE_RL_bus_1_sink_selected_1 =
	     !CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse &&
	     bus_1_flitToSink_1$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected_1 =
	     CAN_FIRE_RL_bus_1_sink_selected_1 ;

  // rule __me_check_213
  assign CAN_FIRE___me_check_213 = 1'b1 ;
  assign WILL_FIRE___me_check_213 = 1'b1 ;

  // rule RL_bus_ifcs_1_forwardRsp
  assign CAN_FIRE_RL_bus_ifcs_1_forwardRsp =
	     bus_msNoSynth_1_b_buffer_ff$FULL_N &&
	     CAN_FIRE_RL_bus_1_sink_selected_1 &&
	     !bus_ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ifcs_1_forwardRsp =
	     CAN_FIRE_RL_bus_ifcs_1_forwardRsp ;

  // rule RL_bus_msNoSynth_1_b_forwardFlit
  assign CAN_FIRE_RL_bus_msNoSynth_1_b_forwardFlit =
	     bus_msNoSynth_1_b_buffer_firstValid$Q_OUT &&
	     (bus_msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_1_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_b_forwardFlit =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_forwardFlit ;

  // rule RL_bus_msNoSynth_1_b_dropFlit
  assign CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit =
	     (bus_msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_1_b_buffer_enqw$whas) &&
	     corew$cpu_dmem_master_bready ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_b_dropFlit =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit ;

  // rule RL_bus_msNoSynth_1_b_buffer_enqueue
  assign CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue =
	     bus_msNoSynth_1_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit ||
	      bus_msNoSynth_1_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue ;

  // rule RL_bus_msNoSynth_1_b_buffer_dequeue
  assign CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit &&
	     bus_msNoSynth_1_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue ;

  // rule RL_bus_ifcs_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp =
	     IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1457 &&
	     bus_ifcs_1_noRoute_inner_pendingReq$port1__read &&
	     bus_ifcs_1_noRouteRsp$FULL_N &&
	     corew$cpu_dmem_master_wvalid ;
  assign WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp ;

  // rule __me_check_175
  assign CAN_FIRE___me_check_175 = 1'b1 ;
  assign WILL_FIRE___me_check_175 = 1'b1 ;

  // rule __me_check_176
  assign CAN_FIRE___me_check_176 = 1'b1 ;
  assign WILL_FIRE___me_check_176 = 1'b1 ;

  // rule __me_check_179
  assign CAN_FIRE___me_check_179 = 1'b1 ;
  assign WILL_FIRE___me_check_179 = 1'b1 ;

  // rule RL_bus_merged_1_genFirst
  assign CAN_FIRE_RL_bus_merged_1_genFirst =
	     corew$cpu_dmem_master_awvalid && corew$cpu_dmem_master_wvalid &&
	     bus_merged_1_doDrop$whas &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_genFirst =
	     CAN_FIRE_RL_bus_merged_1_genFirst ;

  // rule RL_bus_msNoSynth_1_aw_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_1_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_aw_forwardReady = 1'd1 ;

  // rule RL_bus_merged_1_genOther
  assign CAN_FIRE_RL_bus_merged_1_genOther =
	     corew$cpu_dmem_master_wvalid && bus_merged_1_doDrop$whas &&
	     bus_merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_genOther =
	     CAN_FIRE_RL_bus_merged_1_genOther ;

  // rule RL_bus_msNoSynth_1_w_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_1_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_w_forwardReady = 1'd1 ;

  // rule RL_bus_1_checkSinkReady_2
  assign CAN_FIRE_RL_bus_1_checkSinkReady_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady_2 = 1'd1 ;

  // rule RL_bus_1_checkSinkReady_3
  assign CAN_FIRE_RL_bus_1_checkSinkReady_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady_3 = 1'd1 ;

  // rule RL_bus_1_checkSinkReady_4
  assign CAN_FIRE_RL_bus_1_checkSinkReady_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady_4 = 1'd1 ;

  // rule RL_bus_1_craftReq_3
  assign CAN_FIRE_RL_bus_1_craftReq_3 =
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq_3 = CAN_FIRE_RL_bus_1_craftReq_3 ;

  // rule RL_bus_1_craftReq_4
  assign CAN_FIRE_RL_bus_1_craftReq_4 =
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_ifcs_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq_4 = CAN_FIRE_RL_bus_1_craftReq_4 ;

  // rule RL_bus_1_arbitrate_1
  assign CAN_FIRE_RL_bus_1_arbitrate_1 =
	     (CAN_FIRE_RL_bus_1_craftReq_3 && bus_1_reqWires_0_1$wget ||
	      CAN_FIRE_RL_bus_1_craftReq_4 && bus_1_reqWires_1_1$wget) &&
	     !bus_1_state_1 ;
  assign WILL_FIRE_RL_bus_1_arbitrate_1 = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // rule RL_bus_1_source_selected_3
  assign CAN_FIRE_RL_bus_1_source_selected_3 =
	     (!bus_1_ifcs_0_innerRoute$EMPTY_N ||
	      bus_1_ifcs_0_innerReq$EMPTY_N) &&
	     !bus_1_state_1 &&
	     bus_1_sourceSelect_0_1$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected_3 =
	     CAN_FIRE_RL_bus_1_source_selected_3 ;

  // rule RL_bus_1_burst_3
  assign CAN_FIRE_RL_bus_1_burst_3 =
	     bus_1_ifcs_0_innerReq$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_state_1_343_AND_bus_1_activeSource_0_1_4_ETC___d2413 ;
  assign WILL_FIRE_RL_bus_1_burst_3 = CAN_FIRE_RL_bus_1_burst_3 ;

  // rule RL_bus_1_source_selected_4
  assign CAN_FIRE_RL_bus_1_source_selected_4 =
	     (!bus_1_ifcs_1_innerRoute$EMPTY_N ||
	      bus_1_ifcs_1_innerReq$EMPTY_N) &&
	     !bus_1_state_1 &&
	     bus_1_sourceSelect_1_1$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected_4 =
	     CAN_FIRE_RL_bus_1_source_selected_4 ;

  // rule RL_bus_1_burst_4
  assign CAN_FIRE_RL_bus_1_burst_4 =
	     bus_1_ifcs_1_innerReq$EMPTY_N &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_state_1_343_AND_bus_1_activeSource_1_1_4_ETC___d2453 ;
  assign WILL_FIRE_RL_bus_1_burst_4 = CAN_FIRE_RL_bus_1_burst_4 ;

  // rule __me_check_241
  assign CAN_FIRE___me_check_241 = 1'b1 ;
  assign WILL_FIRE___me_check_241 = 1'b1 ;

  // rule __me_check_243
  assign CAN_FIRE___me_check_243 = 1'b1 ;
  assign WILL_FIRE___me_check_243 = 1'b1 ;

  // rule RL_bus_1_sink_selected_2
  assign CAN_FIRE_RL_bus_1_sink_selected_2 =
	     bus_ssNoSynth_0_ar_buffer_ff$FULL_N &&
	     bus_1_flitToSink_0_1$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected_2 =
	     CAN_FIRE_RL_bus_1_sink_selected_2 ;

  // rule RL_bus_ssNoSynth_0_ar_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit =
	     !boot_rom_axi4_deburster_inShim_arff$FULL_N ||
	     bus_ssNoSynth_0_ar_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_2) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit ;

  // rule RL_ug_boot_rom_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut =
	     ug_boot_rom_slave_u_ar_putWire$whas &&
	     !boot_rom_axi4_deburster_inShim_arff$FULL_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut ;

  // rule RL_bus_ssNoSynth_0_ar_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit =
	     (bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_2) &&
	     boot_rom_axi4_deburster_inShim_arff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR =
	     boot_rom_axi4_deburster_inShim_arff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_arff_rv[100] &&
	     boot_rom_axi4_deburster_inSerial_state == 2'd0 &&
	     (!boot_rom_axi4_deburster_inSerial_lastWasRead ||
	      !boot_rom_axi4_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;

  // rule RL_boot_rom_axi4_deburster_forward_read_req
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[100] &&
	     boot_rom_axi4_deburster_outShim_arff$FULL_N &&
	     boot_rom_axi4_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeW
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW =
	     boot_rom_axi4_deburster_inShim_wff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_wff_rv[74] &&
	     boot_rom_axi4_deburster_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ;

  // rule RL_boot_rom_axi4_deburster_forward_write_req
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[100] &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[74] &&
	     boot_rom_axi4_deburster_outShim_awff$FULL_N &&
	     boot_rom_axi4_deburster_outShim_wff$FULL_N &&
	     (!boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[1] ||
	      boot_rom_axi4_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeB
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read[9] &&
	     boot_rom_axi4_deburster_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;

  // rule RL_ug_boot_rom_slave_u_aw_doPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_aw_doPut =
	     boot_rom_axi4_deburster_inShim_awff$FULL_N &&
	     ug_boot_rom_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_aw_doPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_aw_doPut ;

  // rule RL_ug_boot_rom_slave_u_w_doPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_w_doPut =
	     boot_rom_axi4_deburster_inShim_wff$FULL_N &&
	     ug_boot_rom_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_w_doPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_w_doPut ;

  // rule RL_ug_boot_rom_slave_u_ar_doPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_ar_doPut =
	     boot_rom_axi4_deburster_inShim_arff$FULL_N &&
	     ug_boot_rom_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_ar_doPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_ar_doPut ;

  // rule RL_bus_ssNoSynth_0_ar_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_1_sink_selected_2 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit ||
	      bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_0_ar_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit &&
	     bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue ;

  // rule RL_bus_1_sink_selected_3
  assign CAN_FIRE_RL_bus_1_sink_selected_3 =
	     bus_ssNoSynth_1_ar_buffer_ff$FULL_N &&
	     bus_1_flitToSink_1_1$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected_3 =
	     CAN_FIRE_RL_bus_1_sink_selected_3 ;

  // rule RL_bus_ssNoSynth_1_ar_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit =
	     !mem0_controller_axi4_deburster_inShim_arff$FULL_N ||
	     bus_ssNoSynth_1_ar_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_3) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit ;

  // rule RL_ug_mem0_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut =
	     ug_mem0_slave_u_ar_putWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_arff$FULL_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut ;

  // rule RL_bus_ssNoSynth_1_ar_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit =
	     (bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_3) &&
	     mem0_controller_axi4_deburster_inShim_arff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR =
	     mem0_controller_axi4_deburster_inShim_arff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_arff_rv[100] &&
	     mem0_controller_axi4_deburster_inSerial_state == 2'd0 &&
	     (!mem0_controller_axi4_deburster_inSerial_lastWasRead ||
	      !mem0_controller_axi4_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;

  // rule RL_mem0_controller_axi4_deburster_forward_read_req
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[100] &&
	     mem0_controller_axi4_deburster_outShim_arff$FULL_N &&
	     mem0_controller_axi4_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeW
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW =
	     mem0_controller_axi4_deburster_inShim_wff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_wff_rv[74] &&
	     mem0_controller_axi4_deburster_inSerial_state$port1__read ==
	     2'd1 ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ;

  // rule RL_mem0_controller_axi4_deburster_forward_write_req
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[100] &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[74] &&
	     mem0_controller_axi4_deburster_outShim_awff$FULL_N &&
	     mem0_controller_axi4_deburster_outShim_wff$FULL_N &&
	     (!mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[1] ||
	      mem0_controller_axi4_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeB
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read[9] &&
	     mem0_controller_axi4_deburster_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;

  // rule RL_ug_mem0_slave_u_aw_doPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_aw_doPut =
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N &&
	     ug_mem0_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_aw_doPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_aw_doPut ;

  // rule RL_ug_mem0_slave_u_w_doPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_w_doPut =
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N &&
	     ug_mem0_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_w_doPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_w_doPut ;

  // rule RL_ug_mem0_slave_u_ar_doPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_ar_doPut =
	     mem0_controller_axi4_deburster_inShim_arff$FULL_N &&
	     ug_mem0_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_ar_doPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_ar_doPut ;

  // rule RL_bus_ssNoSynth_1_ar_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_1_sink_selected_3 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit ||
	      bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_1_ar_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit &&
	     bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue ;

  // rule RL_bus_1_sink_selected_4
  assign CAN_FIRE_RL_bus_1_sink_selected_4 =
	     bus_ssNoSynth_2_ar_buffer_ff$FULL_N && bus_1_flitToSink_2$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected_4 =
	     CAN_FIRE_RL_bus_1_sink_selected_4 ;

  // rule __me_check_245
  assign CAN_FIRE___me_check_245 = 1'b1 ;
  assign WILL_FIRE___me_check_245 = 1'b1 ;

  // rule RL_bus_ssNoSynth_2_ar_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit =
	     !uart0_slave_ar_buffer_ff$FULL_N ||
	     bus_ssNoSynth_2_ar_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_4) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit ;

  // rule RL_uart0_slave_ar_forwardFlit
  assign CAN_FIRE_RL_uart0_slave_ar_forwardFlit =
	     uart0_slave_ar_buffer_firstValid$Q_OUT &&
	     (uart0_slave_ar_buffer_ff$EMPTY_N ||
	      uart0_slave_ar_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_uart0_slave_ar_forwardFlit =
	     CAN_FIRE_RL_uart0_slave_ar_forwardFlit ;

  // rule RL_uart0_slave_ar_dropFlit
  assign CAN_FIRE_RL_uart0_slave_ar_dropFlit =
	     (uart0_slave_ar_buffer_ff$EMPTY_N ||
	      uart0_slave_ar_buffer_enqw$whas) &&
	     uart0$slave_arready ;
  assign WILL_FIRE_RL_uart0_slave_ar_dropFlit =
	     CAN_FIRE_RL_uart0_slave_ar_dropFlit ;

  // rule RL_uart0_slave_ar_buffer_enqueue
  assign CAN_FIRE_RL_uart0_slave_ar_buffer_enqueue =
	     uart0_slave_ar_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_uart0_slave_ar_dropFlit ||
	      uart0_slave_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_uart0_slave_ar_buffer_enqueue =
	     CAN_FIRE_RL_uart0_slave_ar_buffer_enqueue ;

  // rule RL_uart0_slave_ar_buffer_dequeue
  assign CAN_FIRE_RL_uart0_slave_ar_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_ar_dropFlit &&
	     uart0_slave_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_uart0_slave_ar_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_ar_buffer_dequeue ;

  // rule RL_bus_ssNoSynth_2_ar_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit =
	     (bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_4) &&
	     uart0_slave_ar_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit ;

  // rule RL_bus_ssNoSynth_2_ar_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_1_sink_selected_4 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit ||
	      bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_2_ar_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit &&
	     bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue ;

  // rule RL_bus_1_ifcs_0_firstFlit
  assign CAN_FIRE_RL_bus_1_ifcs_0_firstFlit =
	     corew$cpu_imem_master_arvalid && bus_1_ifcs_0_innerReq$FULL_N &&
	     bus_1_ifcs_0_innerRoute$FULL_N &&
	     bus_1_ifcs_0_state_034_EQ_0_035_AND_IF_NOT_cor_ETC___d2065 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_firstFlit =
	     CAN_FIRE_RL_bus_1_ifcs_0_firstFlit ;

  // rule RL_bus_1_ifcs_0_followFlits
  assign CAN_FIRE_RL_bus_1_ifcs_0_followFlits =
	     corew$cpu_imem_master_arvalid && bus_1_ifcs_0_innerReq$FULL_N &&
	     bus_1_ifcs_0_state == 2'd1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_followFlits =
	     CAN_FIRE_RL_bus_1_ifcs_0_followFlits ;

  // rule RL_bus_1_ifcs_0_nonRoutableFlit
  assign CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit =
	     bus_1_ifcs_0_noRoute_flitCount == 9'd0 &&
	     corew$cpu_imem_master_arvalid &&
	     bus_1_ifcs_0_state_034_EQ_0_035_AND_NOT_IF_NOT_ETC___d2094 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit ;

  // rule RL_bus_1_ifcs_0_drainFlits
  assign CAN_FIRE_RL_bus_1_ifcs_0_drainFlits =
	     corew$cpu_imem_master_arvalid && bus_1_ifcs_0_state == 2'd2 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_drainFlits =
	     CAN_FIRE_RL_bus_1_ifcs_0_drainFlits ;

  // rule __me_check_217
  assign CAN_FIRE___me_check_217 = 1'b1 ;
  assign WILL_FIRE___me_check_217 = 1'b1 ;

  // rule RL_bus_1_ifcs_0_drainNoRouteResponse
  assign CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse =
	     bus_msNoSynth_0_r_buffer_ff$FULL_N &&
	     bus_1_ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse =
	     CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse ;

  // rule RL_bus_1_ifcs_1_firstFlit
  assign CAN_FIRE_RL_bus_1_ifcs_1_firstFlit =
	     corew$cpu_dmem_master_arvalid && bus_1_ifcs_1_innerReq$FULL_N &&
	     bus_1_ifcs_1_innerRoute$FULL_N &&
	     bus_1_ifcs_1_state_131_EQ_0_132_AND_IF_NOT_cor_ETC___d2162 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_firstFlit =
	     CAN_FIRE_RL_bus_1_ifcs_1_firstFlit ;

  // rule RL_bus_1_ifcs_1_followFlits
  assign CAN_FIRE_RL_bus_1_ifcs_1_followFlits =
	     corew$cpu_dmem_master_arvalid && bus_1_ifcs_1_innerReq$FULL_N &&
	     bus_1_ifcs_1_state == 2'd1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_followFlits =
	     CAN_FIRE_RL_bus_1_ifcs_1_followFlits ;

  // rule RL_bus_1_ifcs_1_nonRoutableFlit
  assign CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit =
	     bus_1_ifcs_1_noRoute_flitCount == 9'd0 &&
	     corew$cpu_dmem_master_arvalid &&
	     bus_1_ifcs_1_state_131_EQ_0_132_AND_NOT_IF_NOT_ETC___d2191 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit ;

  // rule RL_bus_1_ifcs_1_drainFlits
  assign CAN_FIRE_RL_bus_1_ifcs_1_drainFlits =
	     corew$cpu_dmem_master_arvalid && bus_1_ifcs_1_state == 2'd2 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_drainFlits =
	     CAN_FIRE_RL_bus_1_ifcs_1_drainFlits ;

  // rule __me_check_224
  assign CAN_FIRE___me_check_224 = 1'b1 ;
  assign WILL_FIRE___me_check_224 = 1'b1 ;

  // rule RL_bus_1_ifcs_1_drainNoRouteResponse
  assign CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse =
	     bus_msNoSynth_1_r_buffer_ff$FULL_N &&
	     bus_1_ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse =
	     CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse ;

  // rule RL_bus_1_1_checkSinkReady
  assign CAN_FIRE_RL_bus_1_1_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_1_checkSinkReady = 1'd1 ;

  // rule RL_bus_1_1_checkSinkReady_1
  assign CAN_FIRE_RL_bus_1_1_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_1_checkSinkReady_1 = 1'd1 ;

  // rule RL_bus_1_1_craftReq
  assign CAN_FIRE_RL_bus_1_1_craftReq =
	     bus_1_ifcs_0_routeBack$EMPTY_N && bus_1_ifcs_0_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_1_craftReq = CAN_FIRE_RL_bus_1_1_craftReq ;

  // rule RL_bus_1_1_craftReq_1
  assign CAN_FIRE_RL_bus_1_1_craftReq_1 =
	     bus_1_ifcs_1_routeBack$EMPTY_N && bus_1_ifcs_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_1_craftReq_1 = CAN_FIRE_RL_bus_1_1_craftReq_1 ;

  // rule RL_bus_1_1_craftReq_2
  assign CAN_FIRE_RL_bus_1_1_craftReq_2 =
	     bus_1_ifcs_2_routeBack$EMPTY_N && bus_1_ifcs_2_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_1_craftReq_2 = CAN_FIRE_RL_bus_1_1_craftReq_2 ;

  // rule RL_bus_1_1_arbitrate
  assign CAN_FIRE_RL_bus_1_1_arbitrate =
	     bus_1_1_reqWires_0_whas__512_AND_bus_1_1_reqWi_ETC___d2522 &&
	     !bus_1_1_state ;
  assign WILL_FIRE_RL_bus_1_1_arbitrate = CAN_FIRE_RL_bus_1_1_arbitrate ;

  // rule RL_bus_1_1_source_selected
  assign CAN_FIRE_RL_bus_1_1_source_selected =
	     (!bus_1_ifcs_0_routeBack$EMPTY_N ||
	      bus_1_ifcs_0_rspBack$EMPTY_N) &&
	     !bus_1_1_state &&
	     MUX_bus_1_1_activeSource_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_1_1_source_selected =
	     CAN_FIRE_RL_bus_1_1_source_selected ;

  // rule RL_bus_1_1_burst
  assign CAN_FIRE_RL_bus_1_1_burst =
	     bus_1_ifcs_0_rspBack$EMPTY_N && bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_1_state_523_AND_bus_1_1_activeSource_0_6_ETC___d2620 ;
  assign WILL_FIRE_RL_bus_1_1_burst = CAN_FIRE_RL_bus_1_1_burst ;

  // rule RL_bus_1_ifcs_0_firstFlit_1
  assign CAN_FIRE_RL_bus_1_ifcs_0_firstFlit_1 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_ifcs_0_rspBack$FULL_N &&
	     bus_1_ifcs_0_routeBack$FULL_N &&
	     !bus_1_ifcs_0_state_1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 =
	     CAN_FIRE_RL_bus_1_ifcs_0_firstFlit_1 ;

  // rule RL_bus_1_ifcs_0_followFlits_1
  assign CAN_FIRE_RL_bus_1_ifcs_0_followFlits_1 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_ifcs_0_rspBack$FULL_N &&
	     bus_1_ifcs_0_state_1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1 =
	     CAN_FIRE_RL_bus_1_ifcs_0_followFlits_1 ;

  // rule __me_check_229
  assign CAN_FIRE___me_check_229 = 1'b1 ;
  assign WILL_FIRE___me_check_229 = 1'b1 ;

  // rule RL_bus_ssNoSynth_0_r_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_0_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_r_forwardReady = 1'd1 ;

  // rule RL_ug_boot_rom_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop =
	     ug_boot_rom_slave_u_r_dropWire$whas &&
	     !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop ;

  // rule RL_ug_boot_rom_slave_u_r_doDrop
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_r_doDrop =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     ug_boot_rom_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_r_doDrop =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_r_doDrop ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeR
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[75] &&
	     boot_rom_axi4_deburster_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_bus_1_1_source_selected_1
  assign CAN_FIRE_RL_bus_1_1_source_selected_1 =
	     (!bus_1_ifcs_1_routeBack$EMPTY_N ||
	      bus_1_ifcs_1_rspBack$EMPTY_N) &&
	     !bus_1_1_state &&
	     MUX_bus_1_1_activeSource_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_1_1_source_selected_1 =
	     CAN_FIRE_RL_bus_1_1_source_selected_1 ;

  // rule RL_bus_1_1_burst_1
  assign CAN_FIRE_RL_bus_1_1_burst_1 =
	     bus_1_ifcs_1_rspBack$EMPTY_N && bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_1_state_523_AND_bus_1_1_activeSource_1_6_ETC___d2656 ;
  assign WILL_FIRE_RL_bus_1_1_burst_1 = CAN_FIRE_RL_bus_1_1_burst_1 ;

  // rule __me_check_256
  assign CAN_FIRE___me_check_256 = 1'b1 ;
  assign WILL_FIRE___me_check_256 = 1'b1 ;

  // rule RL_bus_1_ifcs_1_firstFlit_1
  assign CAN_FIRE_RL_bus_1_ifcs_1_firstFlit_1 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_ifcs_1_rspBack$FULL_N &&
	     bus_1_ifcs_1_routeBack$FULL_N &&
	     !bus_1_ifcs_1_state_1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 =
	     CAN_FIRE_RL_bus_1_ifcs_1_firstFlit_1 ;

  // rule RL_bus_1_ifcs_1_followFlits_1
  assign CAN_FIRE_RL_bus_1_ifcs_1_followFlits_1 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_ifcs_1_rspBack$FULL_N &&
	     bus_1_ifcs_1_state_1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1 =
	     CAN_FIRE_RL_bus_1_ifcs_1_followFlits_1 ;

  // rule __me_check_231
  assign CAN_FIRE___me_check_231 = 1'b1 ;
  assign WILL_FIRE___me_check_231 = 1'b1 ;

  // rule RL_bus_ssNoSynth_1_r_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_1_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_r_forwardReady = 1'd1 ;

  // rule RL_ug_mem0_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop =
	     ug_mem0_slave_u_r_dropWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop ;

  // rule RL_ug_mem0_slave_u_r_doDrop
  assign CAN_FIRE_RL_ug_mem0_slave_u_r_doDrop =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     ug_mem0_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_r_doDrop =
	     CAN_FIRE_RL_ug_mem0_slave_u_r_doDrop ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeR
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[75] &&
	     mem0_controller_axi4_deburster_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ;

  // rule __me_check_13
  assign CAN_FIRE___me_check_13 = 1'b1 ;
  assign WILL_FIRE___me_check_13 = 1'b1 ;

  // rule RL_rl_reset_start_initial
  assign CAN_FIRE_RL_rl_reset_start_initial =
	     mem0_controller$RDY_server_reset_request_put &&
	     uart0$RDY_server_reset_request_put &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_reset_start_initial =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // rule RL_bus_1_1_source_selected_2
  assign CAN_FIRE_RL_bus_1_1_source_selected_2 =
	     (!bus_1_ifcs_2_routeBack$EMPTY_N ||
	      bus_1_ifcs_2_rspBack$EMPTY_N) &&
	     !bus_1_1_state &&
	     MUX_bus_1_1_activeSource_2$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_1_1_source_selected_2 =
	     CAN_FIRE_RL_bus_1_1_source_selected_2 ;

  // rule RL_bus_1_1_burst_2
  assign CAN_FIRE_RL_bus_1_1_burst_2 =
	     bus_1_ifcs_2_rspBack$EMPTY_N && bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_1_state_523_AND_bus_1_1_activeSource_2_6_ETC___d2692 ;
  assign WILL_FIRE_RL_bus_1_1_burst_2 = CAN_FIRE_RL_bus_1_1_burst_2 ;

  // rule __me_check_254
  assign CAN_FIRE___me_check_254 = 1'b1 ;
  assign WILL_FIRE___me_check_254 = 1'b1 ;

  // rule __me_check_258
  assign CAN_FIRE___me_check_258 = 1'b1 ;
  assign WILL_FIRE___me_check_258 = 1'b1 ;

  // rule RL_bus_1_ifcs_2_firstFlit
  assign CAN_FIRE_RL_bus_1_ifcs_2_firstFlit =
	     uart0$slave_rvalid && bus_1_ifcs_2_rspBack$FULL_N &&
	     bus_1_ifcs_2_routeBack$FULL_N &&
	     !bus_1_ifcs_2_state ;
  assign WILL_FIRE_RL_bus_1_ifcs_2_firstFlit =
	     CAN_FIRE_RL_bus_1_ifcs_2_firstFlit ;

  // rule RL_bus_1_ifcs_2_followFlits
  assign CAN_FIRE_RL_bus_1_ifcs_2_followFlits =
	     uart0$slave_rvalid && bus_1_ifcs_2_rspBack$FULL_N &&
	     bus_1_ifcs_2_state ;
  assign WILL_FIRE_RL_bus_1_ifcs_2_followFlits =
	     CAN_FIRE_RL_bus_1_ifcs_2_followFlits ;

  // rule __me_check_233
  assign CAN_FIRE___me_check_233 = 1'b1 ;
  assign WILL_FIRE___me_check_233 = 1'b1 ;

  // rule RL_bus_ssNoSynth_2_r_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_2_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_r_forwardReady = 1'd1 ;

  // rule RL_uart0_slave_r_forwardReady
  assign CAN_FIRE_RL_uart0_slave_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_uart0_slave_r_forwardReady = 1'd1 ;

  // rule RL_rl_reset_complete_initial
  assign CAN_FIRE_RL_rl_reset_complete_initial =
	     mem0_controller$RDY_server_reset_response_get &&
	     uart0$RDY_server_reset_response_get &&
	     mem0_controller$RDY_set_addr_map &&
	     boot_rom$RDY_set_addr_map &&
	     rg_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete_initial =
	     CAN_FIRE_RL_rl_reset_complete_initial ;

  // rule RL_bus_1_1_sink_selected
  assign CAN_FIRE_RL_bus_1_1_sink_selected =
	     !CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse &&
	     bus_1_1_flitToSink_0$whas ;
  assign WILL_FIRE_RL_bus_1_1_sink_selected =
	     CAN_FIRE_RL_bus_1_1_sink_selected ;

  // rule RL_bus_1_ifcs_0_forwardRsp
  assign CAN_FIRE_RL_bus_1_ifcs_0_forwardRsp =
	     bus_msNoSynth_0_r_buffer_ff$FULL_N &&
	     CAN_FIRE_RL_bus_1_1_sink_selected &&
	     !bus_1_ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_forwardRsp =
	     CAN_FIRE_RL_bus_1_ifcs_0_forwardRsp ;

  // rule RL_bus_msNoSynth_0_r_forwardFlit
  assign CAN_FIRE_RL_bus_msNoSynth_0_r_forwardFlit =
	     bus_msNoSynth_0_r_buffer_firstValid$Q_OUT &&
	     (bus_msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_0_r_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_r_forwardFlit =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_forwardFlit ;

  // rule RL_bus_msNoSynth_0_r_dropFlit
  assign CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit =
	     (bus_msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_0_r_buffer_enqw$whas) &&
	     corew$cpu_imem_master_rready ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_r_dropFlit =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit ;

  // rule RL_bus_msNoSynth_0_r_buffer_enqueue
  assign CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue =
	     bus_msNoSynth_0_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit ||
	      bus_msNoSynth_0_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue ;

  // rule RL_bus_msNoSynth_0_r_buffer_dequeue
  assign CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit &&
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue ;

  // rule RL_bus_1_ifcs_0_nonRoutableGenRsp
  assign CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp =
	     x_port1__read__h75247 != 9'd0 &&
	     bus_1_ifcs_0_noRouteRsp$FULL_N &&
	     (x_port1__read__h75247 != 9'd1 ||
	      corew$cpu_imem_master_arvalid) ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp ;

  // rule __me_check_215
  assign CAN_FIRE___me_check_215 = 1'b1 ;
  assign WILL_FIRE___me_check_215 = 1'b1 ;

  // rule __me_check_216
  assign CAN_FIRE___me_check_216 = 1'b1 ;
  assign WILL_FIRE___me_check_216 = 1'b1 ;

  // rule __me_check_219
  assign CAN_FIRE___me_check_219 = 1'b1 ;
  assign WILL_FIRE___me_check_219 = 1'b1 ;

  // rule RL_bus_msNoSynth_0_ar_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_0_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_ar_forwardReady = 1'd1 ;

  // rule RL_bus_1_1_sink_selected_1
  assign CAN_FIRE_RL_bus_1_1_sink_selected_1 =
	     !CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse &&
	     bus_1_1_flitToSink_1$whas ;
  assign WILL_FIRE_RL_bus_1_1_sink_selected_1 =
	     CAN_FIRE_RL_bus_1_1_sink_selected_1 ;

  // rule __me_check_260
  assign CAN_FIRE___me_check_260 = 1'b1 ;
  assign WILL_FIRE___me_check_260 = 1'b1 ;

  // rule RL_bus_1_ifcs_1_forwardRsp
  assign CAN_FIRE_RL_bus_1_ifcs_1_forwardRsp =
	     bus_msNoSynth_1_r_buffer_ff$FULL_N &&
	     CAN_FIRE_RL_bus_1_1_sink_selected_1 &&
	     !bus_1_ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_forwardRsp =
	     CAN_FIRE_RL_bus_1_ifcs_1_forwardRsp ;

  // rule RL_bus_msNoSynth_1_r_forwardFlit
  assign CAN_FIRE_RL_bus_msNoSynth_1_r_forwardFlit =
	     bus_msNoSynth_1_r_buffer_firstValid$Q_OUT &&
	     (bus_msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_1_r_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_r_forwardFlit =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_forwardFlit ;

  // rule RL_bus_msNoSynth_1_r_dropFlit
  assign CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit =
	     (bus_msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_1_r_buffer_enqw$whas) &&
	     corew$cpu_dmem_master_rready ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_r_dropFlit =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit ;

  // rule RL_bus_msNoSynth_1_r_buffer_enqueue
  assign CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue =
	     bus_msNoSynth_1_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit ||
	      bus_msNoSynth_1_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue ;

  // rule RL_bus_msNoSynth_1_r_buffer_dequeue
  assign CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit &&
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue ;

  // rule RL_bus_1_ifcs_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp =
	     x_port1__read__h78238 != 9'd0 &&
	     bus_1_ifcs_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h78238 != 9'd1 ||
	      corew$cpu_dmem_master_arvalid) ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp ;

  // rule __me_check_222
  assign CAN_FIRE___me_check_222 = 1'b1 ;
  assign WILL_FIRE___me_check_222 = 1'b1 ;

  // rule __me_check_223
  assign CAN_FIRE___me_check_223 = 1'b1 ;
  assign WILL_FIRE___me_check_223 = 1'b1 ;

  // rule __me_check_226
  assign CAN_FIRE___me_check_226 = 1'b1 ;
  assign WILL_FIRE___me_check_226 = 1'b1 ;

  // rule RL_bus_msNoSynth_1_ar_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_1_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_ar_forwardReady = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[1] ;
  assign MUX_bus_1_1_activeSource_0$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_activeSource_0$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_activeSource_0$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_state$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_state$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_state$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_rspBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst && bus_ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_burst_1 && bus_ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_burst_2 && bus_ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst_3 && bus_1_ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst && bus_ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_burst_1 && bus_ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_burst_2 && bus_ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst_3 && bus_1_ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst_3 && bus_1_ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_bus_1_flitToSink_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_bus_1_ifcs_0_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 &&
	     !boot_rom_axi4_deburster_inShim_rff$D_OUT[1] ;
  assign MUX_bus_1_ifcs_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 &&
	     !mem0_controller_axi4_deburster_inShim_rff$D_OUT[1] ;
  assign MUX_bus_1_ifcs_2_state$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_ifcs_2_followFlits && uart0$slave_rlast ;
  assign MUX_bus_activeSource_0$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     !bus_ifcs_0_innerReq$D_OUT[0] ;
  assign MUX_bus_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_bus_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_bus_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_bus_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_bus_flitToSink_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_bus_flitToSink_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_bus_ifcs_0_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_bus_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_bus_ifcs_0_followFlits ;
  assign MUX_bus_ifcs_0_state$write_1__SEL_1 =
	     MUX_bus_ifcs_0_state$write_1__PSEL_1 &&
	     corew$cpu_imem_master_wlast ;
  assign MUX_bus_ifcs_0_state$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	     !corew$cpu_imem_master_wlast ;
  assign MUX_bus_ifcs_0_state$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp &&
	     !corew$cpu_imem_master_wlast ;
  assign MUX_bus_ifcs_1_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_bus_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_bus_ifcs_1_followFlits ;
  assign MUX_bus_ifcs_1_state$write_1__SEL_1 =
	     MUX_bus_ifcs_1_state$write_1__PSEL_1 &&
	     corew$cpu_dmem_master_wlast ;
  assign MUX_bus_ifcs_1_state$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	     !corew$cpu_dmem_master_wlast ;
  assign MUX_bus_ifcs_1_state$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp &&
	     !corew$cpu_dmem_master_wlast ;
  assign MUX_bus_split_0_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_0_putOther &&
	     bus_split_0_doPut$wget[173] ;
  assign MUX_bus_split_0_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_0_putFirst &&
	     !bus_split_0_doPut$wget[173] ;
  assign MUX_bus_split_1_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_1_putOther &&
	     bus_split_1_doPut$wget[173] ;
  assign MUX_bus_split_1_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_1_putFirst &&
	     !bus_split_1_doPut$wget[173] ;
  assign MUX_bus_split_2_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_2_putOther &&
	     bus_split_2_doPut$wget[173] ;
  assign MUX_bus_split_2_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_2_putFirst &&
	     !bus_split_2_doPut$wget[173] ;
  assign MUX_bus_state$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerReq$D_OUT[0] ;
  assign MUX_bus_state$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerReq$D_OUT[0] ;
  assign MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[1] ;
  assign MUX_boot_rom_axi4_deburster_flitReceived$write_1__VAL_2 =
	     boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d97 ?
	       8'd0 :
	       x__h6549 ;
  assign MUX_boot_rom_axi4_deburster_readsSent$write_1__VAL_2 =
	     boot_rom_axi4_deburster_readsSent_19_EQ_boot_r_ETC___d130 ?
	       8'd0 :
	       x__h7083 ;
  assign MUX_boot_rom_axi4_deburster_writesSent$write_1__VAL_2 =
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[1] ?
	       8'd0 :
	       x__h6432 ;
  assign MUX_bus_1_1_activeSource_0$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_1_1_arbitrate &&
	     IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2570 ;
  assign MUX_bus_1_1_activeSource_1$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_1_1_arbitrate &&
	     IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2576 ;
  assign MUX_bus_1_1_activeSource_2$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_1_1_arbitrate &&
	     IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2582 ;
  assign MUX_bus_activeSource_0$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_arbitrate &&
	     IF_SEXT_bus_arbiter_lastSelect_676_677_BIT_0_6_ETC___d1700 ;
  assign MUX_bus_activeSource_1$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_arbitrate &&
	     IF_SEXT_bus_arbiter_lastSelect_676_677_BIT_0_6_ETC___d1704 ;
  assign MUX_bus_merged_0_flitLeft$write_1__VAL_1 =
	     bus_merged_0_flitLeft - 8'd1 ;
  assign MUX_bus_merged_1_flitLeft$write_1__VAL_1 =
	     bus_merged_1_flitLeft - 8'd1 ;
  always@(MUX_bus_1_flitToSink_0$wset_1__SEL_1 or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_4 or
	  bus_ifcs_0_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_2 or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_5 or
	  bus_ifcs_1_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_3 or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_6 or bus_ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_flitToSink_0$wset_1__SEL_1 ||
      MUX_bus_1_flitToSink_0$wset_1__SEL_4:
	  MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_0_rspBack$D_OUT;
      MUX_bus_1_flitToSink_0$wset_1__SEL_2 ||
      MUX_bus_1_flitToSink_0$wset_1__SEL_5:
	  MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_1_rspBack$D_OUT;
      MUX_bus_1_flitToSink_0$wset_1__SEL_3 ||
      MUX_bus_1_flitToSink_0$wset_1__SEL_6:
	  MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_2_rspBack$D_OUT;
      default: MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_bus_1_1_flitToSink_0$wset_1__SEL_1 or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_4 or
	  bus_1_ifcs_0_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_2 or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_5 or
	  bus_1_ifcs_1_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_3 or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_6 or
	  bus_1_ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_1 ||
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_4:
	  MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_0_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_2 ||
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_5:
	  MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_1_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_3 ||
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_6:
	  MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_2_rspBack$D_OUT;
      default: MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
		   73'h0AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_bus_1_flitToSink_1$wset_1__SEL_1 or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_4 or
	  bus_ifcs_0_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_2 or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_5 or
	  bus_ifcs_1_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_3 or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_6 or bus_ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_flitToSink_1$wset_1__SEL_1 ||
      MUX_bus_1_flitToSink_1$wset_1__SEL_4:
	  MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_0_rspBack$D_OUT;
      MUX_bus_1_flitToSink_1$wset_1__SEL_2 ||
      MUX_bus_1_flitToSink_1$wset_1__SEL_5:
	  MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_1_rspBack$D_OUT;
      MUX_bus_1_flitToSink_1$wset_1__SEL_3 ||
      MUX_bus_1_flitToSink_1$wset_1__SEL_6:
	  MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_2_rspBack$D_OUT;
      default: MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_bus_1_1_flitToSink_1$wset_1__SEL_1 or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_4 or
	  bus_1_ifcs_0_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_2 or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_5 or
	  bus_1_ifcs_1_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_3 or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_6 or
	  bus_1_ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_1 ||
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_4:
	  MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_0_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_2 ||
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_5:
	  MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_1_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_3 ||
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_6:
	  MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_2_rspBack$D_OUT;
      default: MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
		   73'h0AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_bus_split_0_flitLeft$write_1__VAL_1 =
	     bus_split_0_flitLeft - 8'd1 ;
  assign MUX_bus_split_1_flitLeft$write_1__VAL_1 =
	     bus_split_1_flitLeft - 8'd1 ;
  assign MUX_bus_split_2_flitLeft$write_1__VAL_1 =
	     bus_split_2_flitLeft - 8'd1 ;
  assign MUX_bus_ssNoSynth_0_w_buffer_enqw$wset_1__VAL_2 =
	     bus_split_0_doPut$wget[72:0] ;
  assign MUX_bus_ssNoSynth_1_w_buffer_enqw$wset_1__VAL_2 =
	     bus_split_1_doPut$wget[72:0] ;
  assign MUX_bus_ssNoSynth_2_w_buffer_enqw$wset_1__VAL_2 =
	     bus_split_2_doPut$wget[72:0] ;
  assign MUX_mem0_controller_axi4_deburster_flitReceived$write_1__VAL_2 =
	     mem0_controller_axi4_deburster_countWriteRspFF_ETC___d238 ?
	       8'd0 :
	       x__h12789 ;
  assign MUX_mem0_controller_axi4_deburster_readsSent$write_1__VAL_2 =
	     mem0_controller_axi4_deburster_readsSent_60_EQ_ETC___d271 ?
	       8'd0 :
	       x__h13323 ;
  assign MUX_mem0_controller_axi4_deburster_writesSent$write_1__VAL_2 =
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[1] ?
	       8'd0 :
	       x__h12672 ;

  // inlined wires
  assign ug_boot_rom_slave_u_aw_putWire$wget =
	     bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_0_aw_buffer_ff$D_OUT :
	       bus_split_0_doPut$wget[172:73] ;
  assign ug_boot_rom_slave_u_aw_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit &&
	     boot_rom_axi4_deburster_inShim_awff$FULL_N ;
  assign ug_boot_rom_slave_u_w_putWire$wget =
	     { x_wdata__h28214,
	       x_wstrb__h28215,
	       bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ?
		 bus_ssNoSynth_0_w_buffer_ff$D_OUT[0] :
		 MUX_bus_ssNoSynth_0_w_buffer_enqw$wset_1__VAL_2[0],
	       1'd0 } ;
  assign ug_boot_rom_slave_u_w_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit &&
	     boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign ug_boot_rom_slave_u_ar_putWire$wget =
	     bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_0_ar_buffer_ff$D_OUT :
	       bus_ssNoSynth_0_ar_buffer_enqw$wget ;
  assign ug_boot_rom_slave_u_ar_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit &&
	     boot_rom_axi4_deburster_inShim_arff$FULL_N ;
  assign ug_mem0_slave_u_aw_putWire$wget =
	     bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_1_aw_buffer_ff$D_OUT :
	       bus_split_1_doPut$wget[172:73] ;
  assign ug_mem0_slave_u_aw_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit &&
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N ;
  assign ug_mem0_slave_u_w_putWire$wget =
	     { x_wdata__h30432,
	       x_wstrb__h30433,
	       bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ?
		 bus_ssNoSynth_1_w_buffer_ff$D_OUT[0] :
		 MUX_bus_ssNoSynth_1_w_buffer_enqw$wset_1__VAL_2[0],
	       1'd0 } ;
  assign ug_mem0_slave_u_w_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit &&
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign ug_mem0_slave_u_ar_putWire$wget =
	     bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_1_ar_buffer_ff$D_OUT :
	       bus_ssNoSynth_1_ar_buffer_enqw$wget ;
  assign ug_mem0_slave_u_ar_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit &&
	     mem0_controller_axi4_deburster_inShim_arff$FULL_N ;
  assign uart0_slave_aw_buffer_enqw$wget =
	     bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_2_aw_buffer_ff$D_OUT :
	       bus_split_2_doPut$wget[172:73] ;
  assign uart0_slave_aw_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit &&
	     uart0_slave_aw_buffer_ff$FULL_N ;
  assign uart0_slave_w_buffer_enqw$wget =
	     { x_wdata__h32655,
	       x_wstrb__h32656,
	       bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ?
		 bus_ssNoSynth_2_w_buffer_ff$D_OUT[0] :
		 MUX_bus_ssNoSynth_2_w_buffer_enqw$wset_1__VAL_2[0],
	       1'd0 } ;
  assign uart0_slave_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit &&
	     uart0_slave_w_buffer_ff$FULL_N ;
  assign uart0_slave_b_dwReady$whas =
	     uart0$slave_bvalid && bus_ssNoSynth_2_b_dwReady$whas ;
  assign uart0_slave_ar_buffer_enqw$wget =
	     bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_2_ar_buffer_ff$D_OUT :
	       bus_ssNoSynth_2_ar_buffer_enqw$wget ;
  assign uart0_slave_ar_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit &&
	     uart0_slave_ar_buffer_ff$FULL_N ;
  assign uart0_slave_r_dwReady$whas =
	     uart0$slave_rvalid && bus_ssNoSynth_2_r_dwReady$whas ;
  assign bus_msNoSynth_0_w_dwReady$whas =
	     WILL_FIRE_RL_bus_merged_0_genOther ||
	     WILL_FIRE_RL_bus_merged_0_genFirst ;
  assign bus_msNoSynth_0_b_buffer_enqw$wget =
	     WILL_FIRE_RL_bus_ifcs_0_drainNoRouteResponse ?
	       bus_ifcs_0_noRouteRsp$D_OUT :
	       MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 ;
  assign bus_msNoSynth_0_b_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ifcs_0_drainNoRouteResponse ||
	     WILL_FIRE_RL_bus_ifcs_0_forwardRsp ;
  assign bus_msNoSynth_0_ar_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp &&
	     x_port1__read__h75247 == 9'd1 ||
	     WILL_FIRE_RL_bus_1_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit ;
  assign bus_msNoSynth_0_r_buffer_enqw$wget =
	     WILL_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse ?
	       bus_1_ifcs_0_noRouteRsp$D_OUT :
	       MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 ;
  assign bus_msNoSynth_0_r_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse ||
	     WILL_FIRE_RL_bus_1_ifcs_0_forwardRsp ;
  assign bus_msNoSynth_1_w_dwReady$whas =
	     WILL_FIRE_RL_bus_merged_1_genOther ||
	     WILL_FIRE_RL_bus_merged_1_genFirst ;
  assign bus_msNoSynth_1_b_buffer_enqw$wget =
	     WILL_FIRE_RL_bus_ifcs_1_drainNoRouteResponse ?
	       bus_ifcs_1_noRouteRsp$D_OUT :
	       MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 ;
  assign bus_msNoSynth_1_b_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ifcs_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_bus_ifcs_1_forwardRsp ;
  assign bus_msNoSynth_1_ar_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp &&
	     x_port1__read__h78238 == 9'd1 ||
	     WILL_FIRE_RL_bus_1_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit ;
  assign bus_msNoSynth_1_r_buffer_enqw$wget =
	     WILL_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse ?
	       bus_1_ifcs_1_noRouteRsp$D_OUT :
	       MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 ;
  assign bus_msNoSynth_1_r_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_bus_1_ifcs_1_forwardRsp ;
  assign bus_ssNoSynth_0_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_split_0_putOther &&
	     bus_split_0_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_0_putFirst &&
	     !bus_split_0_doPut$wget[173] ;
  assign bus_ssNoSynth_0_b_dwReady$whas =
	     WILL_FIRE_RL_bus_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit_1 ;
  assign bus_ssNoSynth_0_ar_buffer_enqw$wget =
	     (MUX_bus_1_flitToSink_0_1$wset_1__SEL_1 ||
	      MUX_bus_1_flitToSink_0_1$wset_1__SEL_3) ?
	       bus_1_ifcs_0_innerReq$D_OUT :
	       bus_1_ifcs_1_innerReq$D_OUT ;
  assign bus_ssNoSynth_0_r_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 ;
  assign bus_ssNoSynth_1_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_split_1_putOther &&
	     bus_split_1_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_1_putFirst &&
	     !bus_split_1_doPut$wget[173] ;
  assign bus_ssNoSynth_1_b_dwReady$whas =
	     WILL_FIRE_RL_bus_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit_1 ;
  assign bus_ssNoSynth_1_ar_buffer_enqw$wget =
	     (MUX_bus_1_flitToSink_1_1$wset_1__SEL_1 ||
	      MUX_bus_1_flitToSink_1_1$wset_1__SEL_3) ?
	       bus_1_ifcs_0_innerReq$D_OUT :
	       bus_1_ifcs_1_innerReq$D_OUT ;
  assign bus_ssNoSynth_1_r_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 ;
  assign bus_ssNoSynth_2_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_split_2_putOther &&
	     bus_split_2_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_2_putFirst &&
	     !bus_split_2_doPut$wget[173] ;
  assign bus_ssNoSynth_2_b_dwReady$whas =
	     WILL_FIRE_RL_bus_ifcs_2_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_2_firstFlit ;
  assign bus_ssNoSynth_2_ar_buffer_enqw$wget =
	     (MUX_bus_1_flitToSink_2$wset_1__SEL_1 ||
	      MUX_bus_1_flitToSink_2$wset_1__SEL_3) ?
	       bus_1_ifcs_0_innerReq$D_OUT :
	       bus_1_ifcs_1_innerReq$D_OUT ;
  assign bus_ssNoSynth_2_r_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_2_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_2_firstFlit ;
  assign bus_split_0_doPut$wget =
	     (MUX_bus_flitToSink_0$wset_1__SEL_1 ||
	      MUX_bus_flitToSink_0$wset_1__SEL_3) ?
	       bus_ifcs_0_innerReq$D_OUT :
	       bus_ifcs_1_innerReq$D_OUT ;
  assign bus_split_1_doPut$wget =
	     (MUX_bus_flitToSink_1$wset_1__SEL_1 ||
	      MUX_bus_flitToSink_1$wset_1__SEL_3) ?
	       bus_ifcs_0_innerReq$D_OUT :
	       bus_ifcs_1_innerReq$D_OUT ;
  assign bus_split_2_doPut$wget =
	     (MUX_bus_flitToSink_2$wset_1__SEL_1 ||
	      MUX_bus_flitToSink_2$wset_1__SEL_3) ?
	       bus_ifcs_0_innerReq$D_OUT :
	       bus_ifcs_1_innerReq$D_OUT ;
  assign bus_reqWires_0$wget =
	     (!bus_ifcs_0_innerRoute$D_OUT[0] ||
	      !IF_bus_split_0_flitLeft_261_EQ_0_262_THEN_bus__ETC___d1618) ?
	       IF_NOT_bus_ifcs_0_innerRoute_first__626_BIT_1__ETC___d1648 :
	       bus_ifcs_0_innerRoute$D_OUT[0] ;
  assign bus_reqWires_1$wget =
	     (!bus_ifcs_1_innerRoute$D_OUT[0] ||
	      !IF_bus_split_0_flitLeft_261_EQ_0_262_THEN_bus__ETC___d1618) ?
	       IF_NOT_bus_ifcs_1_innerRoute_first__655_BIT_1__ETC___d1664 :
	       bus_ifcs_1_innerRoute$D_OUT[0] ;
  assign bus_flitToSink_0$whas =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_ifcs_1_innerRoute$D_OUT[0] ;
  assign bus_flitToSink_1$whas =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_ifcs_1_innerRoute$D_OUT[1] ;
  assign bus_flitToSink_2$whas =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_ifcs_1_innerRoute$D_OUT[2] ;
  assign bus_1_reqWires_0$wget =
	     (!bus_ifcs_0_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
	       bus_ifcs_0_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
	       bus_ifcs_0_routeBack$D_OUT[0] ;
  assign bus_1_reqWires_1$wget =
	     (!bus_ifcs_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
	       bus_ifcs_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
	       bus_ifcs_1_routeBack$D_OUT[0] ;
  assign bus_1_reqWires_2$wget =
	     (!bus_ifcs_2_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
	       bus_ifcs_2_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
	       bus_ifcs_2_routeBack$D_OUT[0] ;
  assign bus_1_flitToSink_0$whas =
	     WILL_FIRE_RL_bus_1_burst && bus_ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_burst_1 && bus_ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_burst_2 && bus_ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_ifcs_2_routeBack$D_OUT[0] ;
  assign bus_1_flitToSink_1$whas =
	     WILL_FIRE_RL_bus_1_burst && bus_ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_burst_1 && bus_ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_burst_2 && bus_ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_ifcs_2_routeBack$D_OUT[1] ;
  assign bus_1_reqWires_0_1$wget =
	     (!bus_1_ifcs_0_innerRoute$D_OUT[0] ||
	      !bus_ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_bus_1_ifcs_0_innerRoute_first__296_BIT__ETC___d2318 :
	       bus_1_ifcs_0_innerRoute$D_OUT[0] ;
  assign bus_1_reqWires_1_1$wget =
	     (!bus_1_ifcs_1_innerRoute$D_OUT[0] ||
	      !bus_ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_bus_1_ifcs_1_innerRoute_first__325_BIT__ETC___d2334 :
	       bus_1_ifcs_1_innerRoute$D_OUT[0] ;
  assign bus_1_flitToSink_0_1$whas =
	     WILL_FIRE_RL_bus_1_burst_3 && bus_1_ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_ifcs_1_innerRoute$D_OUT[0] ;
  assign bus_1_flitToSink_1_1$whas =
	     WILL_FIRE_RL_bus_1_burst_3 && bus_1_ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_ifcs_1_innerRoute$D_OUT[1] ;
  assign bus_1_flitToSink_2$whas =
	     WILL_FIRE_RL_bus_1_burst_3 && bus_1_ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_ifcs_1_innerRoute$D_OUT[2] ;
  assign bus_1_1_reqWires_0$wget =
	     (!bus_1_ifcs_0_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
	       bus_1_ifcs_0_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
	       bus_1_ifcs_0_routeBack$D_OUT[0] ;
  assign bus_1_1_reqWires_1$wget =
	     (!bus_1_ifcs_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
	       bus_1_ifcs_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
	       bus_1_ifcs_1_routeBack$D_OUT[0] ;
  assign bus_1_1_reqWires_2$wget =
	     (!bus_1_ifcs_2_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
	       bus_1_ifcs_2_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
	       bus_1_ifcs_2_routeBack$D_OUT[0] ;
  assign bus_1_1_flitToSink_0$whas =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_1 &&
	     bus_1_ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_2 &&
	     bus_1_ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_routeBack$D_OUT[0] ;
  assign bus_1_1_flitToSink_1$whas =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_burst_1 &&
	     bus_1_ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_burst_2 &&
	     bus_1_ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_routeBack$D_OUT[1] ;
  assign ug_boot_rom_slave_u_b_dropWire$whas =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ssNoSynth_0_b_dwReady$whas ;
  assign ug_boot_rom_slave_u_r_dropWire$whas =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_ssNoSynth_0_r_dwReady$whas ;
  assign ug_mem0_slave_u_b_dropWire$whas =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ssNoSynth_1_b_dwReady$whas ;
  assign ug_mem0_slave_u_r_dropWire$whas =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_ssNoSynth_1_r_dwReady$whas ;
  assign bus_merged_0_doDrop$whas =
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp ||
	     WILL_FIRE_RL_bus_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_bus_ifcs_0_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit ;
  assign bus_merged_1_doDrop$whas =
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp ||
	     WILL_FIRE_RL_bus_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_bus_ifcs_1_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit ;
  assign bus_1_sourceSelect_0$whas =
	     WILL_FIRE_RL_bus_1_arbitrate &&
	     IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1910 ;
  assign bus_1_sourceSelect_1$whas =
	     WILL_FIRE_RL_bus_1_arbitrate &&
	     IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1916 ;
  assign bus_1_sourceSelect_2$whas =
	     WILL_FIRE_RL_bus_1_arbitrate &&
	     IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1922 ;
  assign bus_1_sourceSelect_0_1$whas =
	     WILL_FIRE_RL_bus_1_arbitrate_1 &&
	     IF_SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_ETC___d2370 ;
  assign bus_1_sourceSelect_1_1$whas =
	     WILL_FIRE_RL_bus_1_arbitrate_1 &&
	     IF_SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_ETC___d2374 ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_awff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ?
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[1] ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_wff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ?
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp &&
	     boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d97 ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_outShim_bff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write ?
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ?
	       10'd170 :
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_arff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ?
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req &&
	     boot_rom_axi4_deburster_readsSent_19_EQ_boot_r_ETC___d130 ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       boot_rom_axi4_deburster_outShim_rff$D_OUT[74:2],
	       boot_rom_axi4_deburster_lastReadRspFF$D_OUT,
	       boot_rom_axi4_deburster_outShim_rff$D_OUT[0] } ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ?
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ?
	       76'h2AAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;
  assign boot_rom_axi4_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ?
	       2'd1 :
	       2'd2 ;
  assign boot_rom_axi4_deburster_inSerial_state$port1__read =
	     boot_rom_axi4_deburster_inSerial_state$EN_port0__write ?
	       boot_rom_axi4_deburster_inSerial_state$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_state ;
  assign boot_rom_axi4_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW &&
	     boot_rom_axi4_deburster_inShim_wff$D_OUT[1] ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[1] ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;
  assign boot_rom_axi4_deburster_inSerial_state$port1__write_1 =
	     (MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign boot_rom_axi4_deburster_inSerial_state$port2__read =
	     boot_rom_axi4_deburster_inSerial_state$EN_port1__write ?
	       boot_rom_axi4_deburster_inSerial_state$port1__write_1 :
	       boot_rom_axi4_deburster_inSerial_state$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_awff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ?
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[1] ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_wff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ?
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp &&
	     mem0_controller_axi4_deburster_countWriteRspFF_ETC___d238 ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_outShim_bff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write ?
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ?
	       10'd170 :
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_arff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ?
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req &&
	     mem0_controller_axi4_deburster_readsSent_60_EQ_ETC___d271 ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       mem0_controller_axi4_deburster_outShim_rff$D_OUT[74:2],
	       mem0_controller_axi4_deburster_lastReadRspFF$D_OUT,
	       mem0_controller_axi4_deburster_outShim_rff$D_OUT[0] } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ?
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ?
	       76'h2AAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;
  assign mem0_controller_axi4_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ?
	       2'd1 :
	       2'd2 ;
  assign mem0_controller_axi4_deburster_inSerial_state$port1__read =
	     mem0_controller_axi4_deburster_inSerial_state$EN_port0__write ?
	       mem0_controller_axi4_deburster_inSerial_state$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_state ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW &&
	     mem0_controller_axi4_deburster_inShim_wff$D_OUT[1] ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[1] ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;
  assign mem0_controller_axi4_deburster_inSerial_state$port1__write_1 =
	     (MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign mem0_controller_axi4_deburster_inSerial_state$port2__read =
	     mem0_controller_axi4_deburster_inSerial_state$EN_port1__write ?
	       mem0_controller_axi4_deburster_inSerial_state$port1__write_1 :
	       mem0_controller_axi4_deburster_inSerial_state$port1__read ;
  assign bus_ifcs_0_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign bus_ifcs_0_noRoute_inner_currentReq$port0__write_1 =
	     { corew$cpu_imem_master_awid,
	       corew$cpu_imem_master_awaddr,
	       corew$cpu_imem_master_awlen,
	       corew$cpu_imem_master_awsize,
	       corew$cpu_imem_master_awburst,
	       corew$cpu_imem_master_awlock,
	       corew$cpu_imem_master_awcache,
	       corew$cpu_imem_master_awprot,
	       corew$cpu_imem_master_awqos,
	       corew$cpu_imem_master_awregion } ;
  assign bus_ifcs_0_noRoute_inner_currentReq$port1__read =
	     bus_ifcs_0_noRoute_inner_currentReq$EN_port0__write ?
	       bus_ifcs_0_noRoute_inner_currentReq$port0__write_1 :
	       bus_ifcs_0_noRoute_inner_currentReq ;
  assign bus_ifcs_0_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign bus_ifcs_0_noRoute_inner_pendingReq$port1__read =
	     bus_ifcs_0_noRoute_inner_pendingReq$EN_port0__write ||
	     bus_ifcs_0_noRoute_inner_pendingReq ;
  assign bus_ifcs_0_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp &&
	     bus_ifcs_0_noRoute_inner_pendingReq$port1__read ;
  assign bus_ifcs_1_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign bus_ifcs_1_noRoute_inner_currentReq$port0__write_1 =
	     { corew$cpu_dmem_master_awid,
	       corew$cpu_dmem_master_awaddr,
	       corew$cpu_dmem_master_awlen,
	       corew$cpu_dmem_master_awsize,
	       corew$cpu_dmem_master_awburst,
	       corew$cpu_dmem_master_awlock,
	       corew$cpu_dmem_master_awcache,
	       corew$cpu_dmem_master_awprot,
	       corew$cpu_dmem_master_awqos,
	       corew$cpu_dmem_master_awregion } ;
  assign bus_ifcs_1_noRoute_inner_currentReq$port1__read =
	     bus_ifcs_1_noRoute_inner_currentReq$EN_port0__write ?
	       bus_ifcs_1_noRoute_inner_currentReq$port0__write_1 :
	       bus_ifcs_1_noRoute_inner_currentReq ;
  assign bus_ifcs_1_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign bus_ifcs_1_noRoute_inner_pendingReq$port1__read =
	     bus_ifcs_1_noRoute_inner_pendingReq$EN_port0__write ||
	     bus_ifcs_1_noRoute_inner_pendingReq ;
  assign bus_ifcs_1_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp &&
	     bus_ifcs_1_noRoute_inner_pendingReq$port1__read ;
  assign bus_1_ifcs_0_noRoute_currentReq$port0__write_1 =
	     { corew$cpu_imem_master_arid,
	       corew$cpu_imem_master_araddr,
	       corew$cpu_imem_master_arlen,
	       corew$cpu_imem_master_arsize,
	       corew$cpu_imem_master_arburst,
	       corew$cpu_imem_master_arlock,
	       corew$cpu_imem_master_arcache,
	       corew$cpu_imem_master_arprot,
	       corew$cpu_imem_master_arqos,
	       corew$cpu_imem_master_arregion } ;
  assign bus_1_ifcs_0_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit ?
	       bus_1_ifcs_0_noRoute_currentReq$port0__write_1 :
	       bus_1_ifcs_0_noRoute_currentReq ;
  assign bus_1_ifcs_0_noRoute_flitCount$port0__write_1 =
	     { 1'd0, corew$cpu_imem_master_arlen } + 9'd1 ;
  assign bus_1_ifcs_0_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h75247 - 9'd1 ;
  assign bus_1_ifcs_0_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp ?
	       bus_1_ifcs_0_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h75247 ;
  assign bus_1_ifcs_1_noRoute_currentReq$port0__write_1 =
	     { corew$cpu_dmem_master_arid,
	       corew$cpu_dmem_master_araddr,
	       corew$cpu_dmem_master_arlen,
	       corew$cpu_dmem_master_arsize,
	       corew$cpu_dmem_master_arburst,
	       corew$cpu_dmem_master_arlock,
	       corew$cpu_dmem_master_arcache,
	       corew$cpu_dmem_master_arprot,
	       corew$cpu_dmem_master_arqos,
	       corew$cpu_dmem_master_arregion } ;
  assign bus_1_ifcs_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit ?
	       bus_1_ifcs_1_noRoute_currentReq$port0__write_1 :
	       bus_1_ifcs_1_noRoute_currentReq ;
  assign bus_1_ifcs_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, corew$cpu_dmem_master_arlen } + 9'd1 ;
  assign bus_1_ifcs_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h78238 - 9'd1 ;
  assign bus_1_ifcs_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp ?
	       bus_1_ifcs_1_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h78238 ;

  // register boot_rom_axi4_deburster_flitReceived
  assign boot_rom_axi4_deburster_flitReceived$D_IN =
	     WILL_FIRE_RL_rl_reset_start_initial ?
	       8'd0 :
	       MUX_boot_rom_axi4_deburster_flitReceived$write_1__VAL_2 ;
  assign boot_rom_axi4_deburster_flitReceived$EN =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp ||
	     WILL_FIRE_RL_rl_reset_start_initial ;

  // register boot_rom_axi4_deburster_inSerial_lastWasRead
  assign boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;
  assign boot_rom_axi4_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;

  // register boot_rom_axi4_deburster_inSerial_shim_arff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_awff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_bff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_rff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_wff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_state
  assign boot_rom_axi4_deburster_inSerial_state$D_IN =
	     boot_rom_axi4_deburster_inSerial_state$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_state$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_readsSent
  assign boot_rom_axi4_deburster_readsSent$D_IN =
	     WILL_FIRE_RL_rl_reset_start_initial ?
	       8'd0 :
	       MUX_boot_rom_axi4_deburster_readsSent$write_1__VAL_2 ;
  assign boot_rom_axi4_deburster_readsSent$EN =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ||
	     WILL_FIRE_RL_rl_reset_start_initial ;

  // register boot_rom_axi4_deburster_writesSent
  assign boot_rom_axi4_deburster_writesSent$D_IN =
	     WILL_FIRE_RL_rl_reset_start_initial ?
	       8'd0 :
	       MUX_boot_rom_axi4_deburster_writesSent$write_1__VAL_2 ;
  assign boot_rom_axi4_deburster_writesSent$EN =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ||
	     WILL_FIRE_RL_rl_reset_start_initial ;

  // register bus_1_1_activeSource_0
  always@(MUX_bus_1_1_activeSource_0$write_1__SEL_1 or
	  MUX_bus_1_1_activeSource_0$write_1__VAL_1 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_2 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_activeSource_0$write_1__SEL_1:
	  bus_1_1_activeSource_0$D_IN =
	      MUX_bus_1_1_activeSource_0$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_2:
	  bus_1_1_activeSource_0$D_IN =
	      MUX_bus_1_1_activeSource_0$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_3:
	  bus_1_1_activeSource_0$D_IN =
	      MUX_bus_1_1_activeSource_0$write_1__VAL_1;
      default: bus_1_1_activeSource_0$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign bus_1_1_activeSource_0$EN =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ;

  // register bus_1_1_activeSource_1
  always@(MUX_bus_1_1_activeSource_0$write_1__SEL_1 or
	  MUX_bus_1_1_activeSource_1$write_1__VAL_1 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_2 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_activeSource_0$write_1__SEL_1:
	  bus_1_1_activeSource_1$D_IN =
	      MUX_bus_1_1_activeSource_1$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_2:
	  bus_1_1_activeSource_1$D_IN =
	      MUX_bus_1_1_activeSource_1$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_3:
	  bus_1_1_activeSource_1$D_IN =
	      MUX_bus_1_1_activeSource_1$write_1__VAL_1;
      default: bus_1_1_activeSource_1$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign bus_1_1_activeSource_1$EN =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ;

  // register bus_1_1_activeSource_2
  always@(MUX_bus_1_1_activeSource_0$write_1__SEL_1 or
	  MUX_bus_1_1_activeSource_2$write_1__VAL_1 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_2 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_activeSource_0$write_1__SEL_1:
	  bus_1_1_activeSource_2$D_IN =
	      MUX_bus_1_1_activeSource_2$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_2:
	  bus_1_1_activeSource_2$D_IN =
	      MUX_bus_1_1_activeSource_2$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_3:
	  bus_1_1_activeSource_2$D_IN =
	      MUX_bus_1_1_activeSource_2$write_1__VAL_1;
      default: bus_1_1_activeSource_2$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign bus_1_1_activeSource_2$EN =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ;

  // register bus_1_1_arbiter_firstHot
  assign bus_1_1_arbiter_firstHot$D_IN =
	     IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2582 ;
  assign bus_1_1_arbiter_firstHot$EN = CAN_FIRE_RL_bus_1_1_arbitrate ;

  // register bus_1_1_arbiter_lastSelect
  assign bus_1_1_arbiter_lastSelect$D_IN =
	     IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2570 ;
  assign bus_1_1_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_1_1_arbitrate ;

  // register bus_1_1_arbiter_lastSelect_1
  assign bus_1_1_arbiter_lastSelect_1$D_IN =
	     IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2576 ;
  assign bus_1_1_arbiter_lastSelect_1$EN = CAN_FIRE_RL_bus_1_1_arbitrate ;

  // register bus_1_1_state
  assign bus_1_1_state$D_IN =
	     !MUX_bus_1_1_state$write_1__SEL_1 &&
	     !MUX_bus_1_1_state$write_1__SEL_2 &&
	     !MUX_bus_1_1_state$write_1__SEL_3 ;
  assign bus_1_1_state$EN =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ;

  // register bus_1_activeSource_0
  assign bus_1_activeSource_0$D_IN = 1'b0 ;
  assign bus_1_activeSource_0$EN = 1'b0 ;

  // register bus_1_activeSource_0_1
  assign bus_1_activeSource_0_1$D_IN = 1'b0 ;
  assign bus_1_activeSource_0_1$EN = 1'b0 ;

  // register bus_1_activeSource_1
  assign bus_1_activeSource_1$D_IN = 1'b0 ;
  assign bus_1_activeSource_1$EN = 1'b0 ;

  // register bus_1_activeSource_1_1
  assign bus_1_activeSource_1_1$D_IN = 1'b0 ;
  assign bus_1_activeSource_1_1$EN = 1'b0 ;

  // register bus_1_activeSource_2
  assign bus_1_activeSource_2$D_IN = 1'b0 ;
  assign bus_1_activeSource_2$EN = 1'b0 ;

  // register bus_1_arbiter_firstHot
  assign bus_1_arbiter_firstHot$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1922 ;
  assign bus_1_arbiter_firstHot$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_firstHot_1
  assign bus_1_arbiter_firstHot_1$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_ETC___d2374 ;
  assign bus_1_arbiter_firstHot_1$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect
  assign bus_1_arbiter_lastSelect$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1910 ;
  assign bus_1_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_lastSelect_1
  assign bus_1_arbiter_lastSelect_1$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1916 ;
  assign bus_1_arbiter_lastSelect_1$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_lastSelect_2
  assign bus_1_arbiter_lastSelect_2$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_ETC___d2370 ;
  assign bus_1_arbiter_lastSelect_2$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_ifcs_0_noRoute_currentReq
  assign bus_1_ifcs_0_noRoute_currentReq$D_IN =
	     bus_1_ifcs_0_noRoute_currentReq$port1__read ;
  assign bus_1_ifcs_0_noRoute_currentReq$EN = 1'b1 ;

  // register bus_1_ifcs_0_noRoute_flitCount
  assign bus_1_ifcs_0_noRoute_flitCount$D_IN =
	     bus_1_ifcs_0_noRoute_flitCount$port2__read ;
  assign bus_1_ifcs_0_noRoute_flitCount$EN = 1'b1 ;

  // register bus_1_ifcs_0_state
  assign bus_1_ifcs_0_state$D_IN = 2'd0 ;
  assign bus_1_ifcs_0_state$EN =
	     WILL_FIRE_RL_bus_1_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits ;

  // register bus_1_ifcs_0_state_1
  assign bus_1_ifcs_0_state_1$D_IN = MUX_bus_1_ifcs_0_state_1$write_1__SEL_1 ;
  assign bus_1_ifcs_0_state_1$EN =
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 &&
	     !boot_rom_axi4_deburster_inShim_rff$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1 &&
	     boot_rom_axi4_deburster_inShim_rff$D_OUT[1] ;

  // register bus_1_ifcs_1_noRoute_currentReq
  assign bus_1_ifcs_1_noRoute_currentReq$D_IN =
	     bus_1_ifcs_1_noRoute_currentReq$port1__read ;
  assign bus_1_ifcs_1_noRoute_currentReq$EN = 1'b1 ;

  // register bus_1_ifcs_1_noRoute_flitCount
  assign bus_1_ifcs_1_noRoute_flitCount$D_IN =
	     bus_1_ifcs_1_noRoute_flitCount$port2__read ;
  assign bus_1_ifcs_1_noRoute_flitCount$EN = 1'b1 ;

  // register bus_1_ifcs_1_state
  assign bus_1_ifcs_1_state$D_IN = 2'd0 ;
  assign bus_1_ifcs_1_state$EN =
	     WILL_FIRE_RL_bus_1_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits ;

  // register bus_1_ifcs_1_state_1
  assign bus_1_ifcs_1_state_1$D_IN = MUX_bus_1_ifcs_1_state_1$write_1__SEL_1 ;
  assign bus_1_ifcs_1_state_1$EN =
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 &&
	     !mem0_controller_axi4_deburster_inShim_rff$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1 &&
	     mem0_controller_axi4_deburster_inShim_rff$D_OUT[1] ;

  // register bus_1_ifcs_2_state
  assign bus_1_ifcs_2_state$D_IN = !MUX_bus_1_ifcs_2_state$write_1__SEL_1 ;
  assign bus_1_ifcs_2_state$EN =
	     WILL_FIRE_RL_bus_1_ifcs_2_followFlits && uart0$slave_rlast ||
	     WILL_FIRE_RL_bus_1_ifcs_2_firstFlit && !uart0$slave_rlast ;

  // register bus_1_state
  assign bus_1_state$D_IN = 1'd0 ;
  assign bus_1_state$EN =
	     WILL_FIRE_RL_bus_1_burst_2 || WILL_FIRE_RL_bus_1_burst_1 ||
	     WILL_FIRE_RL_bus_1_burst ;

  // register bus_1_state_1
  assign bus_1_state_1$D_IN = 1'd0 ;
  assign bus_1_state_1$EN =
	     WILL_FIRE_RL_bus_1_burst_4 || WILL_FIRE_RL_bus_1_burst_3 ;

  // register bus_activeSource_0
  assign bus_activeSource_0$D_IN =
	     MUX_bus_activeSource_0$write_1__SEL_1 ?
	       MUX_bus_activeSource_0$write_1__VAL_1 :
	       MUX_bus_activeSource_0$write_1__VAL_1 ;
  assign bus_activeSource_0$EN =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     !bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     !bus_ifcs_1_innerReq$D_OUT[0] ;

  // register bus_activeSource_1
  assign bus_activeSource_1$D_IN =
	     MUX_bus_activeSource_0$write_1__SEL_1 ?
	       MUX_bus_activeSource_1$write_1__VAL_1 :
	       MUX_bus_activeSource_1$write_1__VAL_1 ;
  assign bus_activeSource_1$EN =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     !bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     !bus_ifcs_1_innerReq$D_OUT[0] ;

  // register bus_arbiter_firstHot
  assign bus_arbiter_firstHot$D_IN =
	     IF_SEXT_bus_arbiter_lastSelect_676_677_BIT_0_6_ETC___d1704 ;
  assign bus_arbiter_firstHot$EN = CAN_FIRE_RL_bus_arbitrate ;

  // register bus_arbiter_lastSelect
  assign bus_arbiter_lastSelect$D_IN =
	     IF_SEXT_bus_arbiter_lastSelect_676_677_BIT_0_6_ETC___d1700 ;
  assign bus_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_arbitrate ;

  // register bus_ifcs_0_noRoute_inner_currentReq
  assign bus_ifcs_0_noRoute_inner_currentReq$D_IN =
	     bus_ifcs_0_noRoute_inner_currentReq$port1__read ;
  assign bus_ifcs_0_noRoute_inner_currentReq$EN = 1'b1 ;

  // register bus_ifcs_0_noRoute_inner_pendingReq
  assign bus_ifcs_0_noRoute_inner_pendingReq$D_IN =
	     bus_ifcs_0_noRoute_inner_pendingReq$port2__read ;
  assign bus_ifcs_0_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register bus_ifcs_0_state
  always@(MUX_bus_ifcs_0_state$write_1__SEL_1 or
	  MUX_bus_ifcs_0_state$write_1__SEL_2 or
	  MUX_bus_ifcs_0_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_ifcs_0_state$write_1__SEL_1: bus_ifcs_0_state$D_IN = 2'd0;
      MUX_bus_ifcs_0_state$write_1__SEL_2: bus_ifcs_0_state$D_IN = 2'd1;
      MUX_bus_ifcs_0_state$write_1__SEL_3: bus_ifcs_0_state$D_IN = 2'd2;
      default: bus_ifcs_0_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign bus_ifcs_0_state$EN =
	     (WILL_FIRE_RL_bus_ifcs_0_drainFlits ||
	      WILL_FIRE_RL_bus_ifcs_0_followFlits) &&
	     corew$cpu_imem_master_wlast ||
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	     !corew$cpu_imem_master_wlast ||
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp &&
	     !corew$cpu_imem_master_wlast ;

  // register bus_ifcs_0_state_1
  assign bus_ifcs_0_state_1$D_IN = 1'd0 ;
  assign bus_ifcs_0_state_1$EN = CAN_FIRE_RL_bus_ifcs_0_followFlits_1 ;

  // register bus_ifcs_1_noRoute_inner_currentReq
  assign bus_ifcs_1_noRoute_inner_currentReq$D_IN =
	     bus_ifcs_1_noRoute_inner_currentReq$port1__read ;
  assign bus_ifcs_1_noRoute_inner_currentReq$EN = 1'b1 ;

  // register bus_ifcs_1_noRoute_inner_pendingReq
  assign bus_ifcs_1_noRoute_inner_pendingReq$D_IN =
	     bus_ifcs_1_noRoute_inner_pendingReq$port2__read ;
  assign bus_ifcs_1_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register bus_ifcs_1_state
  always@(MUX_bus_ifcs_1_state$write_1__SEL_1 or
	  MUX_bus_ifcs_1_state$write_1__SEL_2 or
	  MUX_bus_ifcs_1_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_ifcs_1_state$write_1__SEL_1: bus_ifcs_1_state$D_IN = 2'd0;
      MUX_bus_ifcs_1_state$write_1__SEL_2: bus_ifcs_1_state$D_IN = 2'd1;
      MUX_bus_ifcs_1_state$write_1__SEL_3: bus_ifcs_1_state$D_IN = 2'd2;
      default: bus_ifcs_1_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign bus_ifcs_1_state$EN =
	     (WILL_FIRE_RL_bus_ifcs_1_drainFlits ||
	      WILL_FIRE_RL_bus_ifcs_1_followFlits) &&
	     corew$cpu_dmem_master_wlast ||
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	     !corew$cpu_dmem_master_wlast ||
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp &&
	     !corew$cpu_dmem_master_wlast ;

  // register bus_ifcs_1_state_1
  assign bus_ifcs_1_state_1$D_IN = 1'd0 ;
  assign bus_ifcs_1_state_1$EN = CAN_FIRE_RL_bus_ifcs_1_followFlits_1 ;

  // register bus_ifcs_2_state
  assign bus_ifcs_2_state$D_IN = 1'd0 ;
  assign bus_ifcs_2_state$EN = CAN_FIRE_RL_bus_ifcs_2_followFlits ;

  // register bus_merged_0_flitLeft
  assign bus_merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_bus_merged_0_genOther ?
	       MUX_bus_merged_0_flitLeft$write_1__VAL_1 :
	       corew$cpu_imem_master_awlen ;
  assign bus_merged_0_flitLeft$EN = bus_msNoSynth_0_w_dwReady$whas ;

  // register bus_merged_1_flitLeft
  assign bus_merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_bus_merged_1_genOther ?
	       MUX_bus_merged_1_flitLeft$write_1__VAL_1 :
	       corew$cpu_dmem_master_awlen ;
  assign bus_merged_1_flitLeft$EN = bus_msNoSynth_1_w_dwReady$whas ;

  // register bus_split_0_flitLeft
  assign bus_split_0_flitLeft$D_IN =
	     MUX_bus_split_0_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_0_flitLeft$write_1__VAL_1 :
	       bus_split_0_doPut$wget[101:94] ;
  assign bus_split_0_flitLeft$EN = bus_ssNoSynth_0_w_buffer_enqw$whas ;

  // register bus_split_1_flitLeft
  assign bus_split_1_flitLeft$D_IN =
	     MUX_bus_split_1_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_1_flitLeft$write_1__VAL_1 :
	       bus_split_1_doPut$wget[101:94] ;
  assign bus_split_1_flitLeft$EN = bus_ssNoSynth_1_w_buffer_enqw$whas ;

  // register bus_split_2_flitLeft
  assign bus_split_2_flitLeft$D_IN =
	     MUX_bus_split_2_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_2_flitLeft$write_1__VAL_1 :
	       bus_split_2_doPut$wget[101:94] ;
  assign bus_split_2_flitLeft$EN = bus_ssNoSynth_2_w_buffer_enqw$whas ;

  // register bus_state
  assign bus_state$D_IN =
	     !MUX_bus_state$write_1__SEL_1 && !MUX_bus_state$write_1__SEL_2 ;
  assign bus_state$EN =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     !bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     !bus_ifcs_1_innerReq$D_OUT[0] ;

  // register mem0_controller_axi4_deburster_flitReceived
  assign mem0_controller_axi4_deburster_flitReceived$D_IN =
	     WILL_FIRE_RL_rl_reset_start_initial ?
	       8'd0 :
	       MUX_mem0_controller_axi4_deburster_flitReceived$write_1__VAL_2 ;
  assign mem0_controller_axi4_deburster_flitReceived$EN =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp ||
	     WILL_FIRE_RL_rl_reset_start_initial ;

  // register mem0_controller_axi4_deburster_inSerial_lastWasRead
  assign mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;
  assign mem0_controller_axi4_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;

  // register mem0_controller_axi4_deburster_inSerial_shim_arff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_awff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_bff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_rff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_wff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_state
  assign mem0_controller_axi4_deburster_inSerial_state$D_IN =
	     mem0_controller_axi4_deburster_inSerial_state$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_readsSent
  assign mem0_controller_axi4_deburster_readsSent$D_IN =
	     WILL_FIRE_RL_rl_reset_start_initial ?
	       8'd0 :
	       MUX_mem0_controller_axi4_deburster_readsSent$write_1__VAL_2 ;
  assign mem0_controller_axi4_deburster_readsSent$EN =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ||
	     WILL_FIRE_RL_rl_reset_start_initial ;

  // register mem0_controller_axi4_deburster_writesSent
  assign mem0_controller_axi4_deburster_writesSent$D_IN =
	     WILL_FIRE_RL_rl_reset_start_initial ?
	       8'd0 :
	       MUX_mem0_controller_axi4_deburster_writesSent$write_1__VAL_2 ;
  assign mem0_controller_axi4_deburster_writesSent$EN =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ||
	     WILL_FIRE_RL_rl_reset_start_initial ;

  // register rg_state
  assign rg_state$D_IN = WILL_FIRE_RL_rl_reset_start_initial ? 2'd1 : 2'd2 ;
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_start_initial ||
	     WILL_FIRE_RL_rl_reset_complete_initial ;

  // submodule boot_rom
  assign boot_rom$set_addr_map_addr_base =
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign boot_rom$set_addr_map_addr_lim =
	     soc_map$m_boot_rom_addr_range[127:64] +
	     soc_map$m_boot_rom_addr_range[63:0] ;
  assign boot_rom$slave_araddr =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[92:29] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[92:29] ;
  assign boot_rom$slave_arburst =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[17:16] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[17:16] ;
  assign boot_rom$slave_arcache =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[14:11] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[14:11] ;
  assign boot_rom$slave_arid =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[99:93] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[99:93] ;
  assign boot_rom$slave_arlen =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[28:21] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[28:21] ;
  assign boot_rom$slave_arlock =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[15] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[15] ;
  assign boot_rom$slave_arprot =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[10:8] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[10:8] ;
  assign boot_rom$slave_arqos =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[7:4] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[7:4] ;
  assign boot_rom$slave_arregion =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[3:0] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[3:0] ;
  assign boot_rom$slave_arsize =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[20:18] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[20:18] ;
  assign boot_rom$slave_awaddr =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[92:29] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[92:29] ;
  assign boot_rom$slave_awburst =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[17:16] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[17:16] ;
  assign boot_rom$slave_awcache =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[14:11] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[14:11] ;
  assign boot_rom$slave_awid =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[99:93] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[99:93] ;
  assign boot_rom$slave_awlen =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[28:21] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[28:21] ;
  assign boot_rom$slave_awlock =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[15] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[15] ;
  assign boot_rom$slave_awprot =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[10:8] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[10:8] ;
  assign boot_rom$slave_awqos =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[7:4] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[7:4] ;
  assign boot_rom$slave_awregion =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[3:0] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[3:0] ;
  assign boot_rom$slave_awsize =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[20:18] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[20:18] ;
  assign boot_rom$slave_bready = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign boot_rom$slave_rready = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign boot_rom$slave_wdata =
	     br_w_buffer_ff$EMPTY_N ?
	       br_w_buffer_ff$D_OUT[73:10] :
	       boot_rom_axi4_deburster_outShim_wff$D_OUT[73:10] ;
  assign boot_rom$slave_wlast =
	     br_w_buffer_ff$EMPTY_N ?
	       br_w_buffer_ff$D_OUT[1] :
	       boot_rom_axi4_deburster_outShim_wff$D_OUT[1] ;
  assign boot_rom$slave_wstrb =
	     br_w_buffer_ff$EMPTY_N ?
	       br_w_buffer_ff$D_OUT[9:2] :
	       boot_rom_axi4_deburster_outShim_wff$D_OUT[9:2] ;
  assign boot_rom$slave_wuser =
	     br_w_buffer_ff$EMPTY_N ?
	       br_w_buffer_ff$D_OUT[0] :
	       boot_rom_axi4_deburster_outShim_wff$D_OUT[0] ;
  assign boot_rom$EN_set_addr_map = CAN_FIRE_RL_rl_reset_complete_initial ;
  assign boot_rom$slave_awvalid = CAN_FIRE_RL_br_aw_forwardFlit ;
  assign boot_rom$slave_wvalid = CAN_FIRE_RL_br_w_forwardFlit ;
  assign boot_rom$slave_arvalid = CAN_FIRE_RL_br_ar_forwardFlit ;

  // submodule boot_rom_axi4_deburster_countWriteRspFF
  assign boot_rom_axi4_deburster_countWriteRspFF$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign boot_rom_axi4_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[1] ;
  assign boot_rom_axi4_deburster_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp &&
	     boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d97 ;
  assign boot_rom_axi4_deburster_countWriteRspFF$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_inShim_arff
  assign boot_rom_axi4_deburster_inShim_arff$D_IN =
	     ug_boot_rom_slave_u_ar_putWire$wget ;
  assign boot_rom_axi4_deburster_inShim_arff$ENQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_ar_doPut ;
  assign boot_rom_axi4_deburster_inShim_arff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;
  assign boot_rom_axi4_deburster_inShim_arff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_inShim_awff
  assign boot_rom_axi4_deburster_inShim_awff$D_IN =
	     ug_boot_rom_slave_u_aw_putWire$wget ;
  assign boot_rom_axi4_deburster_inShim_awff$ENQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_aw_doPut ;
  assign boot_rom_axi4_deburster_inShim_awff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;
  assign boot_rom_axi4_deburster_inShim_awff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_inShim_bff
  assign boot_rom_axi4_deburster_inShim_bff$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read[8:0] ;
  assign boot_rom_axi4_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;
  assign boot_rom_axi4_deburster_inShim_bff$DEQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_b_doDrop ;
  assign boot_rom_axi4_deburster_inShim_bff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_inShim_rff
  assign boot_rom_axi4_deburster_inShim_rff$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[74:0] ;
  assign boot_rom_axi4_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ;
  assign boot_rom_axi4_deburster_inShim_rff$DEQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_r_doDrop ;
  assign boot_rom_axi4_deburster_inShim_rff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_inShim_wff
  assign boot_rom_axi4_deburster_inShim_wff$D_IN =
	     ug_boot_rom_slave_u_w_putWire$wget ;
  assign boot_rom_axi4_deburster_inShim_wff$ENQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_w_doPut ;
  assign boot_rom_axi4_deburster_inShim_wff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ;
  assign boot_rom_axi4_deburster_inShim_wff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_lastReadRspFF
  assign boot_rom_axi4_deburster_lastReadRspFF$D_IN =
	     boot_rom_axi4_deburster_readsSent_19_EQ_boot_r_ETC___d130 ;
  assign boot_rom_axi4_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;
  assign boot_rom_axi4_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;
  assign boot_rom_axi4_deburster_lastReadRspFF$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_outShim_arff
  assign boot_rom_axi4_deburster_outShim_arff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[99:93],
	       x_araddr__h6763,
	       8'd0,
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign boot_rom_axi4_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;
  assign boot_rom_axi4_deburster_outShim_arff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign boot_rom_axi4_deburster_outShim_arff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_outShim_awff
  assign boot_rom_axi4_deburster_outShim_awff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[99:93],
	       x_awaddr__h6058,
	       8'd0,
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign boot_rom_axi4_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;
  assign boot_rom_axi4_deburster_outShim_awff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut ;
  assign boot_rom_axi4_deburster_outShim_awff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_outShim_bff
  assign boot_rom_axi4_deburster_outShim_bff$D_IN =
	     { boot_rom$slave_bid, boot_rom$slave_bresp } ;
  assign boot_rom_axi4_deburster_outShim_bff$ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign boot_rom_axi4_deburster_outShim_bff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp ;
  assign boot_rom_axi4_deburster_outShim_bff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_outShim_rff
  assign boot_rom_axi4_deburster_outShim_rff$D_IN =
	     { boot_rom$slave_rid,
	       boot_rom$slave_rdata,
	       boot_rom$slave_rresp,
	       boot_rom$slave_rlast,
	       boot_rom$slave_ruser } ;
  assign boot_rom_axi4_deburster_outShim_rff$ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign boot_rom_axi4_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;
  assign boot_rom_axi4_deburster_outShim_rff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule boot_rom_axi4_deburster_outShim_wff
  assign boot_rom_axi4_deburster_outShim_wff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[73:2],
	       1'd1,
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] } ;
  assign boot_rom_axi4_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;
  assign boot_rom_axi4_deburster_outShim_wff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign boot_rom_axi4_deburster_outShim_wff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule br_ar_buffer_ff
  assign br_ar_buffer_ff$D_IN = boot_rom_axi4_deburster_outShim_arff$D_OUT ;
  assign br_ar_buffer_ff$ENQ = CAN_FIRE_RL_br_ar_buffer_enqueue ;
  assign br_ar_buffer_ff$DEQ = CAN_FIRE_RL_br_ar_buffer_dequeue ;
  assign br_ar_buffer_ff$CLR = 1'b0 ;

  // submodule br_ar_buffer_firstValid
  assign br_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign br_ar_buffer_firstValid$EN = CAN_FIRE_RL_br_ar_dropFlit ;

  // submodule br_aw_buffer_ff
  assign br_aw_buffer_ff$D_IN = boot_rom_axi4_deburster_outShim_awff$D_OUT ;
  assign br_aw_buffer_ff$ENQ = CAN_FIRE_RL_br_aw_buffer_enqueue ;
  assign br_aw_buffer_ff$DEQ = CAN_FIRE_RL_br_aw_buffer_dequeue ;
  assign br_aw_buffer_ff$CLR = 1'b0 ;

  // submodule br_aw_buffer_firstValid
  assign br_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign br_aw_buffer_firstValid$EN = CAN_FIRE_RL_br_aw_dropFlit ;

  // submodule br_w_buffer_ff
  assign br_w_buffer_ff$D_IN = boot_rom_axi4_deburster_outShim_wff$D_OUT ;
  assign br_w_buffer_ff$ENQ = CAN_FIRE_RL_br_w_buffer_enqueue ;
  assign br_w_buffer_ff$DEQ = CAN_FIRE_RL_br_w_buffer_dequeue ;
  assign br_w_buffer_ff$CLR = 1'b0 ;

  // submodule br_w_buffer_firstValid
  assign br_w_buffer_firstValid$D_IN = 1'd1 ;
  assign br_w_buffer_firstValid$EN = CAN_FIRE_RL_br_w_dropFlit ;

  // submodule bus_1_ifcs_0_innerReq
  assign bus_1_ifcs_0_innerReq$D_IN =
	     { fatReq_arid__h74677,
	       corew$cpu_imem_master_araddr,
	       corew$cpu_imem_master_arlen,
	       corew$cpu_imem_master_arsize,
	       corew$cpu_imem_master_arburst,
	       corew$cpu_imem_master_arlock,
	       corew$cpu_imem_master_arcache,
	       corew$cpu_imem_master_arprot,
	       corew$cpu_imem_master_arqos,
	       corew$cpu_imem_master_arregion } ;
  assign bus_1_ifcs_0_innerReq$ENQ =
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit ;
  assign bus_1_ifcs_0_innerReq$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_3 ;
  assign bus_1_ifcs_0_innerReq$CLR = 1'b0 ;

  // submodule bus_1_ifcs_0_innerRoute
  assign bus_1_ifcs_0_innerRoute$D_IN =
	     { _0_OR_NOT_corew_cpu_imem_master_ar_araddr__036__ETC___d2083,
	       !corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2043 &&
	       corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2046 &&
	       (corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2037 ||
		!corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2040),
	       !corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2037 &&
	       corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2040 } ;
  assign bus_1_ifcs_0_innerRoute$ENQ = CAN_FIRE_RL_bus_1_ifcs_0_firstFlit ;
  assign bus_1_ifcs_0_innerRoute$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_3 ;
  assign bus_1_ifcs_0_innerRoute$CLR = 1'b0 ;

  // submodule bus_1_ifcs_0_noRouteRsp
  assign bus_1_ifcs_0_noRouteRsp$D_IN =
	     { bus_1_ifcs_0_noRoute_currentReq$port1__read[98:93],
	       66'h2AAAAAAAAAAAAAAAB,
	       x_port1__read__h75247 == 9'd1 } ;
  assign bus_1_ifcs_0_noRouteRsp$ENQ =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp ;
  assign bus_1_ifcs_0_noRouteRsp$DEQ =
	     CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse ;
  assign bus_1_ifcs_0_noRouteRsp$CLR = 1'b0 ;

  // submodule bus_1_ifcs_0_routeBack
  assign bus_1_ifcs_0_routeBack$D_IN =
	     2'd1 <<
	     boot_rom_axi4_deburster_inShim_rffD_OUT_BITS__ETC__q24[6] ;
  assign bus_1_ifcs_0_routeBack$ENQ = CAN_FIRE_RL_bus_1_ifcs_0_firstFlit_1 ;
  assign bus_1_ifcs_0_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_rspBack$D_OUT[0] ;
  assign bus_1_ifcs_0_routeBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_0_rspBack
  assign bus_1_ifcs_0_rspBack$D_IN =
	     { boot_rom_axi4_deburster_inShim_rffD_OUT_BITS__ETC__q24[5:0],
	       boot_rom_axi4_deburster_inShim_rff$D_OUT[67:1] } ;
  assign bus_1_ifcs_0_rspBack$ENQ = bus_ssNoSynth_0_r_dwReady$whas ;
  assign bus_1_ifcs_0_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_1_burst ;
  assign bus_1_ifcs_0_rspBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_innerReq
  assign bus_1_ifcs_1_innerReq$D_IN =
	     { fatReq_arid__h77671,
	       corew$cpu_dmem_master_araddr,
	       corew$cpu_dmem_master_arlen,
	       corew$cpu_dmem_master_arsize,
	       corew$cpu_dmem_master_arburst,
	       corew$cpu_dmem_master_arlock,
	       corew$cpu_dmem_master_arcache,
	       corew$cpu_dmem_master_arprot,
	       corew$cpu_dmem_master_arqos,
	       corew$cpu_dmem_master_arregion } ;
  assign bus_1_ifcs_1_innerReq$ENQ =
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit ;
  assign bus_1_ifcs_1_innerReq$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_4 ;
  assign bus_1_ifcs_1_innerReq$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_innerRoute
  assign bus_1_ifcs_1_innerRoute$D_IN =
	     { _0_OR_NOT_corew_cpu_dmem_master_ar_araddr__133__ETC___d2180,
	       !corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2140 &&
	       corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2143 &&
	       (corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2134 ||
		!corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2137),
	       !corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2134 &&
	       corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2137 } ;
  assign bus_1_ifcs_1_innerRoute$ENQ = CAN_FIRE_RL_bus_1_ifcs_1_firstFlit ;
  assign bus_1_ifcs_1_innerRoute$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_4 ;
  assign bus_1_ifcs_1_innerRoute$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_noRouteRsp
  assign bus_1_ifcs_1_noRouteRsp$D_IN =
	     { bus_1_ifcs_1_noRoute_currentReq$port1__read[98:93],
	       66'h2AAAAAAAAAAAAAAAB,
	       x_port1__read__h78238 == 9'd1 } ;
  assign bus_1_ifcs_1_noRouteRsp$ENQ =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp ;
  assign bus_1_ifcs_1_noRouteRsp$DEQ =
	     CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse ;
  assign bus_1_ifcs_1_noRouteRsp$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_routeBack
  assign bus_1_ifcs_1_routeBack$D_IN =
	     2'd1 <<
	     mem0_controller_axi4_deburster_inShim_rffD_OU_ETC__q25[6] ;
  assign bus_1_ifcs_1_routeBack$ENQ = CAN_FIRE_RL_bus_1_ifcs_1_firstFlit_1 ;
  assign bus_1_ifcs_1_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_rspBack$D_OUT[0] ;
  assign bus_1_ifcs_1_routeBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_rspBack
  assign bus_1_ifcs_1_rspBack$D_IN =
	     { mem0_controller_axi4_deburster_inShim_rffD_OU_ETC__q25[5:0],
	       mem0_controller_axi4_deburster_inShim_rff$D_OUT[67:1] } ;
  assign bus_1_ifcs_1_rspBack$ENQ = bus_ssNoSynth_1_r_dwReady$whas ;
  assign bus_1_ifcs_1_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_1_burst_1 ;
  assign bus_1_ifcs_1_rspBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_2_routeBack
  assign bus_1_ifcs_2_routeBack$D_IN = 2'd1 << uart0$slave_rid[6] ;
  assign bus_1_ifcs_2_routeBack$ENQ = CAN_FIRE_RL_bus_1_ifcs_2_firstFlit ;
  assign bus_1_ifcs_2_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_rspBack$D_OUT[0] ;
  assign bus_1_ifcs_2_routeBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_2_rspBack
  assign bus_1_ifcs_2_rspBack$D_IN =
	     { uart0$slave_rid[5:0],
	       uart0$slave_rdata,
	       uart0$slave_rresp,
	       uart0$slave_rlast } ;
  assign bus_1_ifcs_2_rspBack$ENQ = bus_ssNoSynth_2_r_dwReady$whas ;
  assign bus_1_ifcs_2_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_1_burst_2 ;
  assign bus_1_ifcs_2_rspBack$CLR = 1'b0 ;

  // submodule bus_ifcs_0_innerReq
  assign bus_ifcs_0_innerReq$D_IN =
	     { bus_merged_0_flitLeft != 8'd0,
	       a_awid__h39710,
	       corew$cpu_imem_master_awaddr,
	       corew$cpu_imem_master_awlen,
	       corew$cpu_imem_master_awsize,
	       corew$cpu_imem_master_awburst,
	       corew$cpu_imem_master_awlock,
	       corew$cpu_imem_master_awcache,
	       corew$cpu_imem_master_awprot,
	       corew$cpu_imem_master_awqos,
	       corew$cpu_imem_master_awregion,
	       corew$cpu_imem_master_wdata,
	       corew$cpu_imem_master_wstrb,
	       corew$cpu_imem_master_wlast } ;
  assign bus_ifcs_0_innerReq$ENQ =
	     WILL_FIRE_RL_bus_ifcs_0_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit ;
  assign bus_ifcs_0_innerReq$DEQ =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_burst ;
  assign bus_ifcs_0_innerReq$CLR = 1'b0 ;

  // submodule bus_ifcs_0_innerRoute
  assign bus_ifcs_0_innerRoute$D_IN =
	     { _0_OR_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_ETC___d1416,
	       !IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1368 &&
	       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1372 &&
	       (IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1359 ||
		!IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1363),
	       !IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1359 &&
	       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1363 } ;
  assign bus_ifcs_0_innerRoute$ENQ = CAN_FIRE_RL_bus_ifcs_0_firstFlit ;
  assign bus_ifcs_0_innerRoute$DEQ =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerReq$D_OUT[0] ;
  assign bus_ifcs_0_innerRoute$CLR = 1'b0 ;

  // submodule bus_ifcs_0_noRouteRsp
  assign bus_ifcs_0_noRouteRsp$D_IN =
	     { bus_ifcs_0_noRoute_inner_currentReq$port1__read[98:93],
	       2'd3 } ;
  assign bus_ifcs_0_noRouteRsp$ENQ =
	     CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp ;
  assign bus_ifcs_0_noRouteRsp$DEQ =
	     CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse ;
  assign bus_ifcs_0_noRouteRsp$CLR = 1'b0 ;

  // submodule bus_ifcs_0_routeBack
  assign bus_ifcs_0_routeBack$D_IN =
	     2'd1 <<
	     boot_rom_axi4_deburster_inShim_bffD_OUT_BITS__ETC__q26[6] ;
  assign bus_ifcs_0_routeBack$ENQ = CAN_FIRE_RL_bus_ifcs_0_firstFlit_1 ;
  assign bus_ifcs_0_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst ;
  assign bus_ifcs_0_routeBack$CLR = 1'b0 ;

  // submodule bus_ifcs_0_rspBack
  assign bus_ifcs_0_rspBack$D_IN =
	     { boot_rom_axi4_deburster_inShim_bffD_OUT_BITS__ETC__q26[5:0],
	       boot_rom_axi4_deburster_inShim_bff$D_OUT[1:0] } ;
  assign bus_ifcs_0_rspBack$ENQ = bus_ssNoSynth_0_b_dwReady$whas ;
  assign bus_ifcs_0_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst ;
  assign bus_ifcs_0_rspBack$CLR = 1'b0 ;

  // submodule bus_ifcs_1_innerReq
  assign bus_ifcs_1_innerReq$D_IN =
	     { bus_merged_1_flitLeft != 8'd0,
	       a_awid__h43014,
	       corew$cpu_dmem_master_awaddr,
	       corew$cpu_dmem_master_awlen,
	       corew$cpu_dmem_master_awsize,
	       corew$cpu_dmem_master_awburst,
	       corew$cpu_dmem_master_awlock,
	       corew$cpu_dmem_master_awcache,
	       corew$cpu_dmem_master_awprot,
	       corew$cpu_dmem_master_awqos,
	       corew$cpu_dmem_master_awregion,
	       corew$cpu_dmem_master_wdata,
	       corew$cpu_dmem_master_wstrb,
	       corew$cpu_dmem_master_wlast } ;
  assign bus_ifcs_1_innerReq$ENQ =
	     WILL_FIRE_RL_bus_ifcs_1_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit ;
  assign bus_ifcs_1_innerReq$DEQ =
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_burst_1 ;
  assign bus_ifcs_1_innerReq$CLR = 1'b0 ;

  // submodule bus_ifcs_1_innerRoute
  assign bus_ifcs_1_innerRoute$D_IN =
	     { _0_OR_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_ETC___d1524,
	       !IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1480 &&
	       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1483 &&
	       (IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1474 ||
		!IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1477),
	       !IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1474 &&
	       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1477 } ;
  assign bus_ifcs_1_innerRoute$ENQ = CAN_FIRE_RL_bus_ifcs_1_firstFlit ;
  assign bus_ifcs_1_innerRoute$DEQ =
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_ifcs_1_innerReq$D_OUT[0] ;
  assign bus_ifcs_1_innerRoute$CLR = 1'b0 ;

  // submodule bus_ifcs_1_noRouteRsp
  assign bus_ifcs_1_noRouteRsp$D_IN =
	     { bus_ifcs_1_noRoute_inner_currentReq$port1__read[98:93],
	       2'd3 } ;
  assign bus_ifcs_1_noRouteRsp$ENQ =
	     CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp ;
  assign bus_ifcs_1_noRouteRsp$DEQ =
	     CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse ;
  assign bus_ifcs_1_noRouteRsp$CLR = 1'b0 ;

  // submodule bus_ifcs_1_routeBack
  assign bus_ifcs_1_routeBack$D_IN =
	     2'd1 <<
	     mem0_controller_axi4_deburster_inShim_bffD_OU_ETC__q27[6] ;
  assign bus_ifcs_1_routeBack$ENQ = CAN_FIRE_RL_bus_ifcs_1_firstFlit_1 ;
  assign bus_ifcs_1_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_1 ;
  assign bus_ifcs_1_routeBack$CLR = 1'b0 ;

  // submodule bus_ifcs_1_rspBack
  assign bus_ifcs_1_rspBack$D_IN =
	     { mem0_controller_axi4_deburster_inShim_bffD_OU_ETC__q27[5:0],
	       mem0_controller_axi4_deburster_inShim_bff$D_OUT[1:0] } ;
  assign bus_ifcs_1_rspBack$ENQ = bus_ssNoSynth_1_b_dwReady$whas ;
  assign bus_ifcs_1_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_1 ;
  assign bus_ifcs_1_rspBack$CLR = 1'b0 ;

  // submodule bus_ifcs_2_routeBack
  assign bus_ifcs_2_routeBack$D_IN = 2'd1 << uart0$slave_bid[6] ;
  assign bus_ifcs_2_routeBack$ENQ = CAN_FIRE_RL_bus_ifcs_2_firstFlit ;
  assign bus_ifcs_2_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_2 ;
  assign bus_ifcs_2_routeBack$CLR = 1'b0 ;

  // submodule bus_ifcs_2_rspBack
  assign bus_ifcs_2_rspBack$D_IN =
	     { uart0$slave_bid[5:0], uart0$slave_bresp } ;
  assign bus_ifcs_2_rspBack$ENQ = bus_ssNoSynth_2_b_dwReady$whas ;
  assign bus_ifcs_2_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_2 ;
  assign bus_ifcs_2_rspBack$CLR = 1'b0 ;

  // submodule bus_msNoSynth_0_b_buffer_ff
  assign bus_msNoSynth_0_b_buffer_ff$D_IN =
	     bus_msNoSynth_0_b_buffer_enqw$wget ;
  assign bus_msNoSynth_0_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue ;
  assign bus_msNoSynth_0_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue ;
  assign bus_msNoSynth_0_b_buffer_ff$CLR = 1'b0 ;

  // submodule bus_msNoSynth_0_b_buffer_firstValid
  assign bus_msNoSynth_0_b_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_msNoSynth_0_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit ;

  // submodule bus_msNoSynth_0_r_buffer_ff
  assign bus_msNoSynth_0_r_buffer_ff$D_IN =
	     bus_msNoSynth_0_r_buffer_enqw$wget ;
  assign bus_msNoSynth_0_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue ;
  assign bus_msNoSynth_0_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue ;
  assign bus_msNoSynth_0_r_buffer_ff$CLR = 1'b0 ;

  // submodule bus_msNoSynth_0_r_buffer_firstValid
  assign bus_msNoSynth_0_r_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_msNoSynth_0_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit ;

  // submodule bus_msNoSynth_1_b_buffer_ff
  assign bus_msNoSynth_1_b_buffer_ff$D_IN =
	     bus_msNoSynth_1_b_buffer_enqw$wget ;
  assign bus_msNoSynth_1_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue ;
  assign bus_msNoSynth_1_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue ;
  assign bus_msNoSynth_1_b_buffer_ff$CLR = 1'b0 ;

  // submodule bus_msNoSynth_1_b_buffer_firstValid
  assign bus_msNoSynth_1_b_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_msNoSynth_1_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit ;

  // submodule bus_msNoSynth_1_r_buffer_ff
  assign bus_msNoSynth_1_r_buffer_ff$D_IN =
	     bus_msNoSynth_1_r_buffer_enqw$wget ;
  assign bus_msNoSynth_1_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue ;
  assign bus_msNoSynth_1_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue ;
  assign bus_msNoSynth_1_r_buffer_ff$CLR = 1'b0 ;

  // submodule bus_msNoSynth_1_r_buffer_firstValid
  assign bus_msNoSynth_1_r_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_msNoSynth_1_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit ;

  // submodule bus_ssNoSynth_0_ar_buffer_ff
  assign bus_ssNoSynth_0_ar_buffer_ff$D_IN =
	     bus_ssNoSynth_0_ar_buffer_enqw$wget ;
  assign bus_ssNoSynth_0_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue ;
  assign bus_ssNoSynth_0_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue ;
  assign bus_ssNoSynth_0_ar_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_0_ar_buffer_firstValid
  assign bus_ssNoSynth_0_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_0_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit ;

  // submodule bus_ssNoSynth_0_aw_buffer_ff
  assign bus_ssNoSynth_0_aw_buffer_ff$D_IN = bus_split_0_doPut$wget[172:73] ;
  assign bus_ssNoSynth_0_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue ;
  assign bus_ssNoSynth_0_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue ;
  assign bus_ssNoSynth_0_aw_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_0_aw_buffer_firstValid
  assign bus_ssNoSynth_0_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_0_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit ;

  // submodule bus_ssNoSynth_0_w_buffer_ff
  assign bus_ssNoSynth_0_w_buffer_ff$D_IN = bus_split_0_doPut$wget[72:0] ;
  assign bus_ssNoSynth_0_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue ;
  assign bus_ssNoSynth_0_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue ;
  assign bus_ssNoSynth_0_w_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_0_w_buffer_firstValid
  assign bus_ssNoSynth_0_w_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_0_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit ;

  // submodule bus_ssNoSynth_1_ar_buffer_ff
  assign bus_ssNoSynth_1_ar_buffer_ff$D_IN =
	     bus_ssNoSynth_1_ar_buffer_enqw$wget ;
  assign bus_ssNoSynth_1_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue ;
  assign bus_ssNoSynth_1_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue ;
  assign bus_ssNoSynth_1_ar_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_1_ar_buffer_firstValid
  assign bus_ssNoSynth_1_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_1_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit ;

  // submodule bus_ssNoSynth_1_aw_buffer_ff
  assign bus_ssNoSynth_1_aw_buffer_ff$D_IN = bus_split_1_doPut$wget[172:73] ;
  assign bus_ssNoSynth_1_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue ;
  assign bus_ssNoSynth_1_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue ;
  assign bus_ssNoSynth_1_aw_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_1_aw_buffer_firstValid
  assign bus_ssNoSynth_1_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_1_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit ;

  // submodule bus_ssNoSynth_1_w_buffer_ff
  assign bus_ssNoSynth_1_w_buffer_ff$D_IN = bus_split_1_doPut$wget[72:0] ;
  assign bus_ssNoSynth_1_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue ;
  assign bus_ssNoSynth_1_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue ;
  assign bus_ssNoSynth_1_w_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_1_w_buffer_firstValid
  assign bus_ssNoSynth_1_w_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_1_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit ;

  // submodule bus_ssNoSynth_2_ar_buffer_ff
  assign bus_ssNoSynth_2_ar_buffer_ff$D_IN =
	     bus_ssNoSynth_2_ar_buffer_enqw$wget ;
  assign bus_ssNoSynth_2_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue ;
  assign bus_ssNoSynth_2_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue ;
  assign bus_ssNoSynth_2_ar_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_2_ar_buffer_firstValid
  assign bus_ssNoSynth_2_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_2_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit ;

  // submodule bus_ssNoSynth_2_aw_buffer_ff
  assign bus_ssNoSynth_2_aw_buffer_ff$D_IN = bus_split_2_doPut$wget[172:73] ;
  assign bus_ssNoSynth_2_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue ;
  assign bus_ssNoSynth_2_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue ;
  assign bus_ssNoSynth_2_aw_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_2_aw_buffer_firstValid
  assign bus_ssNoSynth_2_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_2_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit ;

  // submodule bus_ssNoSynth_2_w_buffer_ff
  assign bus_ssNoSynth_2_w_buffer_ff$D_IN = bus_split_2_doPut$wget[72:0] ;
  assign bus_ssNoSynth_2_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue ;
  assign bus_ssNoSynth_2_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue ;
  assign bus_ssNoSynth_2_w_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_2_w_buffer_firstValid
  assign bus_ssNoSynth_2_w_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_2_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit ;

  // submodule corew
  assign corew$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear =
	     uart0$intr ;
  assign corew$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign corew$cpu_dmem_master_arready = bus_msNoSynth_1_ar_dwReady$whas ;
  assign corew$cpu_dmem_master_awready = CAN_FIRE_RL_bus_merged_1_genFirst ;
  assign corew$cpu_dmem_master_bid =
	     bus_msNoSynth_1_b_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_b_buffer_ff$D_OUT[7:2] :
	       bus_msNoSynth_1_b_buffer_enqw$wget[7:2] ;
  assign corew$cpu_dmem_master_bresp =
	     bus_msNoSynth_1_b_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_b_buffer_ff$D_OUT[1:0] :
	       bus_msNoSynth_1_b_buffer_enqw$wget[1:0] ;
  assign corew$cpu_dmem_master_rdata =
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_r_buffer_ff$D_OUT[66:3] :
	       bus_msNoSynth_1_r_buffer_enqw$wget[66:3] ;
  assign corew$cpu_dmem_master_rid =
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_r_buffer_ff$D_OUT[72:67] :
	       bus_msNoSynth_1_r_buffer_enqw$wget[72:67] ;
  assign corew$cpu_dmem_master_rlast =
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_r_buffer_ff$D_OUT[0] :
	       bus_msNoSynth_1_r_buffer_enqw$wget[0] ;
  assign corew$cpu_dmem_master_rresp =
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_r_buffer_ff$D_OUT[2:1] :
	       bus_msNoSynth_1_r_buffer_enqw$wget[2:1] ;
  assign corew$cpu_dmem_master_wready = bus_msNoSynth_1_w_dwReady$whas ;
  assign corew$cpu_imem_master_arready = bus_msNoSynth_0_ar_dwReady$whas ;
  assign corew$cpu_imem_master_awready = CAN_FIRE_RL_bus_merged_0_genFirst ;
  assign corew$cpu_imem_master_bid =
	     bus_msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_b_buffer_ff$D_OUT[7:2] :
	       bus_msNoSynth_0_b_buffer_enqw$wget[7:2] ;
  assign corew$cpu_imem_master_bresp =
	     bus_msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_b_buffer_ff$D_OUT[1:0] :
	       bus_msNoSynth_0_b_buffer_enqw$wget[1:0] ;
  assign corew$cpu_imem_master_rdata =
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_r_buffer_ff$D_OUT[66:3] :
	       bus_msNoSynth_0_r_buffer_enqw$wget[66:3] ;
  assign corew$cpu_imem_master_rid =
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_r_buffer_ff$D_OUT[72:67] :
	       bus_msNoSynth_0_r_buffer_enqw$wget[72:67] ;
  assign corew$cpu_imem_master_rlast =
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_r_buffer_ff$D_OUT[0] :
	       bus_msNoSynth_0_r_buffer_enqw$wget[0] ;
  assign corew$cpu_imem_master_rresp =
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_r_buffer_ff$D_OUT[2:1] :
	       bus_msNoSynth_0_r_buffer_enqw$wget[2:1] ;
  assign corew$cpu_imem_master_wready = bus_msNoSynth_0_w_dwReady$whas ;
  assign corew$nmi_req_set_not_clear = 1'd0 ;
  assign corew$set_verbosity_logdelay = set_verbosity_logdelay ;
  assign corew$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign corew$start_fromhost_addr = start_fromhost_addr ;
  assign corew$start_tohost_addr = start_tohost_addr ;
  assign corew$EN_set_verbosity = EN_set_verbosity ;
  assign corew$EN_start = EN_start ;
  assign corew$cpu_imem_master_bvalid =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_forwardFlit ;
  assign corew$cpu_imem_master_rvalid =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_forwardFlit ;
  assign corew$cpu_dmem_master_bvalid =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_forwardFlit ;
  assign corew$cpu_dmem_master_rvalid =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_forwardFlit ;

  // submodule mem0_controller
  assign mem0_controller$set_addr_map_addr_base =
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign mem0_controller$set_addr_map_addr_lim =
	     soc_map$m_mem0_controller_addr_range[127:64] +
	     soc_map$m_mem0_controller_addr_range[63:0] ;
  assign mem0_controller$set_watch_tohost_tohost_addr = start_tohost_addr ;
  assign mem0_controller$set_watch_tohost_watch_tohost =
	     start_tohost_addr != 64'd0 ;
  assign mem0_controller$slave_araddr =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[92:29] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[92:29] ;
  assign mem0_controller$slave_arburst =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[17:16] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[17:16] ;
  assign mem0_controller$slave_arcache =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[14:11] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[14:11] ;
  assign mem0_controller$slave_arid =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[99:93] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[99:93] ;
  assign mem0_controller$slave_arlen =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[28:21] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[28:21] ;
  assign mem0_controller$slave_arlock =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[15] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[15] ;
  assign mem0_controller$slave_arprot =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[10:8] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[10:8] ;
  assign mem0_controller$slave_arqos =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[7:4] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[7:4] ;
  assign mem0_controller$slave_arregion =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[3:0] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[3:0] ;
  assign mem0_controller$slave_arsize =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[20:18] :
	       mem0_controller_axi4_deburster_outShim_arff$D_OUT[20:18] ;
  assign mem0_controller$slave_awaddr =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[92:29] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[92:29] ;
  assign mem0_controller$slave_awburst =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[17:16] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[17:16] ;
  assign mem0_controller$slave_awcache =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[14:11] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[14:11] ;
  assign mem0_controller$slave_awid =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[99:93] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[99:93] ;
  assign mem0_controller$slave_awlen =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[28:21] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[28:21] ;
  assign mem0_controller$slave_awlock =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[15] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[15] ;
  assign mem0_controller$slave_awprot =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[10:8] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[10:8] ;
  assign mem0_controller$slave_awqos =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[7:4] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[7:4] ;
  assign mem0_controller$slave_awregion =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[3:0] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[3:0] ;
  assign mem0_controller$slave_awsize =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[20:18] :
	       mem0_controller_axi4_deburster_outShim_awff$D_OUT[20:18] ;
  assign mem0_controller$slave_bready = CAN_FIRE_RL_mkConnectionGetPut_7 ;
  assign mem0_controller$slave_rready = CAN_FIRE_RL_mkConnectionGetPut_9 ;
  assign mem0_controller$slave_wdata =
	     mem_w_buffer_ff$EMPTY_N ?
	       mem_w_buffer_ff$D_OUT[73:10] :
	       mem0_controller_axi4_deburster_outShim_wff$D_OUT[73:10] ;
  assign mem0_controller$slave_wlast =
	     mem_w_buffer_ff$EMPTY_N ?
	       mem_w_buffer_ff$D_OUT[1] :
	       mem0_controller_axi4_deburster_outShim_wff$D_OUT[1] ;
  assign mem0_controller$slave_wstrb =
	     mem_w_buffer_ff$EMPTY_N ?
	       mem_w_buffer_ff$D_OUT[9:2] :
	       mem0_controller_axi4_deburster_outShim_wff$D_OUT[9:2] ;
  assign mem0_controller$slave_wuser =
	     mem_w_buffer_ff$EMPTY_N ?
	       mem_w_buffer_ff$D_OUT[0] :
	       mem0_controller_axi4_deburster_outShim_wff$D_OUT[0] ;
  assign mem0_controller$to_raw_mem_response_put = to_raw_mem_response_put ;
  assign mem0_controller$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start_initial ;
  assign mem0_controller$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete_initial ;
  assign mem0_controller$EN_set_addr_map =
	     CAN_FIRE_RL_rl_reset_complete_initial ;
  assign mem0_controller$slave_awvalid = CAN_FIRE_RL_mem_aw_forwardFlit ;
  assign mem0_controller$slave_wvalid = CAN_FIRE_RL_mem_w_forwardFlit ;
  assign mem0_controller$slave_arvalid = CAN_FIRE_RL_mem_ar_forwardFlit ;
  assign mem0_controller$EN_to_raw_mem_request_get =
	     EN_to_raw_mem_request_get ;
  assign mem0_controller$EN_to_raw_mem_response_put =
	     EN_to_raw_mem_response_put ;
  assign mem0_controller$EN_set_watch_tohost = EN_start ;

  // submodule mem0_controller_axi4_deburster_countWriteRspFF
  assign mem0_controller_axi4_deburster_countWriteRspFF$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[1] ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp &&
	     mem0_controller_axi4_deburster_countWriteRspFF_ETC___d238 ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_inShim_arff
  assign mem0_controller_axi4_deburster_inShim_arff$D_IN =
	     ug_mem0_slave_u_ar_putWire$wget ;
  assign mem0_controller_axi4_deburster_inShim_arff$ENQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_ar_doPut ;
  assign mem0_controller_axi4_deburster_inShim_arff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;
  assign mem0_controller_axi4_deburster_inShim_arff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_inShim_awff
  assign mem0_controller_axi4_deburster_inShim_awff$D_IN =
	     ug_mem0_slave_u_aw_putWire$wget ;
  assign mem0_controller_axi4_deburster_inShim_awff$ENQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_aw_doPut ;
  assign mem0_controller_axi4_deburster_inShim_awff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;
  assign mem0_controller_axi4_deburster_inShim_awff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_inShim_bff
  assign mem0_controller_axi4_deburster_inShim_bff$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read[8:0] ;
  assign mem0_controller_axi4_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;
  assign mem0_controller_axi4_deburster_inShim_bff$DEQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_b_doDrop ;
  assign mem0_controller_axi4_deburster_inShim_bff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_inShim_rff
  assign mem0_controller_axi4_deburster_inShim_rff$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[74:0] ;
  assign mem0_controller_axi4_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ;
  assign mem0_controller_axi4_deburster_inShim_rff$DEQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_r_doDrop ;
  assign mem0_controller_axi4_deburster_inShim_rff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_inShim_wff
  assign mem0_controller_axi4_deburster_inShim_wff$D_IN =
	     ug_mem0_slave_u_w_putWire$wget ;
  assign mem0_controller_axi4_deburster_inShim_wff$ENQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_w_doPut ;
  assign mem0_controller_axi4_deburster_inShim_wff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ;
  assign mem0_controller_axi4_deburster_inShim_wff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_lastReadRspFF
  assign mem0_controller_axi4_deburster_lastReadRspFF$D_IN =
	     mem0_controller_axi4_deburster_readsSent_60_EQ_ETC___d271 ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_outShim_arff
  assign mem0_controller_axi4_deburster_outShim_arff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[99:93],
	       x_araddr__h13003,
	       8'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign mem0_controller_axi4_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;
  assign mem0_controller_axi4_deburster_outShim_arff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_8 ;
  assign mem0_controller_axi4_deburster_outShim_arff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_outShim_awff
  assign mem0_controller_axi4_deburster_outShim_awff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[99:93],
	       x_awaddr__h12304,
	       8'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign mem0_controller_axi4_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;
  assign mem0_controller_axi4_deburster_outShim_awff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign mem0_controller_axi4_deburster_outShim_awff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_outShim_bff
  assign mem0_controller_axi4_deburster_outShim_bff$D_IN =
	     { mem0_controller$slave_bid, mem0_controller$slave_bresp } ;
  assign mem0_controller_axi4_deburster_outShim_bff$ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_7 ;
  assign mem0_controller_axi4_deburster_outShim_bff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp ;
  assign mem0_controller_axi4_deburster_outShim_bff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_outShim_rff
  assign mem0_controller_axi4_deburster_outShim_rff$D_IN =
	     { mem0_controller$slave_rid,
	       mem0_controller$slave_rdata,
	       mem0_controller$slave_rresp,
	       mem0_controller$slave_rlast,
	       mem0_controller$slave_ruser } ;
  assign mem0_controller_axi4_deburster_outShim_rff$ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_9 ;
  assign mem0_controller_axi4_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;
  assign mem0_controller_axi4_deburster_outShim_rff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem0_controller_axi4_deburster_outShim_wff
  assign mem0_controller_axi4_deburster_outShim_wff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[73:2],
	       1'd1,
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] } ;
  assign mem0_controller_axi4_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;
  assign mem0_controller_axi4_deburster_outShim_wff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_6 ;
  assign mem0_controller_axi4_deburster_outShim_wff$CLR =
	     CAN_FIRE_RL_rl_reset_start_initial ;

  // submodule mem_ar_buffer_ff
  assign mem_ar_buffer_ff$D_IN =
	     mem0_controller_axi4_deburster_outShim_arff$D_OUT ;
  assign mem_ar_buffer_ff$ENQ = CAN_FIRE_RL_mem_ar_buffer_enqueue ;
  assign mem_ar_buffer_ff$DEQ = CAN_FIRE_RL_mem_ar_buffer_dequeue ;
  assign mem_ar_buffer_ff$CLR = 1'b0 ;

  // submodule mem_ar_buffer_firstValid
  assign mem_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign mem_ar_buffer_firstValid$EN = CAN_FIRE_RL_mem_ar_dropFlit ;

  // submodule mem_aw_buffer_ff
  assign mem_aw_buffer_ff$D_IN =
	     mem0_controller_axi4_deburster_outShim_awff$D_OUT ;
  assign mem_aw_buffer_ff$ENQ = CAN_FIRE_RL_mem_aw_buffer_enqueue ;
  assign mem_aw_buffer_ff$DEQ = CAN_FIRE_RL_mem_aw_buffer_dequeue ;
  assign mem_aw_buffer_ff$CLR = 1'b0 ;

  // submodule mem_aw_buffer_firstValid
  assign mem_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign mem_aw_buffer_firstValid$EN = CAN_FIRE_RL_mem_aw_dropFlit ;

  // submodule mem_w_buffer_ff
  assign mem_w_buffer_ff$D_IN =
	     mem0_controller_axi4_deburster_outShim_wff$D_OUT ;
  assign mem_w_buffer_ff$ENQ = CAN_FIRE_RL_mem_w_buffer_enqueue ;
  assign mem_w_buffer_ff$DEQ = CAN_FIRE_RL_mem_w_buffer_dequeue ;
  assign mem_w_buffer_ff$CLR = 1'b0 ;

  // submodule mem_w_buffer_firstValid
  assign mem_w_buffer_firstValid$D_IN = 1'd1 ;
  assign mem_w_buffer_firstValid$EN = CAN_FIRE_RL_mem_w_dropFlit ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule uart0
  assign uart0$put_from_console_put = put_from_console_put ;
  assign uart0$set_addr_map_addr_base = soc_map$m_uart0_addr_range[127:64] ;
  assign uart0$set_addr_map_addr_lim =
	     soc_map$m_uart0_addr_range[127:64] +
	     soc_map$m_uart0_addr_range[63:0] ;
  assign uart0$slave_araddr =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[92:29] :
	       uart0_slave_ar_buffer_enqw$wget[92:29] ;
  assign uart0$slave_arburst =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[17:16] :
	       uart0_slave_ar_buffer_enqw$wget[17:16] ;
  assign uart0$slave_arcache =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[14:11] :
	       uart0_slave_ar_buffer_enqw$wget[14:11] ;
  assign uart0$slave_arid =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[99:93] :
	       uart0_slave_ar_buffer_enqw$wget[99:93] ;
  assign uart0$slave_arlen =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[28:21] :
	       uart0_slave_ar_buffer_enqw$wget[28:21] ;
  assign uart0$slave_arlock =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[15] :
	       uart0_slave_ar_buffer_enqw$wget[15] ;
  assign uart0$slave_arprot =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[10:8] :
	       uart0_slave_ar_buffer_enqw$wget[10:8] ;
  assign uart0$slave_arqos =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[7:4] :
	       uart0_slave_ar_buffer_enqw$wget[7:4] ;
  assign uart0$slave_arregion =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[3:0] :
	       uart0_slave_ar_buffer_enqw$wget[3:0] ;
  assign uart0$slave_arsize =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[20:18] :
	       uart0_slave_ar_buffer_enqw$wget[20:18] ;
  assign uart0$slave_awaddr =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[92:29] :
	       uart0_slave_aw_buffer_enqw$wget[92:29] ;
  assign uart0$slave_awburst =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[17:16] :
	       uart0_slave_aw_buffer_enqw$wget[17:16] ;
  assign uart0$slave_awcache =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[14:11] :
	       uart0_slave_aw_buffer_enqw$wget[14:11] ;
  assign uart0$slave_awid =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[99:93] :
	       uart0_slave_aw_buffer_enqw$wget[99:93] ;
  assign uart0$slave_awlen =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[28:21] :
	       uart0_slave_aw_buffer_enqw$wget[28:21] ;
  assign uart0$slave_awlock =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[15] :
	       uart0_slave_aw_buffer_enqw$wget[15] ;
  assign uart0$slave_awprot =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[10:8] :
	       uart0_slave_aw_buffer_enqw$wget[10:8] ;
  assign uart0$slave_awqos =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[7:4] :
	       uart0_slave_aw_buffer_enqw$wget[7:4] ;
  assign uart0$slave_awregion =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[3:0] :
	       uart0_slave_aw_buffer_enqw$wget[3:0] ;
  assign uart0$slave_awsize =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[20:18] :
	       uart0_slave_aw_buffer_enqw$wget[20:18] ;
  assign uart0$slave_bready = uart0_slave_b_dwReady$whas ;
  assign uart0$slave_rready = uart0_slave_r_dwReady$whas ;
  assign uart0$slave_wdata =
	     uart0_slave_w_buffer_ff$EMPTY_N ?
	       uart0_slave_w_buffer_ff$D_OUT[73:10] :
	       uart0_slave_w_buffer_enqw$wget[73:10] ;
  assign uart0$slave_wlast =
	     uart0_slave_w_buffer_ff$EMPTY_N ?
	       uart0_slave_w_buffer_ff$D_OUT[1] :
	       uart0_slave_w_buffer_enqw$wget[1] ;
  assign uart0$slave_wstrb =
	     uart0_slave_w_buffer_ff$EMPTY_N ?
	       uart0_slave_w_buffer_ff$D_OUT[9:2] :
	       uart0_slave_w_buffer_enqw$wget[9:2] ;
  assign uart0$slave_wuser =
	     uart0_slave_w_buffer_ff$EMPTY_N ?
	       uart0_slave_w_buffer_ff$D_OUT[0] :
	       uart0_slave_w_buffer_enqw$wget[0] ;
  assign uart0$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start_initial ;
  assign uart0$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete_initial ;
  assign uart0$EN_set_addr_map = CAN_FIRE_RL_rl_reset_complete_initial ;
  assign uart0$slave_awvalid = CAN_FIRE_RL_uart0_slave_aw_forwardFlit ;
  assign uart0$slave_wvalid = CAN_FIRE_RL_uart0_slave_w_forwardFlit ;
  assign uart0$slave_arvalid = CAN_FIRE_RL_uart0_slave_ar_forwardFlit ;
  assign uart0$EN_get_to_console_get = EN_get_to_console_get ;
  assign uart0$EN_put_from_console_put = EN_put_from_console_put ;

  // submodule uart0_slave_ar_buffer_ff
  assign uart0_slave_ar_buffer_ff$D_IN = uart0_slave_ar_buffer_enqw$wget ;
  assign uart0_slave_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_uart0_slave_ar_buffer_enqueue ;
  assign uart0_slave_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_uart0_slave_ar_buffer_dequeue ;
  assign uart0_slave_ar_buffer_ff$CLR = 1'b0 ;

  // submodule uart0_slave_ar_buffer_firstValid
  assign uart0_slave_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign uart0_slave_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_uart0_slave_ar_dropFlit ;

  // submodule uart0_slave_aw_buffer_ff
  assign uart0_slave_aw_buffer_ff$D_IN = uart0_slave_aw_buffer_enqw$wget ;
  assign uart0_slave_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_uart0_slave_aw_buffer_enqueue ;
  assign uart0_slave_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_uart0_slave_aw_buffer_dequeue ;
  assign uart0_slave_aw_buffer_ff$CLR = 1'b0 ;

  // submodule uart0_slave_aw_buffer_firstValid
  assign uart0_slave_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign uart0_slave_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_uart0_slave_aw_dropFlit ;

  // submodule uart0_slave_w_buffer_ff
  assign uart0_slave_w_buffer_ff$D_IN = uart0_slave_w_buffer_enqw$wget ;
  assign uart0_slave_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_uart0_slave_w_buffer_enqueue ;
  assign uart0_slave_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_uart0_slave_w_buffer_dequeue ;
  assign uart0_slave_w_buffer_ff$CLR = 1'b0 ;

  // submodule uart0_slave_w_buffer_firstValid
  assign uart0_slave_w_buffer_firstValid$D_IN = 1'd1 ;
  assign uart0_slave_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_uart0_slave_w_dropFlit ;

  // remaining internal signals
  assign IF_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_T_ETC___d1377 =
	     (!IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1368 &&
	      IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1372 &&
	      (IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1359 ||
	       !IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1363)) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_T_ETC___d1378 =
	     ((!IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1359 &&
	       IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1363) ?
		2'd1 :
		2'd0) +
	     IF_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_T_ETC___d1377 ;
  assign IF_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_T_ETC___d1488 =
	     (!IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1480 &&
	      IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1483 &&
	      (IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1474 ||
	       !IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1477)) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_T_ETC___d1489 =
	     ((!IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1474 &&
	       IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1477) ?
		2'd1 :
		2'd0) +
	     IF_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_T_ETC___d1488 ;
  assign IF_NOT_bus_1_ifcs_0_innerRoute_first__296_BIT__ETC___d2318 =
	     (!bus_1_ifcs_0_innerRoute$D_OUT[1] ||
	      !bus_ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       bus_1_ifcs_0_innerRoute$D_OUT[2] &&
	       bus_ssNoSynth_2_ar_buffer_ff$FULL_N :
	       bus_1_ifcs_0_innerRoute$D_OUT[1] ;
  assign IF_NOT_bus_1_ifcs_1_innerRoute_first__325_BIT__ETC___d2334 =
	     (!bus_1_ifcs_1_innerRoute$D_OUT[1] ||
	      !bus_ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       bus_1_ifcs_1_innerRoute$D_OUT[2] &&
	       bus_ssNoSynth_2_ar_buffer_ff$FULL_N :
	       bus_1_ifcs_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_bus_ifcs_0_innerRoute_first__626_BIT_1__ETC___d1648 =
	     (!bus_ifcs_0_innerRoute$D_OUT[1] ||
	      !IF_bus_split_1_flitLeft_290_EQ_0_291_THEN_bus__ETC___d1619) ?
	       bus_ifcs_0_innerRoute$D_OUT[2] &&
	       IF_bus_split_2_flitLeft_319_EQ_0_320_THEN_bus__ETC___d1620 :
	       bus_ifcs_0_innerRoute$D_OUT[1] ;
  assign IF_NOT_bus_ifcs_1_innerRoute_first__655_BIT_1__ETC___d1664 =
	     (!bus_ifcs_1_innerRoute$D_OUT[1] ||
	      !IF_bus_split_1_flitLeft_290_EQ_0_291_THEN_bus__ETC___d1619) ?
	       bus_ifcs_1_innerRoute$D_OUT[2] &&
	       IF_bus_split_2_flitLeft_319_EQ_0_320_THEN_bus__ETC___d1620 :
	       bus_ifcs_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_corew_cpu_dmem_master_ar_araddr__133_UL_ETC___d2148 =
	     (!corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2140 &&
	      corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2143 &&
	      (corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2134 ||
	       !corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2137)) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_corew_cpu_dmem_master_ar_araddr__133_UL_ETC___d2149 =
	     ((!corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2134 &&
	       corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2137) ?
		2'd1 :
		2'd0) +
	     IF_NOT_corew_cpu_dmem_master_ar_araddr__133_UL_ETC___d2148 ;
  assign IF_NOT_corew_cpu_imem_master_ar_araddr__036_UL_ETC___d2051 =
	     (!corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2043 &&
	      corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2046 &&
	      (corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2037 ||
	       !corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2040)) ?
	       2'd1 :
	       2'd0 ;
  assign IF_NOT_corew_cpu_imem_master_ar_araddr__036_UL_ETC___d2052 =
	     ((!corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2037 &&
	       corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2040) ?
		2'd1 :
		2'd0) +
	     IF_NOT_corew_cpu_imem_master_ar_araddr__036_UL_ETC___d2051 ;
  assign IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2570 =
	     (SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_0__ETC___d2539 ||
	      SEXT_bus_1_1_arbiter_lastSelect_1_530_531_BIT__ETC___d2545 ||
	      SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551) ?
	       x__h97814 | y__h97815 :
	       bus_1_1_arbiter_lastSelect ;
  assign IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2576 =
	     (SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_0__ETC___d2539 ||
	      SEXT_bus_1_1_arbiter_lastSelect_1_530_531_BIT__ETC___d2545 ||
	      SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551) ?
	       x__h98002 | y__h98003 :
	       bus_1_1_arbiter_lastSelect_1 ;
  assign IF_SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_ETC___d2582 =
	     (SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_0__ETC___d2539 ||
	      SEXT_bus_1_1_arbiter_lastSelect_1_530_531_BIT__ETC___d2545 ||
	      SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551) ?
	       x__h98183 | y__h98184 :
	       bus_1_1_arbiter_firstHot ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_ETC___d2370 =
	     (SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_0__ETC___d2354 ||
	      SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_0_35_ETC___d2358) ?
	       x__h85872 | y__h85873 :
	       bus_1_arbiter_lastSelect_2 ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_ETC___d2374 =
	     (SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_0__ETC___d2354 ||
	      SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_0_35_ETC___d2358) ?
	       x__h86013 | y__h86014 :
	       bus_1_arbiter_firstHot_1 ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1910 =
	     (SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_86_ETC___d1879 ||
	      SEXT_bus_1_arbiter_lastSelect_1_870_871_BIT_0__ETC___d1885 ||
	      SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891) ?
	       x__h65285 | y__h65286 :
	       bus_1_arbiter_lastSelect ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1916 =
	     (SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_86_ETC___d1879 ||
	      SEXT_bus_1_arbiter_lastSelect_1_870_871_BIT_0__ETC___d1885 ||
	      SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891) ?
	       x__h65473 | y__h65474 :
	       bus_1_arbiter_lastSelect_1 ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_ETC___d1922 =
	     (SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_86_ETC___d1879 ||
	      SEXT_bus_1_arbiter_lastSelect_1_870_871_BIT_0__ETC___d1885 ||
	      SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891) ?
	       x__h65654 | y__h65655 :
	       bus_1_arbiter_firstHot ;
  assign IF_SEXT_bus_arbiter_lastSelect_676_677_BIT_0_6_ETC___d1700 =
	     (SEXT_bus_arbiter_lastSelect_676_677_BIT_0_678__ETC___d1684 ||
	      SEXT_bus_arbiter_firstHot_680_681_BIT_0_682_AN_ETC___d1688) ?
	       x__h50802 | y__h50803 :
	       bus_arbiter_lastSelect ;
  assign IF_SEXT_bus_arbiter_lastSelect_676_677_BIT_0_6_ETC___d1704 =
	     (SEXT_bus_arbiter_lastSelect_676_677_BIT_0_678__ETC___d1684 ||
	      SEXT_bus_arbiter_firstHot_680_681_BIT_0_682_AN_ETC___d1688) ?
	       x__h50943 | y__h50944 :
	       bus_arbiter_firstHot ;
  assign IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_NOT_ETC___d1347 =
	     ((bus_merged_0_flitLeft == 8'd0) ?
		!corew$cpu_imem_master_awvalid ||
		!corew$cpu_imem_master_wvalid :
		!corew$cpu_imem_master_wvalid) ||
	     bus_merged_0_flitLeft != 8'd0 ;
  assign IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_NOT_ETC___d1429 =
	     (IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_NOT_ETC___d1347 ||
	      corew$cpu_imem_master_awvalid) &&
	     (bus_merged_0_flitLeft != 8'd0 ||
	      !bus_ifcs_0_noRoute_inner_pendingReq &&
	      corew$cpu_imem_master_awvalid) ;
  assign IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1340 =
	     (bus_merged_0_flitLeft == 8'd0) ?
	       corew$cpu_imem_master_awvalid && corew$cpu_imem_master_wvalid :
	       corew$cpu_imem_master_wvalid ;
  assign IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1359 =
	     corew$cpu_imem_master_awaddr <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1363 =
	     x__h38286 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1368 =
	     corew$cpu_imem_master_awaddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1372 =
	     x__h38359 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_NOT_ETC___d1464 =
	     ((bus_merged_1_flitLeft == 8'd0) ?
		!corew$cpu_dmem_master_awvalid ||
		!corew$cpu_dmem_master_wvalid :
		!corew$cpu_dmem_master_wvalid) ||
	     bus_merged_1_flitLeft != 8'd0 ;
  assign IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_NOT_ETC___d1537 =
	     (IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_NOT_ETC___d1464 ||
	      corew$cpu_dmem_master_awvalid) &&
	     (bus_merged_1_flitLeft != 8'd0 ||
	      !bus_ifcs_1_noRoute_inner_pendingReq &&
	      corew$cpu_dmem_master_awvalid) ;
  assign IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1457 =
	     (bus_merged_1_flitLeft == 8'd0) ?
	       corew$cpu_dmem_master_awvalid && corew$cpu_dmem_master_wvalid :
	       corew$cpu_dmem_master_wvalid ;
  assign IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1474 =
	     corew$cpu_dmem_master_awaddr <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1477 =
	     x__h41654 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1480 =
	     corew$cpu_dmem_master_awaddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1483 =
	     x__h41717 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign IF_bus_split_0_flitLeft_261_EQ_0_262_THEN_bus__ETC___d1618 =
	     (bus_split_0_flitLeft == 8'd0) ?
	       bus_ssNoSynth_0_aw_buffer_ff$FULL_N &&
	       bus_ssNoSynth_0_w_buffer_ff$FULL_N :
	       bus_ssNoSynth_0_w_buffer_ff$FULL_N ;
  assign IF_bus_split_1_flitLeft_290_EQ_0_291_THEN_bus__ETC___d1619 =
	     (bus_split_1_flitLeft == 8'd0) ?
	       bus_ssNoSynth_1_aw_buffer_ff$FULL_N &&
	       bus_ssNoSynth_1_w_buffer_ff$FULL_N :
	       bus_ssNoSynth_1_w_buffer_ff$FULL_N ;
  assign IF_bus_split_2_flitLeft_319_EQ_0_320_THEN_bus__ETC___d1620 =
	     (bus_split_2_flitLeft == 8'd0) ?
	       bus_ssNoSynth_2_aw_buffer_ff$FULL_N &&
	       bus_ssNoSynth_2_w_buffer_ff$FULL_N :
	       bus_ssNoSynth_2_w_buffer_ff$FULL_N ;
  assign NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_ETC___d1390 =
	     corew$cpu_imem_master_awaddr >=
	     soc_map$m_uart0_addr_range[127:64] &&
	     x__h38440 < soc_map$m_uart0_addr_range[63:0] &&
	     (IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1359 ||
	      !IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1363) &&
	     (IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1368 ||
	      !IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1372) ;
  assign NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_ETC___d1498 =
	     corew$cpu_dmem_master_awaddr >=
	     soc_map$m_uart0_addr_range[127:64] &&
	     x__h41788 < soc_map$m_uart0_addr_range[63:0] &&
	     (IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1474 ||
	      !IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1477) &&
	     (IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1480 ||
	      !IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1483) ;
  assign NOT_corew_cpu_dmem_master_ar_araddr__133_ULT_s_ETC___d2158 =
	     corew$cpu_dmem_master_araddr >=
	     soc_map$m_uart0_addr_range[127:64] &&
	     x__h77024 < soc_map$m_uart0_addr_range[63:0] &&
	     (corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2134 ||
	      !corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2137) &&
	     (corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2140 ||
	      !corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2143) ;
  assign NOT_corew_cpu_imem_master_ar_araddr__036_ULT_s_ETC___d2061 =
	     corew$cpu_imem_master_araddr >=
	     soc_map$m_uart0_addr_range[127:64] &&
	     x__h74015 < soc_map$m_uart0_addr_range[63:0] &&
	     (corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2037 ||
	      !corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2040) &&
	     (corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2043 ||
	      !corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2046) ;
  assign SEXT_SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_ETC__q21 =
	     {2{SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551}} ;
  assign SEXT_SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_ETC__q16 =
	     {2{SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_0_35_ETC___d2358}} ;
  assign SEXT_SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_ETC__q11 =
	     {2{SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891}} ;
  assign SEXT_SEXT_bus_arbiter_firstHot_680_681_BIT_0_6_ETC__q3 =
	     {2{SEXT_bus_arbiter_firstHot_680_681_BIT_0_682_AN_ETC___d1688}} ;
  assign SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551 =
	     x__h97342 | y__h97343 ;
  assign SEXT_bus_1_1_arbiter_firstHot__q18 = {2{bus_1_1_arbiter_firstHot}} ;
  assign SEXT_bus_1_1_arbiter_lastSelect_1_530_531_BIT__ETC___d2545 =
	     x__h97206 | y__h97207 ;
  assign SEXT_bus_1_1_arbiter_lastSelect_1__q20 =
	     {2{bus_1_1_arbiter_lastSelect_1}} ;
  assign SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_0__ETC___d2539 =
	     x__h97055 | y__h97056 ;
  assign SEXT_bus_1_1_arbiter_lastSelect__q19 =
	     {2{bus_1_1_arbiter_lastSelect}} ;
  assign SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_0_35_ETC___d2358 =
	     x__h85507 | y__h85508 ;
  assign SEXT_bus_1_arbiter_firstHot_1__q14 = {2{bus_1_arbiter_firstHot_1}} ;
  assign SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891 =
	     x__h64813 | y__h64814 ;
  assign SEXT_bus_1_arbiter_firstHot__q8 = {2{bus_1_arbiter_firstHot}} ;
  assign SEXT_bus_1_arbiter_lastSelect_1_870_871_BIT_0__ETC___d1885 =
	     x__h64677 | y__h64678 ;
  assign SEXT_bus_1_arbiter_lastSelect_1__q10 =
	     {2{bus_1_arbiter_lastSelect_1}} ;
  assign SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_0__ETC___d2354 =
	     x__h85404 | y__h85405 ;
  assign SEXT_bus_1_arbiter_lastSelect_2__q15 =
	     {2{bus_1_arbiter_lastSelect_2}} ;
  assign SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_86_ETC___d1879 =
	     x__h64526 | y__h64527 ;
  assign SEXT_bus_1_arbiter_lastSelect__q9 = {2{bus_1_arbiter_lastSelect}} ;
  assign SEXT_bus_arbiter_firstHot_680_681_BIT_0_682_AN_ETC___d1688 =
	     x__h50437 | y__h50438 ;
  assign SEXT_bus_arbiter_firstHot__q1 = {2{bus_arbiter_firstHot}} ;
  assign SEXT_bus_arbiter_lastSelect_676_677_BIT_0_678__ETC___d1684 =
	     x__h50334 | y__h50335 ;
  assign SEXT_bus_arbiter_lastSelect__q2 = {2{bus_arbiter_lastSelect}} ;
  assign SEXT_x0861__q4 = {2{x__h50861}} ;
  assign SEXT_x5347__q12 = {2{x__h65347}} ;
  assign SEXT_x5381__q13 = {2{x__h65381}} ;
  assign SEXT_x5931__q17 = {2{x__h85931}} ;
  assign SEXT_x7876__q22 = {2{x__h97876}} ;
  assign SEXT_x7910__q23 = {2{x__h97910}} ;
  assign _0_OR_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_ETC___d1416 =
	     corew$cpu_imem_master_awaddr >=
	     soc_map$m_uart0_addr_range[127:64] &&
	     x__h38440 < soc_map$m_uart0_addr_range[63:0] &&
	     (IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1359 ||
	      !IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1363) &&
	     (IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1368 ||
	      !IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_cor_ETC___d1372) ;
  assign _0_OR_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_ETC___d1524 =
	     corew$cpu_dmem_master_awaddr >=
	     soc_map$m_uart0_addr_range[127:64] &&
	     x__h41788 < soc_map$m_uart0_addr_range[63:0] &&
	     (IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1474 ||
	      !IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1477) &&
	     (IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1480 ||
	      !IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_cor_ETC___d1483) ;
  assign _0_OR_NOT_corew_cpu_dmem_master_ar_araddr__133__ETC___d2180 =
	     corew$cpu_dmem_master_araddr >=
	     soc_map$m_uart0_addr_range[127:64] &&
	     x__h77024 < soc_map$m_uart0_addr_range[63:0] &&
	     (corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2134 ||
	      !corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2137) &&
	     (corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2140 ||
	      !corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2143) ;
  assign _0_OR_NOT_corew_cpu_imem_master_ar_araddr__036__ETC___d2083 =
	     corew$cpu_imem_master_araddr >=
	     soc_map$m_uart0_addr_range[127:64] &&
	     x__h74015 < soc_map$m_uart0_addr_range[63:0] &&
	     (corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2037 ||
	      !corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2040) &&
	     (corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2043 ||
	      !corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2046) ;
  assign a_awid__h39710 = { 1'd0, corew$cpu_imem_master_awid } ;
  assign a_awid__h43014 = { 1'd1, corew$cpu_dmem_master_awid } ;
  assign boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d97 =
	     boot_rom_axi4_deburster_countWriteRspFF$D_OUT <=
	     boot_rom_axi4_deburster_flitReceived ;
  assign boot_rom_axi4_deburster_inShim_bffD_OUT_BITS__ETC__q26 =
	     boot_rom_axi4_deburster_inShim_bff$D_OUT[8:2] ;
  assign boot_rom_axi4_deburster_inShim_rffD_OUT_BITS__ETC__q24 =
	     boot_rom_axi4_deburster_inShim_rff$D_OUT[74:68] ;
  assign boot_rom_axi4_deburster_readsSent_19_EQ_boot_r_ETC___d130 =
	     boot_rom_axi4_deburster_readsSent ==
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign bus_1_1_reqWires_0_whas__512_AND_bus_1_1_reqWi_ETC___d2522 =
	     CAN_FIRE_RL_bus_1_1_craftReq && bus_1_1_reqWires_0$wget ||
	     CAN_FIRE_RL_bus_1_1_craftReq_1 && bus_1_1_reqWires_1$wget ||
	     CAN_FIRE_RL_bus_1_1_craftReq_2 && bus_1_1_reqWires_2$wget ;
  assign bus_1_1_state_523_AND_bus_1_1_activeSource_0_6_ETC___d2620 =
	     bus_1_1_state && bus_1_1_activeSource_0 &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     ((!bus_1_ifcs_0_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
		bus_1_ifcs_0_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
		bus_1_ifcs_0_routeBack$D_OUT[0]) ;
  assign bus_1_1_state_523_AND_bus_1_1_activeSource_1_6_ETC___d2656 =
	     bus_1_1_state && bus_1_1_activeSource_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     ((!bus_1_ifcs_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
		bus_1_ifcs_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
		bus_1_ifcs_1_routeBack$D_OUT[0]) ;
  assign bus_1_1_state_523_AND_bus_1_1_activeSource_2_6_ETC___d2692 =
	     bus_1_1_state && bus_1_1_activeSource_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     ((!bus_1_ifcs_2_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
		bus_1_ifcs_2_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
		bus_1_ifcs_2_routeBack$D_OUT[0]) ;
  assign bus_1_ifcs_0_state_034_EQ_0_035_AND_IF_NOT_cor_ETC___d2065 =
	     bus_1_ifcs_0_state == 2'd0 &&
	     IF_NOT_corew_cpu_imem_master_ar_araddr__036_UL_ETC___d2052 +
	     (NOT_corew_cpu_imem_master_ar_araddr__036_ULT_s_ETC___d2061 ?
		2'd1 :
		2'd0) ==
	     2'd1 ;
  assign bus_1_ifcs_0_state_034_EQ_0_035_AND_NOT_IF_NOT_ETC___d2094 =
	     bus_1_ifcs_0_state == 2'd0 &&
	     IF_NOT_corew_cpu_imem_master_ar_araddr__036_UL_ETC___d2052 +
	     (NOT_corew_cpu_imem_master_ar_araddr__036_ULT_s_ETC___d2061 ?
		2'd1 :
		2'd0) !=
	     2'd1 ;
  assign bus_1_ifcs_1_state_131_EQ_0_132_AND_IF_NOT_cor_ETC___d2162 =
	     bus_1_ifcs_1_state == 2'd0 &&
	     IF_NOT_corew_cpu_dmem_master_ar_araddr__133_UL_ETC___d2149 +
	     (NOT_corew_cpu_dmem_master_ar_araddr__133_ULT_s_ETC___d2158 ?
		2'd1 :
		2'd0) ==
	     2'd1 ;
  assign bus_1_ifcs_1_state_131_EQ_0_132_AND_NOT_IF_NOT_ETC___d2191 =
	     bus_1_ifcs_1_state == 2'd0 &&
	     IF_NOT_corew_cpu_dmem_master_ar_araddr__133_UL_ETC___d2149 +
	     (NOT_corew_cpu_dmem_master_ar_araddr__133_ULT_s_ETC___d2158 ?
		2'd1 :
		2'd0) !=
	     2'd1 ;
  assign bus_1_reqWires_0_whas__852_AND_bus_1_reqWires__ETC___d1862 =
	     CAN_FIRE_RL_bus_1_craftReq && bus_1_reqWires_0$wget ||
	     CAN_FIRE_RL_bus_1_craftReq_1 && bus_1_reqWires_1$wget ||
	     CAN_FIRE_RL_bus_1_craftReq_2 && bus_1_reqWires_2$wget ;
  assign bus_1_state_1_343_AND_bus_1_activeSource_0_1_4_ETC___d2413 =
	     bus_1_state_1 && bus_1_activeSource_0_1 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     ((!bus_1_ifcs_0_innerRoute$D_OUT[0] ||
	       !bus_ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_bus_1_ifcs_0_innerRoute_first__296_BIT__ETC___d2318 :
		bus_1_ifcs_0_innerRoute$D_OUT[0]) ;
  assign bus_1_state_1_343_AND_bus_1_activeSource_1_1_4_ETC___d2453 =
	     bus_1_state_1 && bus_1_activeSource_1_1 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     ((!bus_1_ifcs_1_innerRoute$D_OUT[0] ||
	       !bus_ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_bus_1_ifcs_1_innerRoute_first__325_BIT__ETC___d2334 :
		bus_1_ifcs_1_innerRoute$D_OUT[0]) ;
  assign bus_1_state_863_AND_bus_1_activeSource_0_951_9_ETC___d1954 =
	     bus_1_state && bus_1_activeSource_0 &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     ((!bus_ifcs_0_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
		bus_ifcs_0_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
		bus_ifcs_0_routeBack$D_OUT[0]) ;
  assign bus_1_state_863_AND_bus_1_activeSource_1_984_9_ETC___d1987 =
	     bus_1_state && bus_1_activeSource_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     ((!bus_ifcs_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
		bus_ifcs_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
		bus_ifcs_1_routeBack$D_OUT[0]) ;
  assign bus_1_state_863_AND_bus_1_activeSource_2_018_0_ETC___d2021 =
	     bus_1_state && bus_1_activeSource_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     ((!bus_ifcs_2_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
		bus_ifcs_2_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
		bus_ifcs_2_routeBack$D_OUT[0]) ;
  assign bus_ifcs_0_state_353_EQ_0_354_AND_IF_NOT_IF_bu_ETC___d1394 =
	     bus_ifcs_0_state == 2'd0 &&
	     IF_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_T_ETC___d1378 +
	     (NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_ETC___d1390 ?
		2'd1 :
		2'd0) ==
	     2'd1 ;
  assign bus_ifcs_0_state_353_EQ_0_354_AND_NOT_IF_NOT_I_ETC___d1432 =
	     bus_ifcs_0_state == 2'd0 &&
	     IF_NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_T_ETC___d1378 +
	     (NOT_IF_bus_merged_0_flitLeft_217_EQ_0_218_THEN_ETC___d1390 ?
		2'd1 :
		2'd0) !=
	     2'd1 ;
  assign bus_ifcs_1_state_470_EQ_0_471_AND_IF_NOT_IF_bu_ETC___d1502 =
	     bus_ifcs_1_state == 2'd0 &&
	     IF_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_T_ETC___d1489 +
	     (NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_ETC___d1498 ?
		2'd1 :
		2'd0) ==
	     2'd1 ;
  assign bus_ifcs_1_state_470_EQ_0_471_AND_NOT_IF_NOT_I_ETC___d1540 =
	     bus_ifcs_1_state == 2'd0 &&
	     IF_NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_T_ETC___d1489 +
	     (NOT_IF_bus_merged_1_flitLeft_237_EQ_0_238_THEN_ETC___d1498 ?
		2'd1 :
		2'd0) !=
	     2'd1 ;
  assign bus_split_0_doPut_whas__253_AND_bus_split_0_do_ETC___d1260 =
	     CAN_FIRE_RL_bus_sink_selected &&
	     (bus_split_0_doPut$wget[173] ||
	      bus_ssNoSynth_0_aw_buffer_ff$FULL_N &&
	      bus_ssNoSynth_0_w_buffer_ff$FULL_N) ;
  assign bus_split_0_doPutwget_BITS_72_TO_0__q5 =
	     bus_split_0_doPut$wget[72:0] ;
  assign bus_split_1_doPut_whas__282_AND_bus_split_1_do_ETC___d1289 =
	     CAN_FIRE_RL_bus_sink_selected_1 &&
	     (bus_split_1_doPut$wget[173] ||
	      bus_ssNoSynth_1_aw_buffer_ff$FULL_N &&
	      bus_ssNoSynth_1_w_buffer_ff$FULL_N) ;
  assign bus_split_1_doPutwget_BITS_72_TO_0__q6 =
	     bus_split_1_doPut$wget[72:0] ;
  assign bus_split_2_doPut_whas__311_AND_bus_split_2_do_ETC___d1318 =
	     CAN_FIRE_RL_bus_sink_selected_2 &&
	     (bus_split_2_doPut$wget[173] ||
	      bus_ssNoSynth_2_aw_buffer_ff$FULL_N &&
	      bus_ssNoSynth_2_w_buffer_ff$FULL_N) ;
  assign bus_split_2_doPutwget_BITS_72_TO_0__q7 =
	     bus_split_2_doPut$wget[72:0] ;
  assign bus_state_673_AND_bus_activeSource_0_746_747_A_ETC___d1749 =
	     bus_state && bus_activeSource_0 &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     ((!bus_ifcs_0_innerRoute$D_OUT[0] ||
	       !IF_bus_split_0_flitLeft_261_EQ_0_262_THEN_bus__ETC___d1618) ?
		IF_NOT_bus_ifcs_0_innerRoute_first__626_BIT_1__ETC___d1648 :
		bus_ifcs_0_innerRoute$D_OUT[0]) ;
  assign bus_state_673_AND_bus_activeSource_1_790_791_A_ETC___d1793 =
	     bus_state && bus_activeSource_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     ((!bus_ifcs_1_innerRoute$D_OUT[0] ||
	       !IF_bus_split_0_flitLeft_261_EQ_0_262_THEN_bus__ETC___d1618) ?
		IF_NOT_bus_ifcs_1_innerRoute_first__655_BIT_1__ETC___d1664 :
		bus_ifcs_1_innerRoute$D_OUT[0]) ;
  assign corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2137 =
	     x__h76890 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign corew_cpu_dmem_master_ar_araddr__133_MINUS_soc_ETC___d2143 =
	     x__h76953 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2134 =
	     corew$cpu_dmem_master_araddr <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign corew_cpu_dmem_master_ar_araddr__133_ULT_soc_m_ETC___d2140 =
	     corew$cpu_dmem_master_araddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2040 =
	     x__h73881 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign corew_cpu_imem_master_ar_araddr__036_MINUS_soc_ETC___d2046 =
	     x__h73944 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2037 =
	     corew$cpu_imem_master_araddr <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign corew_cpu_imem_master_ar_araddr__036_ULT_soc_m_ETC___d2043 =
	     corew$cpu_imem_master_araddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign fatReq_arid__h74677 = { 1'd0, corew$cpu_imem_master_arid } ;
  assign fatReq_arid__h77671 = { 1'd1, corew$cpu_dmem_master_arid } ;
  assign mem0_controller_axi4_deburster_countWriteRspFF_ETC___d238 =
	     mem0_controller_axi4_deburster_countWriteRspFF$D_OUT <=
	     mem0_controller_axi4_deburster_flitReceived ;
  assign mem0_controller_axi4_deburster_inShim_bffD_OU_ETC__q27 =
	     mem0_controller_axi4_deburster_inShim_bff$D_OUT[8:2] ;
  assign mem0_controller_axi4_deburster_inShim_rffD_OU_ETC__q25 =
	     mem0_controller_axi4_deburster_inShim_rff$D_OUT[74:68] ;
  assign mem0_controller_axi4_deburster_readsSent_60_EQ_ETC___d271 =
	     mem0_controller_axi4_deburster_readsSent ==
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign x__h12424 = { 56'd0, mem0_controller_axi4_deburster_writesSent } ;
  assign x__h12672 = mem0_controller_axi4_deburster_writesSent + 8'd1 ;
  assign x__h12789 = mem0_controller_axi4_deburster_flitReceived + 8'd1 ;
  assign x__h13123 = { 56'd0, mem0_controller_axi4_deburster_readsSent } ;
  assign x__h13323 = mem0_controller_axi4_deburster_readsSent + 8'd1 ;
  assign x__h38286 =
	     corew$cpu_imem_master_awaddr -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h38359 =
	     corew$cpu_imem_master_awaddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h38440 =
	     corew$cpu_imem_master_awaddr -
	     soc_map$m_uart0_addr_range[127:64] ;
  assign x__h41654 =
	     corew$cpu_dmem_master_awaddr -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h41717 =
	     corew$cpu_dmem_master_awaddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h41788 =
	     corew$cpu_dmem_master_awaddr -
	     soc_map$m_uart0_addr_range[127:64] ;
  assign x__h50334 =
	     SEXT_bus_arbiter_lastSelect__q2[0] &
	     (CAN_FIRE_RL_bus_craftReq && bus_reqWires_0$wget) ;
  assign x__h50437 =
	     SEXT_bus_arbiter_firstHot__q1[0] &
	     (CAN_FIRE_RL_bus_craftReq && bus_reqWires_0$wget) ;
  assign x__h50802 =
	     SEXT_SEXT_bus_arbiter_firstHot_680_681_BIT_0_6_ETC__q3[0] &
	     bus_arbiter_firstHot ;
  assign x__h50861 =
	     !SEXT_bus_arbiter_firstHot_680_681_BIT_0_682_AN_ETC___d1688 &&
	     SEXT_bus_arbiter_lastSelect_676_677_BIT_0_678__ETC___d1684 ;
  assign x__h50943 = SEXT_x0861__q4[0] & bus_arbiter_firstHot ;
  assign x__h6182 = { 56'd0, boot_rom_axi4_deburster_writesSent } ;
  assign x__h6432 = boot_rom_axi4_deburster_writesSent + 8'd1 ;
  assign x__h64526 = x__h64528 | y__h64529 ;
  assign x__h64528 =
	     SEXT_bus_1_arbiter_lastSelect__q9[0] &
	     (CAN_FIRE_RL_bus_1_craftReq && bus_1_reqWires_0$wget) ;
  assign x__h64677 = x__h64679 | y__h64680 ;
  assign x__h64679 =
	     SEXT_bus_1_arbiter_lastSelect_1__q10[0] &
	     (CAN_FIRE_RL_bus_1_craftReq && bus_1_reqWires_0$wget) ;
  assign x__h64813 = x__h64815 | y__h64816 ;
  assign x__h64815 =
	     SEXT_bus_1_arbiter_firstHot__q8[0] &
	     (CAN_FIRE_RL_bus_1_craftReq && bus_1_reqWires_0$wget) ;
  assign x__h65285 = x__h65287 | y__h65288 ;
  assign x__h65287 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_ETC__q11[0] &
	     bus_1_arbiter_firstHot ;
  assign x__h65347 =
	     !SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891 &&
	     SEXT_bus_1_arbiter_lastSelect_1_870_871_BIT_0__ETC___d1885 ;
  assign x__h65381 =
	     !SEXT_bus_1_arbiter_lastSelect_1_870_871_BIT_0__ETC___d1885 &&
	     !SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891 &&
	     SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_86_ETC___d1879 ;
  assign x__h65473 = x__h65475 | y__h65476 ;
  assign x__h65475 = SEXT_x5347__q12[0] & bus_1_arbiter_firstHot ;
  assign x__h6549 = boot_rom_axi4_deburster_flitReceived + 8'd1 ;
  assign x__h65654 = x__h65656 | y__h65657 ;
  assign x__h65656 = SEXT_x5381__q13[0] & bus_1_arbiter_firstHot ;
  assign x__h6883 = { 56'd0, boot_rom_axi4_deburster_readsSent } ;
  assign x__h7083 = boot_rom_axi4_deburster_readsSent + 8'd1 ;
  assign x__h73881 =
	     corew$cpu_imem_master_araddr -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h73944 =
	     corew$cpu_imem_master_araddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h74015 =
	     corew$cpu_imem_master_araddr -
	     soc_map$m_uart0_addr_range[127:64] ;
  assign x__h76890 =
	     corew$cpu_dmem_master_araddr -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h76953 =
	     corew$cpu_dmem_master_araddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h77024 =
	     corew$cpu_dmem_master_araddr -
	     soc_map$m_uart0_addr_range[127:64] ;
  assign x__h85404 =
	     SEXT_bus_1_arbiter_lastSelect_2__q15[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_3 && bus_1_reqWires_0_1$wget) ;
  assign x__h85507 =
	     SEXT_bus_1_arbiter_firstHot_1__q14[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_3 && bus_1_reqWires_0_1$wget) ;
  assign x__h85872 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_ETC__q16[0] &
	     bus_1_arbiter_firstHot_1 ;
  assign x__h85931 =
	     !SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_0_35_ETC___d2358 &&
	     SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_0__ETC___d2354 ;
  assign x__h86013 = SEXT_x5931__q17[0] & bus_1_arbiter_firstHot_1 ;
  assign x__h97055 = x__h97057 | y__h97058 ;
  assign x__h97057 =
	     SEXT_bus_1_1_arbiter_lastSelect__q19[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq && bus_1_1_reqWires_0$wget) ;
  assign x__h97206 = x__h97208 | y__h97209 ;
  assign x__h97208 =
	     SEXT_bus_1_1_arbiter_lastSelect_1__q20[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq && bus_1_1_reqWires_0$wget) ;
  assign x__h97342 = x__h97344 | y__h97345 ;
  assign x__h97344 =
	     SEXT_bus_1_1_arbiter_firstHot__q18[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq && bus_1_1_reqWires_0$wget) ;
  assign x__h97814 = x__h97816 | y__h97817 ;
  assign x__h97816 =
	     SEXT_SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_ETC__q21[0] &
	     bus_1_1_arbiter_firstHot ;
  assign x__h97876 =
	     !SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551 &&
	     SEXT_bus_1_1_arbiter_lastSelect_1_530_531_BIT__ETC___d2545 ;
  assign x__h97910 =
	     !SEXT_bus_1_1_arbiter_lastSelect_1_530_531_BIT__ETC___d2545 &&
	     !SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551 &&
	     SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_0__ETC___d2539 ;
  assign x__h98002 = x__h98004 | y__h98005 ;
  assign x__h98004 = SEXT_x7876__q22[0] & bus_1_1_arbiter_firstHot ;
  assign x__h98183 = x__h98185 | y__h98186 ;
  assign x__h98185 = SEXT_x7910__q23[0] & bus_1_1_arbiter_firstHot ;
  assign x_araddr__h13003 =
	     (mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h13111 :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_araddr__h6763 =
	     (boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h6871 :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_awaddr__h12304 =
	     (mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h12412 :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_awaddr__h6058 =
	     (boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h6170 :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_port1__read__h75247 =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit ?
	       bus_1_ifcs_0_noRoute_flitCount$port0__write_1 :
	       bus_1_ifcs_0_noRoute_flitCount ;
  assign x_port1__read__h78238 =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit ?
	       bus_1_ifcs_1_noRoute_flitCount$port0__write_1 :
	       bus_1_ifcs_1_noRoute_flitCount ;
  assign x_wdata__h28214 =
	     bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_0_w_buffer_ff$D_OUT[72:9] :
	       bus_split_0_doPutwget_BITS_72_TO_0__q5[72:9] ;
  assign x_wdata__h30432 =
	     bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_1_w_buffer_ff$D_OUT[72:9] :
	       bus_split_1_doPutwget_BITS_72_TO_0__q6[72:9] ;
  assign x_wdata__h32655 =
	     bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_2_w_buffer_ff$D_OUT[72:9] :
	       bus_split_2_doPutwget_BITS_72_TO_0__q7[72:9] ;
  assign x_wstrb__h28215 =
	     bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_0_w_buffer_ff$D_OUT[8:1] :
	       bus_split_0_doPutwget_BITS_72_TO_0__q5[8:1] ;
  assign x_wstrb__h30433 =
	     bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_1_w_buffer_ff$D_OUT[8:1] :
	       bus_split_1_doPutwget_BITS_72_TO_0__q6[8:1] ;
  assign x_wstrb__h32656 =
	     bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_2_w_buffer_ff$D_OUT[8:1] :
	       bus_split_2_doPutwget_BITS_72_TO_0__q7[8:1] ;
  assign y__h12412 =
	     x__h12424 <<
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h13111 =
	     x__h13123 <<
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h50335 =
	     SEXT_bus_arbiter_firstHot__q1[0] &
	     (CAN_FIRE_RL_bus_craftReq_1 && bus_reqWires_1$wget) ;
  assign y__h50438 =
	     SEXT_bus_arbiter_lastSelect__q2[0] &
	     (CAN_FIRE_RL_bus_craftReq_1 && bus_reqWires_1$wget) ;
  assign y__h50803 = SEXT_x0861__q4[0] & bus_arbiter_lastSelect ;
  assign y__h50944 =
	     SEXT_SEXT_bus_arbiter_firstHot_680_681_BIT_0_6_ETC__q3[0] &
	     bus_arbiter_lastSelect ;
  assign y__h6170 =
	     x__h6182 <<
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h64527 =
	     SEXT_bus_1_arbiter_firstHot__q8[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_2 && bus_1_reqWires_2$wget) ;
  assign y__h64529 =
	     SEXT_bus_1_arbiter_lastSelect_1__q10[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_1 && bus_1_reqWires_1$wget) ;
  assign y__h64678 =
	     SEXT_bus_1_arbiter_lastSelect__q9[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_2 && bus_1_reqWires_2$wget) ;
  assign y__h64680 =
	     SEXT_bus_1_arbiter_firstHot__q8[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_1 && bus_1_reqWires_1$wget) ;
  assign y__h64814 =
	     SEXT_bus_1_arbiter_lastSelect_1__q10[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_2 && bus_1_reqWires_2$wget) ;
  assign y__h64816 =
	     SEXT_bus_1_arbiter_lastSelect__q9[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_1 && bus_1_reqWires_1$wget) ;
  assign y__h65286 = SEXT_x5381__q13[0] & bus_1_arbiter_lastSelect ;
  assign y__h65288 = SEXT_x5347__q12[0] & bus_1_arbiter_lastSelect_1 ;
  assign y__h65474 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_ETC__q11[0] &
	     bus_1_arbiter_lastSelect ;
  assign y__h65476 = SEXT_x5381__q13[0] & bus_1_arbiter_lastSelect_1 ;
  assign y__h65655 = SEXT_x5347__q12[0] & bus_1_arbiter_lastSelect ;
  assign y__h65657 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_ETC__q11[0] &
	     bus_1_arbiter_lastSelect_1 ;
  assign y__h6871 =
	     x__h6883 <<
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h85405 =
	     SEXT_bus_1_arbiter_firstHot_1__q14[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_4 && bus_1_reqWires_1_1$wget) ;
  assign y__h85508 =
	     SEXT_bus_1_arbiter_lastSelect_2__q15[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_4 && bus_1_reqWires_1_1$wget) ;
  assign y__h85873 = SEXT_x5931__q17[0] & bus_1_arbiter_lastSelect_2 ;
  assign y__h86014 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_ETC__q16[0] &
	     bus_1_arbiter_lastSelect_2 ;
  assign y__h97056 =
	     SEXT_bus_1_1_arbiter_firstHot__q18[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_2 && bus_1_1_reqWires_2$wget) ;
  assign y__h97058 =
	     SEXT_bus_1_1_arbiter_lastSelect_1__q20[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_1 && bus_1_1_reqWires_1$wget) ;
  assign y__h97207 =
	     SEXT_bus_1_1_arbiter_lastSelect__q19[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_2 && bus_1_1_reqWires_2$wget) ;
  assign y__h97209 =
	     SEXT_bus_1_1_arbiter_firstHot__q18[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_1 && bus_1_1_reqWires_1$wget) ;
  assign y__h97343 =
	     SEXT_bus_1_1_arbiter_lastSelect_1__q20[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_2 && bus_1_1_reqWires_2$wget) ;
  assign y__h97345 =
	     SEXT_bus_1_1_arbiter_lastSelect__q19[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_1 && bus_1_1_reqWires_1$wget) ;
  assign y__h97815 = SEXT_x7910__q23[0] & bus_1_1_arbiter_lastSelect ;
  assign y__h97817 = SEXT_x7876__q22[0] & bus_1_1_arbiter_lastSelect_1 ;
  assign y__h98003 =
	     SEXT_SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_ETC__q21[0] &
	     bus_1_1_arbiter_lastSelect ;
  assign y__h98005 = SEXT_x7910__q23[0] & bus_1_1_arbiter_lastSelect_1 ;
  assign y__h98184 = SEXT_x7876__q22[0] & bus_1_1_arbiter_lastSelect ;
  assign y__h98186 =
	     SEXT_SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_ETC__q21[0] &
	     bus_1_1_arbiter_lastSelect_1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        boot_rom_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY 8'd0;
	boot_rom_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	boot_rom_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	boot_rom_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    76'h2AAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	boot_rom_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	boot_rom_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_1_1_activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_activeSource_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_ifcs_0_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	bus_1_ifcs_0_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	bus_1_ifcs_0_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_1_ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_ifcs_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	bus_1_ifcs_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	bus_1_ifcs_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_1_ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_ifcs_2_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	bus_ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_0_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	bus_ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_2_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mem0_controller_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	mem0_controller_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	mem0_controller_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	mem0_controller_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    76'h2AAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	mem0_controller_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	mem0_controller_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (boot_rom_axi4_deburster_flitReceived$EN)
	  boot_rom_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_flitReceived$D_IN;
	if (boot_rom_axi4_deburster_inSerial_lastWasRead$EN)
	  boot_rom_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_state$EN)
	  boot_rom_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_state$D_IN;
	if (boot_rom_axi4_deburster_readsSent$EN)
	  boot_rom_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_readsSent$D_IN;
	if (boot_rom_axi4_deburster_writesSent$EN)
	  boot_rom_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_writesSent$D_IN;
	if (bus_1_1_activeSource_0$EN)
	  bus_1_1_activeSource_0 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_activeSource_0$D_IN;
	if (bus_1_1_activeSource_1$EN)
	  bus_1_1_activeSource_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_activeSource_1$D_IN;
	if (bus_1_1_activeSource_2$EN)
	  bus_1_1_activeSource_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_activeSource_2$D_IN;
	if (bus_1_1_arbiter_firstHot$EN)
	  bus_1_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_arbiter_firstHot$D_IN;
	if (bus_1_1_arbiter_lastSelect$EN)
	  bus_1_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_arbiter_lastSelect$D_IN;
	if (bus_1_1_arbiter_lastSelect_1$EN)
	  bus_1_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_arbiter_lastSelect_1$D_IN;
	if (bus_1_1_state$EN)
	  bus_1_1_state <= `BSV_ASSIGNMENT_DELAY bus_1_1_state$D_IN;
	if (bus_1_activeSource_0$EN)
	  bus_1_activeSource_0 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_0$D_IN;
	if (bus_1_activeSource_0_1$EN)
	  bus_1_activeSource_0_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_0_1$D_IN;
	if (bus_1_activeSource_1$EN)
	  bus_1_activeSource_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_1$D_IN;
	if (bus_1_activeSource_1_1$EN)
	  bus_1_activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_1_1$D_IN;
	if (bus_1_activeSource_2$EN)
	  bus_1_activeSource_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_2$D_IN;
	if (bus_1_arbiter_firstHot$EN)
	  bus_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_firstHot$D_IN;
	if (bus_1_arbiter_firstHot_1$EN)
	  bus_1_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_firstHot_1$D_IN;
	if (bus_1_arbiter_lastSelect$EN)
	  bus_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect$D_IN;
	if (bus_1_arbiter_lastSelect_1$EN)
	  bus_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_1$D_IN;
	if (bus_1_arbiter_lastSelect_2$EN)
	  bus_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_2$D_IN;
	if (bus_1_ifcs_0_noRoute_currentReq$EN)
	  bus_1_ifcs_0_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_0_noRoute_currentReq$D_IN;
	if (bus_1_ifcs_0_noRoute_flitCount$EN)
	  bus_1_ifcs_0_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_0_noRoute_flitCount$D_IN;
	if (bus_1_ifcs_0_state$EN)
	  bus_1_ifcs_0_state <= `BSV_ASSIGNMENT_DELAY bus_1_ifcs_0_state$D_IN;
	if (bus_1_ifcs_0_state_1$EN)
	  bus_1_ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_0_state_1$D_IN;
	if (bus_1_ifcs_1_noRoute_currentReq$EN)
	  bus_1_ifcs_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_1_noRoute_currentReq$D_IN;
	if (bus_1_ifcs_1_noRoute_flitCount$EN)
	  bus_1_ifcs_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_1_noRoute_flitCount$D_IN;
	if (bus_1_ifcs_1_state$EN)
	  bus_1_ifcs_1_state <= `BSV_ASSIGNMENT_DELAY bus_1_ifcs_1_state$D_IN;
	if (bus_1_ifcs_1_state_1$EN)
	  bus_1_ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_1_state_1$D_IN;
	if (bus_1_ifcs_2_state$EN)
	  bus_1_ifcs_2_state <= `BSV_ASSIGNMENT_DELAY bus_1_ifcs_2_state$D_IN;
	if (bus_1_state$EN)
	  bus_1_state <= `BSV_ASSIGNMENT_DELAY bus_1_state$D_IN;
	if (bus_1_state_1$EN)
	  bus_1_state_1 <= `BSV_ASSIGNMENT_DELAY bus_1_state_1$D_IN;
	if (bus_activeSource_0$EN)
	  bus_activeSource_0 <= `BSV_ASSIGNMENT_DELAY bus_activeSource_0$D_IN;
	if (bus_activeSource_1$EN)
	  bus_activeSource_1 <= `BSV_ASSIGNMENT_DELAY bus_activeSource_1$D_IN;
	if (bus_arbiter_firstHot$EN)
	  bus_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_firstHot$D_IN;
	if (bus_arbiter_lastSelect$EN)
	  bus_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect$D_IN;
	if (bus_ifcs_0_noRoute_inner_currentReq$EN)
	  bus_ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      bus_ifcs_0_noRoute_inner_currentReq$D_IN;
	if (bus_ifcs_0_noRoute_inner_pendingReq$EN)
	  bus_ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      bus_ifcs_0_noRoute_inner_pendingReq$D_IN;
	if (bus_ifcs_0_state$EN)
	  bus_ifcs_0_state <= `BSV_ASSIGNMENT_DELAY bus_ifcs_0_state$D_IN;
	if (bus_ifcs_0_state_1$EN)
	  bus_ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY bus_ifcs_0_state_1$D_IN;
	if (bus_ifcs_1_noRoute_inner_currentReq$EN)
	  bus_ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      bus_ifcs_1_noRoute_inner_currentReq$D_IN;
	if (bus_ifcs_1_noRoute_inner_pendingReq$EN)
	  bus_ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      bus_ifcs_1_noRoute_inner_pendingReq$D_IN;
	if (bus_ifcs_1_state$EN)
	  bus_ifcs_1_state <= `BSV_ASSIGNMENT_DELAY bus_ifcs_1_state$D_IN;
	if (bus_ifcs_1_state_1$EN)
	  bus_ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY bus_ifcs_1_state_1$D_IN;
	if (bus_ifcs_2_state$EN)
	  bus_ifcs_2_state <= `BSV_ASSIGNMENT_DELAY bus_ifcs_2_state$D_IN;
	if (bus_merged_0_flitLeft$EN)
	  bus_merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_merged_0_flitLeft$D_IN;
	if (bus_merged_1_flitLeft$EN)
	  bus_merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_merged_1_flitLeft$D_IN;
	if (bus_split_0_flitLeft$EN)
	  bus_split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_0_flitLeft$D_IN;
	if (bus_split_1_flitLeft$EN)
	  bus_split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_1_flitLeft$D_IN;
	if (bus_split_2_flitLeft$EN)
	  bus_split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_2_flitLeft$D_IN;
	if (bus_state$EN) bus_state <= `BSV_ASSIGNMENT_DELAY bus_state$D_IN;
	if (mem0_controller_axi4_deburster_flitReceived$EN)
	  mem0_controller_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_flitReceived$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_lastWasRead$EN)
	  mem0_controller_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_state$EN)
	  mem0_controller_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_state$D_IN;
	if (mem0_controller_axi4_deburster_readsSent$EN)
	  mem0_controller_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_readsSent$D_IN;
	if (mem0_controller_axi4_deburster_writesSent$EN)
	  mem0_controller_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_writesSent$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    boot_rom_axi4_deburster_flitReceived = 8'hAA;
    boot_rom_axi4_deburster_inSerial_lastWasRead = 1'h0;
    boot_rom_axi4_deburster_inSerial_shim_arff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_awff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_bff_rv = 10'h2AA;
    boot_rom_axi4_deburster_inSerial_shim_rff_rv = 76'hAAAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_wff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_state = 2'h2;
    boot_rom_axi4_deburster_readsSent = 8'hAA;
    boot_rom_axi4_deburster_writesSent = 8'hAA;
    bus_1_1_activeSource_0 = 1'h0;
    bus_1_1_activeSource_1 = 1'h0;
    bus_1_1_activeSource_2 = 1'h0;
    bus_1_1_arbiter_firstHot = 1'h0;
    bus_1_1_arbiter_lastSelect = 1'h0;
    bus_1_1_arbiter_lastSelect_1 = 1'h0;
    bus_1_1_state = 1'h0;
    bus_1_activeSource_0 = 1'h0;
    bus_1_activeSource_0_1 = 1'h0;
    bus_1_activeSource_1 = 1'h0;
    bus_1_activeSource_1_1 = 1'h0;
    bus_1_activeSource_2 = 1'h0;
    bus_1_arbiter_firstHot = 1'h0;
    bus_1_arbiter_firstHot_1 = 1'h0;
    bus_1_arbiter_lastSelect = 1'h0;
    bus_1_arbiter_lastSelect_1 = 1'h0;
    bus_1_arbiter_lastSelect_2 = 1'h0;
    bus_1_ifcs_0_noRoute_currentReq = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    bus_1_ifcs_0_noRoute_flitCount = 9'h0AA;
    bus_1_ifcs_0_state = 2'h2;
    bus_1_ifcs_0_state_1 = 1'h0;
    bus_1_ifcs_1_noRoute_currentReq = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    bus_1_ifcs_1_noRoute_flitCount = 9'h0AA;
    bus_1_ifcs_1_state = 2'h2;
    bus_1_ifcs_1_state_1 = 1'h0;
    bus_1_ifcs_2_state = 1'h0;
    bus_1_state = 1'h0;
    bus_1_state_1 = 1'h0;
    bus_activeSource_0 = 1'h0;
    bus_activeSource_1 = 1'h0;
    bus_arbiter_firstHot = 1'h0;
    bus_arbiter_lastSelect = 1'h0;
    bus_ifcs_0_noRoute_inner_currentReq = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    bus_ifcs_0_noRoute_inner_pendingReq = 1'h0;
    bus_ifcs_0_state = 2'h2;
    bus_ifcs_0_state_1 = 1'h0;
    bus_ifcs_1_noRoute_inner_currentReq = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    bus_ifcs_1_noRoute_inner_pendingReq = 1'h0;
    bus_ifcs_1_state = 2'h2;
    bus_ifcs_1_state_1 = 1'h0;
    bus_ifcs_2_state = 1'h0;
    bus_merged_0_flitLeft = 8'hAA;
    bus_merged_1_flitLeft = 8'hAA;
    bus_split_0_flitLeft = 8'hAA;
    bus_split_1_flitLeft = 8'hAA;
    bus_split_2_flitLeft = 8'hAA;
    bus_state = 1'h0;
    mem0_controller_axi4_deburster_flitReceived = 8'hAA;
    mem0_controller_axi4_deburster_inSerial_lastWasRead = 1'h0;
    mem0_controller_axi4_deburster_inSerial_shim_arff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_awff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_bff_rv = 10'h2AA;
    mem0_controller_axi4_deburster_inSerial_shim_rff_rv =
	76'hAAAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_wff_rv =
	75'h2AAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_state = 2'h2;
    mem0_controller_axi4_deburster_readsSent = 8'hAA;
    mem0_controller_axi4_deburster_writesSent = 8'hAA;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_start)
	begin
	  v__h109045 = $stime;
	  #0;
	end
    v__h109039 = v__h109045 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_start)
	$display("%0d: %m.method start (tohost %0h, fromhost %0h)",
		 v__h109039,
		 start_tohost_addr,
		 start_fromhost_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate &&
	  !SEXT_bus_arbiter_lastSelect_676_677_BIT_0_678__ETC___d1684 &&
	  !SEXT_bus_arbiter_firstHot_680_681_BIT_0_682_AN_ETC___d1688)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate &&
	  !SEXT_bus_arbiter_lastSelect_676_677_BIT_0_678__ETC___d1684 &&
	  !SEXT_bus_arbiter_firstHot_680_681_BIT_0_682_AN_ETC___d1688)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h52342 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h52342,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_0_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_0_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_0_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_0_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_0_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_0_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && !bus_ifcs_0_innerRoute$EMPTY_N)
	begin
	  v__h51731 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && !bus_ifcs_0_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h51731,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && !bus_ifcs_0_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h56351 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h56351,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  !bus_ifcs_1_innerRoute$EMPTY_N)
	begin
	  v__h55740 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  !bus_ifcs_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h55740,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  !bus_ifcs_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && WILL_FIRE_RL_bus_burst)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_source_selected] and\n  [RL_bus_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_source_selected || WILL_FIRE_RL_bus_burst) &&
	  (WILL_FIRE_RL_bus_source_selected_1 || WILL_FIRE_RL_bus_burst_1))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_source_selected,\n  RL_bus_burst] and [RL_bus_source_selected_1, RL_bus_burst_1] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 && WILL_FIRE_RL_bus_burst_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_source_selected_1] and\n  [RL_bus_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_sink_selected && WILL_FIRE_RL_bus_sink_selected_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_sink_selected] and\n  [RL_bus_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_sink_selected ||
	   WILL_FIRE_RL_bus_sink_selected_1) &&
	  WILL_FIRE_RL_bus_sink_selected_2)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_sink_selected,\n  RL_bus_sink_selected_1] and [RL_bus_sink_selected_2] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putFirst && bus_split_0_doPut$wget[173])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putFirst && bus_split_0_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  !bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  !bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && !bus_split_0_doPut$wget[173])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && !bus_split_0_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putFirst && bus_split_1_doPut$wget[173])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putFirst && bus_split_1_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  !bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  !bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && !bus_split_1_doPut$wget[173])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && !bus_split_1_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putFirst && bus_split_2_doPut$wget[173])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putFirst && bus_split_2_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  !bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  !bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && !bus_split_2_doPut$wget[173])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && !bus_split_2_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_nonRoutableFlit]\n  and [RL_bus_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_nonRoutableFlit]\n  and [RL_bus_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate &&
	  !SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_86_ETC___d1879 &&
	  !SEXT_bus_1_arbiter_lastSelect_1_870_871_BIT_0__ETC___d1885 &&
	  !SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate &&
	  !SEXT_bus_1_arbiter_lastSelect_866_867_BIT_0_86_ETC___d1879 &&
	  !SEXT_bus_1_arbiter_lastSelect_1_870_871_BIT_0__ETC___d1885 &&
	  !SEXT_bus_1_arbiter_firstHot_875_876_BIT_0_877__ETC___d1891)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h67046 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h67046,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_0_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_0_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_0_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_0_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected && !bus_ifcs_0_routeBack$EMPTY_N)
	begin
	  v__h66665 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected && !bus_ifcs_0_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h66665,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected && !bus_ifcs_0_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit_1 &&
	  WILL_FIRE_RL_bus_ifcs_0_followFlits_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit_1] and\n  [RL_bus_ifcs_0_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h69116 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h69116,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  !bus_ifcs_1_routeBack$EMPTY_N)
	begin
	  v__h68735 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  !bus_ifcs_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h68735,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  !bus_ifcs_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 && WILL_FIRE_RL_bus_1_burst_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_1] and\n  [RL_bus_1_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit_1 &&
	  WILL_FIRE_RL_bus_ifcs_1_followFlits_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit_1] and\n  [RL_bus_ifcs_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h71015 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h71015,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_2_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_2_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_2_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_2_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  !bus_ifcs_2_routeBack$EMPTY_N)
	begin
	  v__h70634 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  !bus_ifcs_2_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h70634,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  !bus_ifcs_2_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected && WILL_FIRE_RL_bus_1_burst)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected] and\n  [RL_bus_1_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_source_selected || WILL_FIRE_RL_bus_1_burst) &&
	  (WILL_FIRE_RL_bus_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_burst_1))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected,\n  RL_bus_1_burst] and [RL_bus_1_source_selected_1, RL_bus_1_burst_1] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_source_selected || WILL_FIRE_RL_bus_1_burst ||
	   WILL_FIRE_RL_bus_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_burst_1) &&
	  (WILL_FIRE_RL_bus_1_source_selected_2 ||
	   WILL_FIRE_RL_bus_1_burst_2))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected,\n  RL_bus_1_burst, RL_bus_1_source_selected_1, RL_bus_1_burst_1] and\n  [RL_bus_1_source_selected_2, RL_bus_1_burst_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 && WILL_FIRE_RL_bus_1_burst_2)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_2] and\n  [RL_bus_1_burst_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_2_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_2_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_2_firstFlit] and\n  [RL_bus_ifcs_2_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit] and\n  [RL_bus_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit] and\n  [RL_bus_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit] and\n  [RL_bus_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit] and\n  [RL_bus_ifcs_0_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_followFlits] and\n  [RL_bus_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_0_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_followFlits] and\n  [RL_bus_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_followFlits] and\n  [RL_bus_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_drainFlits &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_drainFlits] and\n  [RL_bus_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && corew$cpu_imem_master_wlast &&
	  bus_merged_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && corew$cpu_imem_master_wlast &&
	  bus_merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther &&
	  !corew$cpu_imem_master_wlast &&
	  bus_merged_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther &&
	  !corew$cpu_imem_master_wlast &&
	  bus_merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_sink_selected &&
	  WILL_FIRE_RL_bus_1_sink_selected_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_sink_selected] and\n  [RL_bus_1_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit] and\n  [RL_bus_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit] and\n  [RL_bus_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit] and\n  [RL_bus_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit] and\n  [RL_bus_ifcs_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_followFlits] and\n  [RL_bus_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_1_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_followFlits] and\n  [RL_bus_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_followFlits] and\n  [RL_bus_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_drainFlits &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_drainFlits] and\n  [RL_bus_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && corew$cpu_dmem_master_wlast &&
	  bus_merged_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && corew$cpu_dmem_master_wlast &&
	  bus_merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther &&
	  !corew$cpu_dmem_master_wlast &&
	  bus_merged_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther &&
	  !corew$cpu_dmem_master_wlast &&
	  bus_merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate_1 &&
	  !SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_0__ETC___d2354 &&
	  !SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_0_35_ETC___d2358)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate_1 &&
	  !SEXT_bus_1_arbiter_lastSelect_2_346_347_BIT_0__ETC___d2354 &&
	  !SEXT_bus_1_arbiter_firstHot_1_350_351_BIT_0_35_ETC___d2358)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h87406 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h87406,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_0_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_0_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_0_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_0_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_0_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_0_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  !bus_1_ifcs_0_innerRoute$EMPTY_N)
	begin
	  v__h86795 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  !bus_1_ifcs_0_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h86795,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  !bus_1_ifcs_0_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h90299 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h90299,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  !bus_1_ifcs_1_innerRoute$EMPTY_N)
	begin
	  v__h89688 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  !bus_1_ifcs_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h89688,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  !bus_1_ifcs_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 && WILL_FIRE_RL_bus_1_burst_3)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_3] and\n  [RL_bus_1_burst_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_source_selected_3 ||
	   WILL_FIRE_RL_bus_1_burst_3) &&
	  (WILL_FIRE_RL_bus_1_source_selected_4 ||
	   WILL_FIRE_RL_bus_1_burst_4))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_3,\n  RL_bus_1_burst_3] and [RL_bus_1_source_selected_4, RL_bus_1_burst_4] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 && WILL_FIRE_RL_bus_1_burst_4)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_4] and\n  [RL_bus_1_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_sink_selected_2 &&
	  WILL_FIRE_RL_bus_1_sink_selected_3)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_sink_selected_2] and\n  [RL_bus_1_sink_selected_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_sink_selected_2 ||
	   WILL_FIRE_RL_bus_1_sink_selected_3) &&
	  WILL_FIRE_RL_bus_1_sink_selected_4)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_sink_selected_2,\n  RL_bus_1_sink_selected_3] and [RL_bus_1_sink_selected_4] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_nonRoutableFlit]\n  and [RL_bus_1_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_nonRoutableFlit]\n  and [RL_bus_1_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_arbitrate &&
	  !SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_0__ETC___d2539 &&
	  !SEXT_bus_1_1_arbiter_lastSelect_1_530_531_BIT__ETC___d2545 &&
	  !SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_arbitrate &&
	  !SEXT_bus_1_1_arbiter_lastSelect_526_527_BIT_0__ETC___d2539 &&
	  !SEXT_bus_1_1_arbiter_lastSelect_1_530_531_BIT__ETC___d2545 &&
	  !SEXT_bus_1_1_arbiter_firstHot_535_536_BIT_0_53_ETC___d2551)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h99579 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h99579,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_0_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_0_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_0_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_0_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  !bus_1_ifcs_0_routeBack$EMPTY_N)
	begin
	  v__h99198 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  !bus_1_ifcs_0_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h99198,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  !bus_1_ifcs_0_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 &&
	  WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit_1] and\n  [RL_bus_1_ifcs_0_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB)
	$display("Error: \"../../libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 305, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_boot_rom_axi4_deburster_inSerial_takeR] and\n  [RL_boot_rom_axi4_deburster_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h102070 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h102070,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  !bus_1_ifcs_1_routeBack$EMPTY_N)
	begin
	  v__h101689 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  !bus_1_ifcs_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h101689,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  !bus_1_ifcs_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  WILL_FIRE_RL_bus_1_1_burst_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected_1]\n  and [RL_bus_1_1_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 &&
	  WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit_1] and\n  [RL_bus_1_ifcs_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB)
	$display("Error: \"../../libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 305, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mem0_controller_axi4_deburster_inSerial_takeR] and\n  [RL_mem0_controller_axi4_deburster_inSerial_takeB] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	begin
	  v__h108522 = $stime;
	  #0;
	end
    v__h108516 = v__h108522 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	$display("%0d: %m.rl_reset_start_initial ...", v__h108516);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h104380 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h104380,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_2_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_2_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_2_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_2_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  !bus_1_ifcs_2_routeBack$EMPTY_N)
	begin
	  v__h103999 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  !bus_1_ifcs_2_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h103999,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  !bus_1_ifcs_2_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected && WILL_FIRE_RL_bus_1_1_burst)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected] and\n  [RL_bus_1_1_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_1_source_selected ||
	   WILL_FIRE_RL_bus_1_1_burst) &&
	  (WILL_FIRE_RL_bus_1_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_1_burst_1))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected,\n  RL_bus_1_1_burst] and [RL_bus_1_1_source_selected_1, RL_bus_1_1_burst_1] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_1_source_selected ||
	   WILL_FIRE_RL_bus_1_1_burst ||
	   WILL_FIRE_RL_bus_1_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_1_burst_1) &&
	  (WILL_FIRE_RL_bus_1_1_source_selected_2 ||
	   WILL_FIRE_RL_bus_1_1_burst_2))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected,\n  RL_bus_1_1_burst, RL_bus_1_1_source_selected_1, RL_bus_1_1_burst_1] and\n  [RL_bus_1_1_source_selected_2, RL_bus_1_1_burst_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  WILL_FIRE_RL_bus_1_1_burst_2)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected_2]\n  and [RL_bus_1_1_burst_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_2_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_2_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_2_firstFlit] and\n  [RL_bus_1_ifcs_2_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	begin
	  v__h108753 = $stime;
	  #0;
	end
    v__h108747 = v__h108753 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("%0d: %m.rl_reset_complete_initial", v__h108747);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit] and\n  [RL_bus_1_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit] and\n  [RL_bus_1_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit] and\n  [RL_bus_1_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit] and\n  [RL_bus_1_ifcs_0_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_followFlits] and\n  [RL_bus_1_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_0_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_followFlits] and\n  [RL_bus_1_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_followFlits] and\n  [RL_bus_1_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_drainFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_drainFlits] and\n  [RL_bus_1_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_sink_selected &&
	  WILL_FIRE_RL_bus_1_1_sink_selected_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_sink_selected] and\n  [RL_bus_1_1_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit] and\n  [RL_bus_1_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit] and\n  [RL_bus_1_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit] and\n  [RL_bus_1_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit] and\n  [RL_bus_1_ifcs_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_followFlits] and\n  [RL_bus_1_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_1_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_followFlits] and\n  [RL_bus_1_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_followFlits] and\n  [RL_bus_1_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_drainFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_drainFlits] and\n  [RL_bus_1_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkSoC_Top

