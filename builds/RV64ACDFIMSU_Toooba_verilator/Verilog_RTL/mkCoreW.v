//
// Generated by Bluespec Compiler (build e7facc6)
//
// On Wed Mar 25 15:46:18 GMT 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_start                      O     1
// cpu_imem_master_awid           O     6
// cpu_imem_master_awaddr         O    64
// cpu_imem_master_awlen          O     8
// cpu_imem_master_awsize         O     3
// cpu_imem_master_awburst        O     2
// cpu_imem_master_awlock         O     1
// cpu_imem_master_awcache        O     4
// cpu_imem_master_awprot         O     3
// cpu_imem_master_awqos          O     4
// cpu_imem_master_awregion       O     4
// cpu_imem_master_awvalid        O     1
// cpu_imem_master_wdata          O    64
// cpu_imem_master_wstrb          O     8
// cpu_imem_master_wlast          O     1
// cpu_imem_master_wvalid         O     1
// cpu_imem_master_bready         O     1 reg
// cpu_imem_master_arid           O     6
// cpu_imem_master_araddr         O    64
// cpu_imem_master_arlen          O     8
// cpu_imem_master_arsize         O     3
// cpu_imem_master_arburst        O     2
// cpu_imem_master_arlock         O     1
// cpu_imem_master_arcache        O     4
// cpu_imem_master_arprot         O     3
// cpu_imem_master_arqos          O     4
// cpu_imem_master_arregion       O     4
// cpu_imem_master_arvalid        O     1
// cpu_imem_master_rready         O     1 reg
// cpu_dmem_master_awid           O     6
// cpu_dmem_master_awaddr         O    64
// cpu_dmem_master_awlen          O     8
// cpu_dmem_master_awsize         O     3
// cpu_dmem_master_awburst        O     2
// cpu_dmem_master_awlock         O     1
// cpu_dmem_master_awcache        O     4
// cpu_dmem_master_awprot         O     3
// cpu_dmem_master_awqos          O     4
// cpu_dmem_master_awregion       O     4
// cpu_dmem_master_awvalid        O     1
// cpu_dmem_master_wdata          O    64
// cpu_dmem_master_wstrb          O     8
// cpu_dmem_master_wlast          O     1
// cpu_dmem_master_wvalid         O     1
// cpu_dmem_master_bready         O     1
// cpu_dmem_master_arid           O     6
// cpu_dmem_master_araddr         O    64
// cpu_dmem_master_arlen          O     8
// cpu_dmem_master_arsize         O     3
// cpu_dmem_master_arburst        O     2
// cpu_dmem_master_arlock         O     1
// cpu_dmem_master_arcache        O     4
// cpu_dmem_master_arprot         O     3
// cpu_dmem_master_arqos          O     4
// cpu_dmem_master_arregion       O     4
// cpu_dmem_master_arvalid        O     1
// cpu_dmem_master_rready         O     1
// RST_N_dm_power_on_reset        I     1 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 unused
// start_tohost_addr              I    64 reg
// start_fromhost_addr            I    64 reg
// cpu_imem_master_awready        I     1
// cpu_imem_master_wready         I     1
// cpu_imem_master_bid            I     6
// cpu_imem_master_bresp          I     2
// cpu_imem_master_arready        I     1
// cpu_imem_master_rid            I     6
// cpu_imem_master_rdata          I    64
// cpu_imem_master_rresp          I     2
// cpu_imem_master_rlast          I     1
// cpu_dmem_master_awready        I     1
// cpu_dmem_master_wready         I     1
// cpu_dmem_master_bid            I     6
// cpu_dmem_master_bresp          I     2
// cpu_dmem_master_arready        I     1
// cpu_dmem_master_rid            I     6
// cpu_dmem_master_rdata          I    64
// cpu_dmem_master_rresp          I     2
// cpu_dmem_master_rlast          I     1
// core_external_interrupt_sources_0_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_1_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_2_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_3_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_4_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_5_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_6_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_7_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_8_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_9_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_10_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_11_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_12_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_13_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_14_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_15_m_interrupt_req_set_not_clear  I     1
// nmi_req_set_not_clear          I     1 unused
// EN_set_verbosity               I     1
// EN_start                       I     1
// cpu_imem_master_bvalid         I     1
// cpu_imem_master_rvalid         I     1
// cpu_dmem_master_bvalid         I     1
// cpu_dmem_master_rvalid         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCoreW(RST_N_dm_power_on_reset,
	       CLK,
	       RST_N,

	       set_verbosity_verbosity,
	       set_verbosity_logdelay,
	       EN_set_verbosity,
	       RDY_set_verbosity,

	       start_tohost_addr,
	       start_fromhost_addr,
	       EN_start,
	       RDY_start,

	       cpu_imem_master_awid,

	       cpu_imem_master_awaddr,

	       cpu_imem_master_awlen,

	       cpu_imem_master_awsize,

	       cpu_imem_master_awburst,

	       cpu_imem_master_awlock,

	       cpu_imem_master_awcache,

	       cpu_imem_master_awprot,

	       cpu_imem_master_awqos,

	       cpu_imem_master_awregion,

	       cpu_imem_master_awvalid,

	       cpu_imem_master_awready,

	       cpu_imem_master_wdata,

	       cpu_imem_master_wstrb,

	       cpu_imem_master_wlast,

	       cpu_imem_master_wvalid,

	       cpu_imem_master_wready,

	       cpu_imem_master_bid,
	       cpu_imem_master_bresp,
	       cpu_imem_master_bvalid,

	       cpu_imem_master_bready,

	       cpu_imem_master_arid,

	       cpu_imem_master_araddr,

	       cpu_imem_master_arlen,

	       cpu_imem_master_arsize,

	       cpu_imem_master_arburst,

	       cpu_imem_master_arlock,

	       cpu_imem_master_arcache,

	       cpu_imem_master_arprot,

	       cpu_imem_master_arqos,

	       cpu_imem_master_arregion,

	       cpu_imem_master_arvalid,

	       cpu_imem_master_arready,

	       cpu_imem_master_rid,
	       cpu_imem_master_rdata,
	       cpu_imem_master_rresp,
	       cpu_imem_master_rlast,
	       cpu_imem_master_rvalid,

	       cpu_imem_master_rready,

	       cpu_dmem_master_awid,

	       cpu_dmem_master_awaddr,

	       cpu_dmem_master_awlen,

	       cpu_dmem_master_awsize,

	       cpu_dmem_master_awburst,

	       cpu_dmem_master_awlock,

	       cpu_dmem_master_awcache,

	       cpu_dmem_master_awprot,

	       cpu_dmem_master_awqos,

	       cpu_dmem_master_awregion,

	       cpu_dmem_master_awvalid,

	       cpu_dmem_master_awready,

	       cpu_dmem_master_wdata,

	       cpu_dmem_master_wstrb,

	       cpu_dmem_master_wlast,

	       cpu_dmem_master_wvalid,

	       cpu_dmem_master_wready,

	       cpu_dmem_master_bid,
	       cpu_dmem_master_bresp,
	       cpu_dmem_master_bvalid,

	       cpu_dmem_master_bready,

	       cpu_dmem_master_arid,

	       cpu_dmem_master_araddr,

	       cpu_dmem_master_arlen,

	       cpu_dmem_master_arsize,

	       cpu_dmem_master_arburst,

	       cpu_dmem_master_arlock,

	       cpu_dmem_master_arcache,

	       cpu_dmem_master_arprot,

	       cpu_dmem_master_arqos,

	       cpu_dmem_master_arregion,

	       cpu_dmem_master_arvalid,

	       cpu_dmem_master_arready,

	       cpu_dmem_master_rid,
	       cpu_dmem_master_rdata,
	       cpu_dmem_master_rresp,
	       cpu_dmem_master_rlast,
	       cpu_dmem_master_rvalid,

	       cpu_dmem_master_rready,

	       core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,

	       core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,

	       nmi_req_set_not_clear);
  input  RST_N_dm_power_on_reset;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method start
  input  [63 : 0] start_tohost_addr;
  input  [63 : 0] start_fromhost_addr;
  input  EN_start;
  output RDY_start;

  // value method cpu_imem_master_aw_awid
  output [5 : 0] cpu_imem_master_awid;

  // value method cpu_imem_master_aw_awaddr
  output [63 : 0] cpu_imem_master_awaddr;

  // value method cpu_imem_master_aw_awlen
  output [7 : 0] cpu_imem_master_awlen;

  // value method cpu_imem_master_aw_awsize
  output [2 : 0] cpu_imem_master_awsize;

  // value method cpu_imem_master_aw_awburst
  output [1 : 0] cpu_imem_master_awburst;

  // value method cpu_imem_master_aw_awlock
  output cpu_imem_master_awlock;

  // value method cpu_imem_master_aw_awcache
  output [3 : 0] cpu_imem_master_awcache;

  // value method cpu_imem_master_aw_awprot
  output [2 : 0] cpu_imem_master_awprot;

  // value method cpu_imem_master_aw_awqos
  output [3 : 0] cpu_imem_master_awqos;

  // value method cpu_imem_master_aw_awregion
  output [3 : 0] cpu_imem_master_awregion;

  // value method cpu_imem_master_aw_awuser

  // value method cpu_imem_master_aw_awvalid
  output cpu_imem_master_awvalid;

  // action method cpu_imem_master_aw_awready
  input  cpu_imem_master_awready;

  // value method cpu_imem_master_w_wdata
  output [63 : 0] cpu_imem_master_wdata;

  // value method cpu_imem_master_w_wstrb
  output [7 : 0] cpu_imem_master_wstrb;

  // value method cpu_imem_master_w_wlast
  output cpu_imem_master_wlast;

  // value method cpu_imem_master_w_wuser

  // value method cpu_imem_master_w_wvalid
  output cpu_imem_master_wvalid;

  // action method cpu_imem_master_w_wready
  input  cpu_imem_master_wready;

  // action method cpu_imem_master_b_bflit
  input  [5 : 0] cpu_imem_master_bid;
  input  [1 : 0] cpu_imem_master_bresp;
  input  cpu_imem_master_bvalid;

  // value method cpu_imem_master_b_bready
  output cpu_imem_master_bready;

  // value method cpu_imem_master_ar_arid
  output [5 : 0] cpu_imem_master_arid;

  // value method cpu_imem_master_ar_araddr
  output [63 : 0] cpu_imem_master_araddr;

  // value method cpu_imem_master_ar_arlen
  output [7 : 0] cpu_imem_master_arlen;

  // value method cpu_imem_master_ar_arsize
  output [2 : 0] cpu_imem_master_arsize;

  // value method cpu_imem_master_ar_arburst
  output [1 : 0] cpu_imem_master_arburst;

  // value method cpu_imem_master_ar_arlock
  output cpu_imem_master_arlock;

  // value method cpu_imem_master_ar_arcache
  output [3 : 0] cpu_imem_master_arcache;

  // value method cpu_imem_master_ar_arprot
  output [2 : 0] cpu_imem_master_arprot;

  // value method cpu_imem_master_ar_arqos
  output [3 : 0] cpu_imem_master_arqos;

  // value method cpu_imem_master_ar_arregion
  output [3 : 0] cpu_imem_master_arregion;

  // value method cpu_imem_master_ar_aruser

  // value method cpu_imem_master_ar_arvalid
  output cpu_imem_master_arvalid;

  // action method cpu_imem_master_ar_arready
  input  cpu_imem_master_arready;

  // action method cpu_imem_master_r_rflit
  input  [5 : 0] cpu_imem_master_rid;
  input  [63 : 0] cpu_imem_master_rdata;
  input  [1 : 0] cpu_imem_master_rresp;
  input  cpu_imem_master_rlast;
  input  cpu_imem_master_rvalid;

  // value method cpu_imem_master_r_rready
  output cpu_imem_master_rready;

  // value method cpu_dmem_master_aw_awid
  output [5 : 0] cpu_dmem_master_awid;

  // value method cpu_dmem_master_aw_awaddr
  output [63 : 0] cpu_dmem_master_awaddr;

  // value method cpu_dmem_master_aw_awlen
  output [7 : 0] cpu_dmem_master_awlen;

  // value method cpu_dmem_master_aw_awsize
  output [2 : 0] cpu_dmem_master_awsize;

  // value method cpu_dmem_master_aw_awburst
  output [1 : 0] cpu_dmem_master_awburst;

  // value method cpu_dmem_master_aw_awlock
  output cpu_dmem_master_awlock;

  // value method cpu_dmem_master_aw_awcache
  output [3 : 0] cpu_dmem_master_awcache;

  // value method cpu_dmem_master_aw_awprot
  output [2 : 0] cpu_dmem_master_awprot;

  // value method cpu_dmem_master_aw_awqos
  output [3 : 0] cpu_dmem_master_awqos;

  // value method cpu_dmem_master_aw_awregion
  output [3 : 0] cpu_dmem_master_awregion;

  // value method cpu_dmem_master_aw_awuser

  // value method cpu_dmem_master_aw_awvalid
  output cpu_dmem_master_awvalid;

  // action method cpu_dmem_master_aw_awready
  input  cpu_dmem_master_awready;

  // value method cpu_dmem_master_w_wdata
  output [63 : 0] cpu_dmem_master_wdata;

  // value method cpu_dmem_master_w_wstrb
  output [7 : 0] cpu_dmem_master_wstrb;

  // value method cpu_dmem_master_w_wlast
  output cpu_dmem_master_wlast;

  // value method cpu_dmem_master_w_wuser

  // value method cpu_dmem_master_w_wvalid
  output cpu_dmem_master_wvalid;

  // action method cpu_dmem_master_w_wready
  input  cpu_dmem_master_wready;

  // action method cpu_dmem_master_b_bflit
  input  [5 : 0] cpu_dmem_master_bid;
  input  [1 : 0] cpu_dmem_master_bresp;
  input  cpu_dmem_master_bvalid;

  // value method cpu_dmem_master_b_bready
  output cpu_dmem_master_bready;

  // value method cpu_dmem_master_ar_arid
  output [5 : 0] cpu_dmem_master_arid;

  // value method cpu_dmem_master_ar_araddr
  output [63 : 0] cpu_dmem_master_araddr;

  // value method cpu_dmem_master_ar_arlen
  output [7 : 0] cpu_dmem_master_arlen;

  // value method cpu_dmem_master_ar_arsize
  output [2 : 0] cpu_dmem_master_arsize;

  // value method cpu_dmem_master_ar_arburst
  output [1 : 0] cpu_dmem_master_arburst;

  // value method cpu_dmem_master_ar_arlock
  output cpu_dmem_master_arlock;

  // value method cpu_dmem_master_ar_arcache
  output [3 : 0] cpu_dmem_master_arcache;

  // value method cpu_dmem_master_ar_arprot
  output [2 : 0] cpu_dmem_master_arprot;

  // value method cpu_dmem_master_ar_arqos
  output [3 : 0] cpu_dmem_master_arqos;

  // value method cpu_dmem_master_ar_arregion
  output [3 : 0] cpu_dmem_master_arregion;

  // value method cpu_dmem_master_ar_aruser

  // value method cpu_dmem_master_ar_arvalid
  output cpu_dmem_master_arvalid;

  // action method cpu_dmem_master_ar_arready
  input  cpu_dmem_master_arready;

  // action method cpu_dmem_master_r_rflit
  input  [5 : 0] cpu_dmem_master_rid;
  input  [63 : 0] cpu_dmem_master_rdata;
  input  [1 : 0] cpu_dmem_master_rresp;
  input  cpu_dmem_master_rlast;
  input  cpu_dmem_master_rvalid;

  // value method cpu_dmem_master_r_rready
  output cpu_dmem_master_rready;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  input  core_external_interrupt_sources_0_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  input  core_external_interrupt_sources_1_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  input  core_external_interrupt_sources_2_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  input  core_external_interrupt_sources_3_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  input  core_external_interrupt_sources_4_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  input  core_external_interrupt_sources_5_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  input  core_external_interrupt_sources_6_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  input  core_external_interrupt_sources_7_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  input  core_external_interrupt_sources_8_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  input  core_external_interrupt_sources_9_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  input  core_external_interrupt_sources_10_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  input  core_external_interrupt_sources_11_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  input  core_external_interrupt_sources_12_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  input  core_external_interrupt_sources_13_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  input  core_external_interrupt_sources_14_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  input  core_external_interrupt_sources_15_m_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // signals for module outputs
  wire [63 : 0] cpu_dmem_master_araddr,
		cpu_dmem_master_awaddr,
		cpu_dmem_master_wdata,
		cpu_imem_master_araddr,
		cpu_imem_master_awaddr,
		cpu_imem_master_wdata;
  wire [7 : 0] cpu_dmem_master_arlen,
	       cpu_dmem_master_awlen,
	       cpu_dmem_master_wstrb,
	       cpu_imem_master_arlen,
	       cpu_imem_master_awlen,
	       cpu_imem_master_wstrb;
  wire [5 : 0] cpu_dmem_master_arid,
	       cpu_dmem_master_awid,
	       cpu_imem_master_arid,
	       cpu_imem_master_awid;
  wire [3 : 0] cpu_dmem_master_arcache,
	       cpu_dmem_master_arqos,
	       cpu_dmem_master_arregion,
	       cpu_dmem_master_awcache,
	       cpu_dmem_master_awqos,
	       cpu_dmem_master_awregion,
	       cpu_imem_master_arcache,
	       cpu_imem_master_arqos,
	       cpu_imem_master_arregion,
	       cpu_imem_master_awcache,
	       cpu_imem_master_awqos,
	       cpu_imem_master_awregion;
  wire [2 : 0] cpu_dmem_master_arprot,
	       cpu_dmem_master_arsize,
	       cpu_dmem_master_awprot,
	       cpu_dmem_master_awsize,
	       cpu_imem_master_arprot,
	       cpu_imem_master_arsize,
	       cpu_imem_master_awprot,
	       cpu_imem_master_awsize;
  wire [1 : 0] cpu_dmem_master_arburst,
	       cpu_dmem_master_awburst,
	       cpu_imem_master_arburst,
	       cpu_imem_master_awburst;
  wire RDY_set_verbosity,
       RDY_start,
       cpu_dmem_master_arlock,
       cpu_dmem_master_arvalid,
       cpu_dmem_master_awlock,
       cpu_dmem_master_awvalid,
       cpu_dmem_master_bready,
       cpu_dmem_master_rready,
       cpu_dmem_master_wlast,
       cpu_dmem_master_wvalid,
       cpu_imem_master_arlock,
       cpu_imem_master_arvalid,
       cpu_imem_master_awlock,
       cpu_imem_master_awvalid,
       cpu_imem_master_bready,
       cpu_imem_master_rready,
       cpu_imem_master_wlast,
       cpu_imem_master_wvalid;

  // inlined wires
  wire [172 : 0] split_0_doPut$wget, split_1_doPut$wget, split_2_doPut$wget;
  wire [99 : 0] tagController_tmp_shimMaster_arff_rv$port0__write_1,
		tagController_tmp_shimMaster_arff_rv$port1__read,
		tagController_tmp_shimMaster_arff_rv$port2__read,
		tagController_tmp_shimMaster_awff_rv$port0__write_1,
		tagController_tmp_shimMaster_awff_rv$port1__read,
		tagController_tmp_shimMaster_awff_rv$port2__read;
  wire [98 : 0] tagController_tmp_shimSlave_arff_rv$port0__write_1,
		tagController_tmp_shimSlave_arff_rv$port1__read,
		tagController_tmp_shimSlave_arff_rv$port2__read,
		tagController_tmp_shimSlave_awff_rv$port0__write_1,
		tagController_tmp_shimSlave_awff_rv$port1__read,
		tagController_tmp_shimSlave_awff_rv$port2__read;
  wire [97 : 0] ssNoSynth_0_ar_buffer_enqw$wget,
		ssNoSynth_1_ar_buffer_enqw$wget,
		ssNoSynth_1_aw_buffer_enqw$wget,
		ssNoSynth_2_ar_buffer_enqw$wget,
		ssNoSynth_2_aw_buffer_enqw$wget,
		tagController_tmp_ug_slave_u_ar_putWire$wget,
		tagController_tmp_ug_slave_u_aw_putWire$wget,
		tmp1_u_ar_peekWire$wget,
		tmp1_u_aw_peekWire$wget;
  wire [96 : 0] ifcs_0_1_noRoute_currentReq$port0__write_1,
		ifcs_0_1_noRoute_currentReq$port1__read,
		ifcs_0_noRoute_inner_currentReq$port0__write_1,
		ifcs_0_noRoute_inner_currentReq$port1__read;
  wire [74 : 0] tagController_tmp_shimSlave_wff_rv$port0__write_1,
		tagController_tmp_shimSlave_wff_rv$port1__read,
		tagController_tmp_shimSlave_wff_rv$port2__read;
  wire [73 : 0] ssNoSynth_1_w_buffer_enqw$wget,
		ssNoSynth_2_w_buffer_enqw$wget,
		tagController_tmp_shimMaster_rff_rv$port0__write_1,
		tagController_tmp_shimMaster_rff_rv$port1__read,
		tagController_tmp_shimMaster_rff_rv$port2__read,
		tagController_tmp_shimMaster_wff_rv$port0__write_1,
		tagController_tmp_shimMaster_wff_rv$port1__read,
		tagController_tmp_shimMaster_wff_rv$port2__read,
		tagController_tmp_shimSlave_rff_rv$port0__write_1,
		tagController_tmp_shimSlave_rff_rv$port1__read,
		tagController_tmp_shimSlave_rff_rv$port2__read,
		tagController_tmp_ug_slave_u_w_putWire$wget,
		tmp1_u_w_peekWire$wget;
  wire [72 : 0] tagController_tmp_ug_master_u_r_putWire$wget,
		tagController_tmp_ug_slave_u_r_peekWire$wget,
		tmp0_r_buffer_enqw$wget;
  wire [71 : 0] msNoSynth_0_r_buffer_enqw$wget,
		msNoSynth_1_r_buffer_enqw$wget;
  wire [8 : 0] ifcs_0_1_noRoute_flitCount$port0__write_1,
	       ifcs_0_1_noRoute_flitCount$port1__write_1,
	       ifcs_0_1_noRoute_flitCount$port2__read,
	       ifcs_1_1_noRoute_flitCount$port1__write_1,
	       ifcs_1_1_noRoute_flitCount$port2__read,
	       tagController_tmp_shimMaster_bff_rv$port0__write_1,
	       tagController_tmp_shimMaster_bff_rv$port1__read,
	       tagController_tmp_shimMaster_bff_rv$port2__read;
  wire [7 : 0] tagController_tmp_shimSlave_bff_rv$port0__write_1,
	       tagController_tmp_shimSlave_bff_rv$port1__read,
	       tagController_tmp_shimSlave_bff_rv$port2__read,
	       tagController_tmp_ug_master_u_b_putWire$wget;
  wire [6 : 0] tagController_tmp_ug_slave_u_b_peekWire$wget,
	       tmp0_b_buffer_enqw$wget;
  wire [5 : 0] msNoSynth_0_b_buffer_enqw$wget, msNoSynth_1_b_buffer_enqw$wget;
  wire flitToSink_0$whas,
       flitToSink_1$whas,
       flitToSink_1_0$whas,
       flitToSink_1_0_1$whas,
       flitToSink_1_1$whas,
       flitToSink_1_1_0$whas,
       flitToSink_1_1_1$whas,
       flitToSink_1_1_1_1$whas,
       flitToSink_1_2$whas,
       flitToSink_2$whas,
       ifcs_0_noRoute_inner_currentReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$port1__read,
       ifcs_0_noRoute_inner_pendingReq$port2__read,
       merged_0_doDrop$whas,
       msNoSynth_0_ar_dwReady$whas,
       msNoSynth_0_b_buffer_enqw$whas,
       msNoSynth_0_r_buffer_enqw$whas,
       msNoSynth_0_w_dwReady$whas,
       msNoSynth_1_b_buffer_enqw$whas,
       msNoSynth_1_r_buffer_enqw$whas,
       reqWires_0$wget,
       reqWires_1$wget,
       reqWires_1_0$wget,
       reqWires_1_0_1$wget,
       reqWires_1_1$wget,
       reqWires_1_1_0$wget,
       reqWires_1_1_1$wget,
       reqWires_1_1_1_1$wget,
       reqWires_1_1_2$wget,
       reqWires_1_2$wget,
       sourceSelect_1_0$whas,
       sourceSelect_1_0_1$whas,
       sourceSelect_1_1$whas,
       sourceSelect_1_1_1$whas,
       sourceSelect_1_2$whas,
       ssNoSynth_0_b_dwReady$whas,
       ssNoSynth_0_r_dwReady$whas,
       ssNoSynth_0_w_buffer_enqw$whas,
       ssNoSynth_1_b_dwReady$whas,
       ssNoSynth_1_r_dwReady$whas,
       ssNoSynth_1_w_buffer_enqw$whas,
       ssNoSynth_2_b_dwReady$whas,
       ssNoSynth_2_r_dwReady$whas,
       ssNoSynth_2_w_buffer_enqw$whas,
       tagController_tmp_shimMaster_arff_rv$EN_port0__write,
       tagController_tmp_shimMaster_awff_rv$EN_port0__write,
       tagController_tmp_shimMaster_wff_rv$EN_port0__write,
       tagController_tmp_shimSlave_bff_rv$EN_port0__write,
       tagController_tmp_shimSlave_rff_rv$EN_port0__write,
       tagController_tmp_ug_master_u_ar_dropWire$whas,
       tagController_tmp_ug_master_u_aw_dropWire$whas,
       tagController_tmp_ug_master_u_b_putWire$whas,
       tagController_tmp_ug_master_u_r_putWire$whas,
       tagController_tmp_ug_master_u_w_dropWire$whas,
       tagController_tmp_ug_slave_u_ar_putWire$whas,
       tagController_tmp_ug_slave_u_aw_putWire$whas,
       tagController_tmp_ug_slave_u_b_dropWire$whas,
       tagController_tmp_ug_slave_u_r_dropWire$whas,
       tagController_tmp_ug_slave_u_w_putWire$whas,
       tmp1_u_ar_dropWire$whas,
       tmp1_u_aw_dropWire$whas,
       tmp1_u_b_putWire$whas,
       tmp1_u_r_putWire$whas,
       tmp1_u_w_dropWire$whas;

  // register activeSource_0
  reg activeSource_0;
  wire activeSource_0$D_IN, activeSource_0$EN;

  // register activeSource_1
  reg activeSource_1;
  wire activeSource_1$D_IN, activeSource_1$EN;

  // register activeSource_1_0
  reg activeSource_1_0;
  wire activeSource_1_0$D_IN, activeSource_1_0$EN;

  // register activeSource_1_0_1
  reg activeSource_1_0_1;
  wire activeSource_1_0_1$D_IN, activeSource_1_0_1$EN;

  // register activeSource_1_1
  reg activeSource_1_1;
  wire activeSource_1_1$D_IN, activeSource_1_1$EN;

  // register activeSource_1_1_0
  reg activeSource_1_1_0;
  reg activeSource_1_1_0$D_IN;
  wire activeSource_1_1_0$EN;

  // register activeSource_1_1_1
  reg activeSource_1_1_1;
  wire activeSource_1_1_1$D_IN, activeSource_1_1_1$EN;

  // register activeSource_1_1_1_1
  reg activeSource_1_1_1_1;
  reg activeSource_1_1_1_1$D_IN;
  wire activeSource_1_1_1_1$EN;

  // register activeSource_1_1_2
  reg activeSource_1_1_2;
  reg activeSource_1_1_2$D_IN;
  wire activeSource_1_1_2$EN;

  // register activeSource_1_2
  reg activeSource_1_2;
  wire activeSource_1_2$D_IN, activeSource_1_2$EN;

  // register arbiter_1_1_firstHot
  reg arbiter_1_1_firstHot;
  wire arbiter_1_1_firstHot$D_IN, arbiter_1_1_firstHot$EN;

  // register arbiter_1_1_lastSelect
  reg arbiter_1_1_lastSelect;
  wire arbiter_1_1_lastSelect$D_IN, arbiter_1_1_lastSelect$EN;

  // register arbiter_1_1_lastSelect_1
  reg arbiter_1_1_lastSelect_1;
  wire arbiter_1_1_lastSelect_1$D_IN, arbiter_1_1_lastSelect_1$EN;

  // register arbiter_1_firstHot
  reg arbiter_1_firstHot;
  wire arbiter_1_firstHot$D_IN, arbiter_1_firstHot$EN;

  // register arbiter_1_firstHot_1
  reg arbiter_1_firstHot_1;
  wire arbiter_1_firstHot_1$D_IN, arbiter_1_firstHot_1$EN;

  // register arbiter_1_lastSelect
  reg arbiter_1_lastSelect;
  wire arbiter_1_lastSelect$D_IN, arbiter_1_lastSelect$EN;

  // register arbiter_1_lastSelect_1
  reg arbiter_1_lastSelect_1;
  wire arbiter_1_lastSelect_1$D_IN, arbiter_1_lastSelect_1$EN;

  // register arbiter_1_lastSelect_2
  reg arbiter_1_lastSelect_2;
  wire arbiter_1_lastSelect_2$D_IN, arbiter_1_lastSelect_2$EN;

  // register arbiter_firstHot
  reg arbiter_firstHot;
  wire arbiter_firstHot$D_IN, arbiter_firstHot$EN;

  // register arbiter_lastSelect
  reg arbiter_lastSelect;
  wire arbiter_lastSelect$D_IN, arbiter_lastSelect$EN;

  // register ifcs_0_1_noRoute_currentReq
  reg [96 : 0] ifcs_0_1_noRoute_currentReq;
  wire [96 : 0] ifcs_0_1_noRoute_currentReq$D_IN;
  wire ifcs_0_1_noRoute_currentReq$EN;

  // register ifcs_0_1_noRoute_flitCount
  reg [8 : 0] ifcs_0_1_noRoute_flitCount;
  wire [8 : 0] ifcs_0_1_noRoute_flitCount$D_IN;
  wire ifcs_0_1_noRoute_flitCount$EN;

  // register ifcs_0_1_state
  reg [1 : 0] ifcs_0_1_state;
  wire [1 : 0] ifcs_0_1_state$D_IN;
  wire ifcs_0_1_state$EN;

  // register ifcs_0_1_state_1
  reg ifcs_0_1_state_1;
  wire ifcs_0_1_state_1$D_IN, ifcs_0_1_state_1$EN;

  // register ifcs_0_noRoute_inner_currentReq
  reg [96 : 0] ifcs_0_noRoute_inner_currentReq;
  wire [96 : 0] ifcs_0_noRoute_inner_currentReq$D_IN;
  wire ifcs_0_noRoute_inner_currentReq$EN;

  // register ifcs_0_noRoute_inner_pendingReq
  reg ifcs_0_noRoute_inner_pendingReq;
  wire ifcs_0_noRoute_inner_pendingReq$D_IN,
       ifcs_0_noRoute_inner_pendingReq$EN;

  // register ifcs_0_state
  reg [1 : 0] ifcs_0_state;
  reg [1 : 0] ifcs_0_state$D_IN;
  wire ifcs_0_state$EN;

  // register ifcs_0_state_1
  reg ifcs_0_state_1;
  wire ifcs_0_state_1$D_IN, ifcs_0_state_1$EN;

  // register ifcs_1_1_noRoute_currentReq
  reg [96 : 0] ifcs_1_1_noRoute_currentReq;
  wire [96 : 0] ifcs_1_1_noRoute_currentReq$D_IN;
  wire ifcs_1_1_noRoute_currentReq$EN;

  // register ifcs_1_1_noRoute_flitCount
  reg [8 : 0] ifcs_1_1_noRoute_flitCount;
  wire [8 : 0] ifcs_1_1_noRoute_flitCount$D_IN;
  wire ifcs_1_1_noRoute_flitCount$EN;

  // register ifcs_1_1_state
  reg [1 : 0] ifcs_1_1_state;
  wire [1 : 0] ifcs_1_1_state$D_IN;
  wire ifcs_1_1_state$EN;

  // register ifcs_1_1_state_1
  reg ifcs_1_1_state_1;
  wire ifcs_1_1_state_1$D_IN, ifcs_1_1_state_1$EN;

  // register ifcs_1_noRoute_inner_currentReq
  reg [96 : 0] ifcs_1_noRoute_inner_currentReq;
  wire [96 : 0] ifcs_1_noRoute_inner_currentReq$D_IN;
  wire ifcs_1_noRoute_inner_currentReq$EN;

  // register ifcs_1_noRoute_inner_pendingReq
  reg ifcs_1_noRoute_inner_pendingReq;
  wire ifcs_1_noRoute_inner_pendingReq$D_IN,
       ifcs_1_noRoute_inner_pendingReq$EN;

  // register ifcs_1_state
  reg [1 : 0] ifcs_1_state;
  wire [1 : 0] ifcs_1_state$D_IN;
  wire ifcs_1_state$EN;

  // register ifcs_1_state_1
  reg ifcs_1_state_1;
  wire ifcs_1_state_1$D_IN, ifcs_1_state_1$EN;

  // register ifcs_2_1_state
  reg ifcs_2_1_state;
  wire ifcs_2_1_state$D_IN, ifcs_2_1_state$EN;

  // register ifcs_2_state
  reg ifcs_2_state;
  wire ifcs_2_state$D_IN, ifcs_2_state$EN;

  // register merged_0_flitLeft
  reg [7 : 0] merged_0_flitLeft;
  wire [7 : 0] merged_0_flitLeft$D_IN;
  wire merged_0_flitLeft$EN;

  // register merged_1_flitLeft
  reg [7 : 0] merged_1_flitLeft;
  wire [7 : 0] merged_1_flitLeft$D_IN;
  wire merged_1_flitLeft$EN;

  // register split_0_flitLeft
  reg [7 : 0] split_0_flitLeft;
  wire [7 : 0] split_0_flitLeft$D_IN;
  wire split_0_flitLeft$EN;

  // register split_1_flitLeft
  reg [7 : 0] split_1_flitLeft;
  wire [7 : 0] split_1_flitLeft$D_IN;
  wire split_1_flitLeft$EN;

  // register split_2_flitLeft
  reg [7 : 0] split_2_flitLeft;
  wire [7 : 0] split_2_flitLeft$D_IN;
  wire split_2_flitLeft$EN;

  // register state
  reg state;
  wire state$D_IN, state$EN;

  // register state_1
  reg state_1;
  wire state_1$D_IN, state_1$EN;

  // register state_1_1
  reg state_1_1;
  wire state_1_1$D_IN, state_1_1$EN;

  // register state_1_1_1
  reg state_1_1_1;
  wire state_1_1_1$D_IN, state_1_1_1$EN;

  // register tagController_tmp_addrOffset
  reg [63 : 0] tagController_tmp_addrOffset;
  wire [63 : 0] tagController_tmp_addrOffset$D_IN;
  wire tagController_tmp_addrOffset$EN;

  // register tagController_tmp_doneSendingAW
  reg tagController_tmp_doneSendingAW;
  wire tagController_tmp_doneSendingAW$D_IN,
       tagController_tmp_doneSendingAW$EN;

  // register tagController_tmp_shimMaster_arff_rv
  reg [99 : 0] tagController_tmp_shimMaster_arff_rv;
  wire [99 : 0] tagController_tmp_shimMaster_arff_rv$D_IN;
  wire tagController_tmp_shimMaster_arff_rv$EN;

  // register tagController_tmp_shimMaster_awff_rv
  reg [99 : 0] tagController_tmp_shimMaster_awff_rv;
  wire [99 : 0] tagController_tmp_shimMaster_awff_rv$D_IN;
  wire tagController_tmp_shimMaster_awff_rv$EN;

  // register tagController_tmp_shimMaster_bff_rv
  reg [8 : 0] tagController_tmp_shimMaster_bff_rv;
  wire [8 : 0] tagController_tmp_shimMaster_bff_rv$D_IN;
  wire tagController_tmp_shimMaster_bff_rv$EN;

  // register tagController_tmp_shimMaster_rff_rv
  reg [73 : 0] tagController_tmp_shimMaster_rff_rv;
  wire [73 : 0] tagController_tmp_shimMaster_rff_rv$D_IN;
  wire tagController_tmp_shimMaster_rff_rv$EN;

  // register tagController_tmp_shimMaster_wff_rv
  reg [73 : 0] tagController_tmp_shimMaster_wff_rv;
  wire [73 : 0] tagController_tmp_shimMaster_wff_rv$D_IN;
  wire tagController_tmp_shimMaster_wff_rv$EN;

  // register tagController_tmp_shimSlave_arff_rv
  reg [98 : 0] tagController_tmp_shimSlave_arff_rv;
  wire [98 : 0] tagController_tmp_shimSlave_arff_rv$D_IN;
  wire tagController_tmp_shimSlave_arff_rv$EN;

  // register tagController_tmp_shimSlave_awff_rv
  reg [98 : 0] tagController_tmp_shimSlave_awff_rv;
  wire [98 : 0] tagController_tmp_shimSlave_awff_rv$D_IN;
  wire tagController_tmp_shimSlave_awff_rv$EN;

  // register tagController_tmp_shimSlave_bff_rv
  reg [7 : 0] tagController_tmp_shimSlave_bff_rv;
  wire [7 : 0] tagController_tmp_shimSlave_bff_rv$D_IN;
  wire tagController_tmp_shimSlave_bff_rv$EN;

  // register tagController_tmp_shimSlave_rff_rv
  reg [73 : 0] tagController_tmp_shimSlave_rff_rv;
  wire [73 : 0] tagController_tmp_shimSlave_rff_rv$D_IN;
  wire tagController_tmp_shimSlave_rff_rv$EN;

  // register tagController_tmp_shimSlave_wff_rv
  reg [74 : 0] tagController_tmp_shimSlave_wff_rv;
  wire [74 : 0] tagController_tmp_shimSlave_wff_rv$D_IN;
  wire tagController_tmp_shimSlave_wff_rv$EN;

  // ports of submodule ifcs_0_1_innerReq
  wire [97 : 0] ifcs_0_1_innerReq$D_IN, ifcs_0_1_innerReq$D_OUT;
  wire ifcs_0_1_innerReq$CLR,
       ifcs_0_1_innerReq$DEQ,
       ifcs_0_1_innerReq$EMPTY_N,
       ifcs_0_1_innerReq$ENQ,
       ifcs_0_1_innerReq$FULL_N;

  // ports of submodule ifcs_0_1_innerRoute
  wire [2 : 0] ifcs_0_1_innerRoute$D_IN, ifcs_0_1_innerRoute$D_OUT;
  wire ifcs_0_1_innerRoute$CLR,
       ifcs_0_1_innerRoute$DEQ,
       ifcs_0_1_innerRoute$EMPTY_N,
       ifcs_0_1_innerRoute$ENQ,
       ifcs_0_1_innerRoute$FULL_N;

  // ports of submodule ifcs_0_1_noRouteRsp
  wire [71 : 0] ifcs_0_1_noRouteRsp$D_IN, ifcs_0_1_noRouteRsp$D_OUT;
  wire ifcs_0_1_noRouteRsp$CLR,
       ifcs_0_1_noRouteRsp$DEQ,
       ifcs_0_1_noRouteRsp$EMPTY_N,
       ifcs_0_1_noRouteRsp$ENQ,
       ifcs_0_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_1_routeBack
  wire [1 : 0] ifcs_0_1_routeBack$D_IN, ifcs_0_1_routeBack$D_OUT;
  wire ifcs_0_1_routeBack$CLR,
       ifcs_0_1_routeBack$DEQ,
       ifcs_0_1_routeBack$EMPTY_N,
       ifcs_0_1_routeBack$ENQ,
       ifcs_0_1_routeBack$FULL_N;

  // ports of submodule ifcs_0_1_rspBack
  wire [71 : 0] ifcs_0_1_rspBack$D_IN, ifcs_0_1_rspBack$D_OUT;
  wire ifcs_0_1_rspBack$CLR,
       ifcs_0_1_rspBack$DEQ,
       ifcs_0_1_rspBack$EMPTY_N,
       ifcs_0_1_rspBack$ENQ,
       ifcs_0_1_rspBack$FULL_N;

  // ports of submodule ifcs_0_innerReq
  wire [172 : 0] ifcs_0_innerReq$D_IN, ifcs_0_innerReq$D_OUT;
  wire ifcs_0_innerReq$CLR,
       ifcs_0_innerReq$DEQ,
       ifcs_0_innerReq$EMPTY_N,
       ifcs_0_innerReq$ENQ,
       ifcs_0_innerReq$FULL_N;

  // ports of submodule ifcs_0_innerRoute
  wire [2 : 0] ifcs_0_innerRoute$D_IN, ifcs_0_innerRoute$D_OUT;
  wire ifcs_0_innerRoute$CLR,
       ifcs_0_innerRoute$DEQ,
       ifcs_0_innerRoute$EMPTY_N,
       ifcs_0_innerRoute$ENQ,
       ifcs_0_innerRoute$FULL_N;

  // ports of submodule ifcs_0_noRouteRsp
  wire [5 : 0] ifcs_0_noRouteRsp$D_IN, ifcs_0_noRouteRsp$D_OUT;
  wire ifcs_0_noRouteRsp$CLR,
       ifcs_0_noRouteRsp$DEQ,
       ifcs_0_noRouteRsp$EMPTY_N,
       ifcs_0_noRouteRsp$ENQ,
       ifcs_0_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_routeBack
  wire [1 : 0] ifcs_0_routeBack$D_IN, ifcs_0_routeBack$D_OUT;
  wire ifcs_0_routeBack$CLR,
       ifcs_0_routeBack$DEQ,
       ifcs_0_routeBack$EMPTY_N,
       ifcs_0_routeBack$ENQ,
       ifcs_0_routeBack$FULL_N;

  // ports of submodule ifcs_0_rspBack
  wire [5 : 0] ifcs_0_rspBack$D_IN, ifcs_0_rspBack$D_OUT;
  wire ifcs_0_rspBack$CLR,
       ifcs_0_rspBack$DEQ,
       ifcs_0_rspBack$EMPTY_N,
       ifcs_0_rspBack$ENQ,
       ifcs_0_rspBack$FULL_N;

  // ports of submodule ifcs_1_1_innerReq
  wire [97 : 0] ifcs_1_1_innerReq$D_IN, ifcs_1_1_innerReq$D_OUT;
  wire ifcs_1_1_innerReq$CLR,
       ifcs_1_1_innerReq$DEQ,
       ifcs_1_1_innerReq$EMPTY_N,
       ifcs_1_1_innerReq$ENQ;

  // ports of submodule ifcs_1_1_innerRoute
  wire [2 : 0] ifcs_1_1_innerRoute$D_IN, ifcs_1_1_innerRoute$D_OUT;
  wire ifcs_1_1_innerRoute$CLR,
       ifcs_1_1_innerRoute$DEQ,
       ifcs_1_1_innerRoute$EMPTY_N,
       ifcs_1_1_innerRoute$ENQ;

  // ports of submodule ifcs_1_1_noRouteRsp
  wire [71 : 0] ifcs_1_1_noRouteRsp$D_IN, ifcs_1_1_noRouteRsp$D_OUT;
  wire ifcs_1_1_noRouteRsp$CLR,
       ifcs_1_1_noRouteRsp$DEQ,
       ifcs_1_1_noRouteRsp$EMPTY_N,
       ifcs_1_1_noRouteRsp$ENQ,
       ifcs_1_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_1_1_routeBack
  wire [1 : 0] ifcs_1_1_routeBack$D_IN, ifcs_1_1_routeBack$D_OUT;
  wire ifcs_1_1_routeBack$CLR,
       ifcs_1_1_routeBack$DEQ,
       ifcs_1_1_routeBack$EMPTY_N,
       ifcs_1_1_routeBack$ENQ,
       ifcs_1_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_1_rspBack
  wire [71 : 0] ifcs_1_1_rspBack$D_IN, ifcs_1_1_rspBack$D_OUT;
  wire ifcs_1_1_rspBack$CLR,
       ifcs_1_1_rspBack$DEQ,
       ifcs_1_1_rspBack$EMPTY_N,
       ifcs_1_1_rspBack$ENQ,
       ifcs_1_1_rspBack$FULL_N;

  // ports of submodule ifcs_1_innerReq
  wire [172 : 0] ifcs_1_innerReq$D_IN, ifcs_1_innerReq$D_OUT;
  wire ifcs_1_innerReq$CLR,
       ifcs_1_innerReq$DEQ,
       ifcs_1_innerReq$EMPTY_N,
       ifcs_1_innerReq$ENQ;

  // ports of submodule ifcs_1_innerRoute
  wire [2 : 0] ifcs_1_innerRoute$D_IN, ifcs_1_innerRoute$D_OUT;
  wire ifcs_1_innerRoute$CLR,
       ifcs_1_innerRoute$DEQ,
       ifcs_1_innerRoute$EMPTY_N,
       ifcs_1_innerRoute$ENQ;

  // ports of submodule ifcs_1_noRouteRsp
  wire [5 : 0] ifcs_1_noRouteRsp$D_IN, ifcs_1_noRouteRsp$D_OUT;
  wire ifcs_1_noRouteRsp$CLR,
       ifcs_1_noRouteRsp$DEQ,
       ifcs_1_noRouteRsp$EMPTY_N,
       ifcs_1_noRouteRsp$ENQ;

  // ports of submodule ifcs_1_routeBack
  wire [1 : 0] ifcs_1_routeBack$D_IN, ifcs_1_routeBack$D_OUT;
  wire ifcs_1_routeBack$CLR,
       ifcs_1_routeBack$DEQ,
       ifcs_1_routeBack$EMPTY_N,
       ifcs_1_routeBack$ENQ,
       ifcs_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_rspBack
  wire [5 : 0] ifcs_1_rspBack$D_IN, ifcs_1_rspBack$D_OUT;
  wire ifcs_1_rspBack$CLR,
       ifcs_1_rspBack$DEQ,
       ifcs_1_rspBack$EMPTY_N,
       ifcs_1_rspBack$ENQ,
       ifcs_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_1_routeBack
  wire [1 : 0] ifcs_2_1_routeBack$D_IN, ifcs_2_1_routeBack$D_OUT;
  wire ifcs_2_1_routeBack$CLR,
       ifcs_2_1_routeBack$DEQ,
       ifcs_2_1_routeBack$EMPTY_N,
       ifcs_2_1_routeBack$ENQ,
       ifcs_2_1_routeBack$FULL_N;

  // ports of submodule ifcs_2_1_rspBack
  wire [71 : 0] ifcs_2_1_rspBack$D_IN, ifcs_2_1_rspBack$D_OUT;
  wire ifcs_2_1_rspBack$CLR,
       ifcs_2_1_rspBack$DEQ,
       ifcs_2_1_rspBack$EMPTY_N,
       ifcs_2_1_rspBack$ENQ,
       ifcs_2_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_routeBack
  wire [1 : 0] ifcs_2_routeBack$D_IN, ifcs_2_routeBack$D_OUT;
  wire ifcs_2_routeBack$CLR,
       ifcs_2_routeBack$DEQ,
       ifcs_2_routeBack$EMPTY_N,
       ifcs_2_routeBack$ENQ,
       ifcs_2_routeBack$FULL_N;

  // ports of submodule ifcs_2_rspBack
  wire [5 : 0] ifcs_2_rspBack$D_IN, ifcs_2_rspBack$D_OUT;
  wire ifcs_2_rspBack$CLR,
       ifcs_2_rspBack$DEQ,
       ifcs_2_rspBack$EMPTY_N,
       ifcs_2_rspBack$ENQ,
       ifcs_2_rspBack$FULL_N;

  // ports of submodule msNoSynth_0_b_buffer_ff
  wire [5 : 0] msNoSynth_0_b_buffer_ff$D_IN, msNoSynth_0_b_buffer_ff$D_OUT;
  wire msNoSynth_0_b_buffer_ff$CLR,
       msNoSynth_0_b_buffer_ff$DEQ,
       msNoSynth_0_b_buffer_ff$EMPTY_N,
       msNoSynth_0_b_buffer_ff$ENQ,
       msNoSynth_0_b_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_0_b_buffer_firstValid
  wire msNoSynth_0_b_buffer_firstValid$D_IN,
       msNoSynth_0_b_buffer_firstValid$EN,
       msNoSynth_0_b_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_0_r_buffer_ff
  wire [71 : 0] msNoSynth_0_r_buffer_ff$D_IN, msNoSynth_0_r_buffer_ff$D_OUT;
  wire msNoSynth_0_r_buffer_ff$CLR,
       msNoSynth_0_r_buffer_ff$DEQ,
       msNoSynth_0_r_buffer_ff$EMPTY_N,
       msNoSynth_0_r_buffer_ff$ENQ,
       msNoSynth_0_r_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_0_r_buffer_firstValid
  wire msNoSynth_0_r_buffer_firstValid$D_IN,
       msNoSynth_0_r_buffer_firstValid$EN,
       msNoSynth_0_r_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_1_b_buffer_ff
  wire [5 : 0] msNoSynth_1_b_buffer_ff$D_IN;
  wire msNoSynth_1_b_buffer_ff$CLR,
       msNoSynth_1_b_buffer_ff$DEQ,
       msNoSynth_1_b_buffer_ff$ENQ,
       msNoSynth_1_b_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_1_b_buffer_firstValid
  wire msNoSynth_1_b_buffer_firstValid$D_IN,
       msNoSynth_1_b_buffer_firstValid$EN;

  // ports of submodule msNoSynth_1_r_buffer_ff
  wire [71 : 0] msNoSynth_1_r_buffer_ff$D_IN;
  wire msNoSynth_1_r_buffer_ff$CLR,
       msNoSynth_1_r_buffer_ff$DEQ,
       msNoSynth_1_r_buffer_ff$ENQ,
       msNoSynth_1_r_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_1_r_buffer_firstValid
  wire msNoSynth_1_r_buffer_firstValid$D_IN,
       msNoSynth_1_r_buffer_firstValid$EN;

  // ports of submodule plic
  wire [63 : 0] plic$axi4_slave_araddr,
		plic$axi4_slave_awaddr,
		plic$axi4_slave_rdata,
		plic$axi4_slave_wdata,
		plic$set_addr_map_addr_base,
		plic$set_addr_map_addr_lim;
  wire [7 : 0] plic$axi4_slave_arlen,
	       plic$axi4_slave_awlen,
	       plic$axi4_slave_wstrb;
  wire [4 : 0] plic$axi4_slave_arid,
	       plic$axi4_slave_awid,
	       plic$axi4_slave_bid,
	       plic$axi4_slave_rid;
  wire [3 : 0] plic$axi4_slave_arcache,
	       plic$axi4_slave_arqos,
	       plic$axi4_slave_arregion,
	       plic$axi4_slave_awcache,
	       plic$axi4_slave_awqos,
	       plic$axi4_slave_awregion,
	       plic$set_verbosity_verbosity;
  wire [2 : 0] plic$axi4_slave_arprot,
	       plic$axi4_slave_arsize,
	       plic$axi4_slave_awprot,
	       plic$axi4_slave_awsize;
  wire [1 : 0] plic$axi4_slave_arburst,
	       plic$axi4_slave_awburst,
	       plic$axi4_slave_bresp,
	       plic$axi4_slave_rresp;
  wire plic$EN_server_reset_request_put,
       plic$EN_server_reset_response_get,
       plic$EN_set_addr_map,
       plic$EN_set_verbosity,
       plic$EN_show_PLIC_state,
       plic$axi4_slave_arlock,
       plic$axi4_slave_arready,
       plic$axi4_slave_arvalid,
       plic$axi4_slave_awlock,
       plic$axi4_slave_awready,
       plic$axi4_slave_awvalid,
       plic$axi4_slave_bready,
       plic$axi4_slave_bvalid,
       plic$axi4_slave_rlast,
       plic$axi4_slave_rready,
       plic$axi4_slave_ruser,
       plic$axi4_slave_rvalid,
       plic$axi4_slave_wlast,
       plic$axi4_slave_wready,
       plic$axi4_slave_wuser,
       plic$axi4_slave_wvalid,
       plic$v_sources_0_m_interrupt_req_set_not_clear,
       plic$v_sources_10_m_interrupt_req_set_not_clear,
       plic$v_sources_11_m_interrupt_req_set_not_clear,
       plic$v_sources_12_m_interrupt_req_set_not_clear,
       plic$v_sources_13_m_interrupt_req_set_not_clear,
       plic$v_sources_14_m_interrupt_req_set_not_clear,
       plic$v_sources_15_m_interrupt_req_set_not_clear,
       plic$v_sources_1_m_interrupt_req_set_not_clear,
       plic$v_sources_2_m_interrupt_req_set_not_clear,
       plic$v_sources_3_m_interrupt_req_set_not_clear,
       plic$v_sources_4_m_interrupt_req_set_not_clear,
       plic$v_sources_5_m_interrupt_req_set_not_clear,
       plic$v_sources_6_m_interrupt_req_set_not_clear,
       plic$v_sources_7_m_interrupt_req_set_not_clear,
       plic$v_sources_8_m_interrupt_req_set_not_clear,
       plic$v_sources_9_m_interrupt_req_set_not_clear,
       plic$v_targets_0_m_eip,
       plic$v_targets_1_m_eip;

  // ports of submodule proc
  wire [63 : 0] proc$debug_module_mem_server_araddr,
		proc$debug_module_mem_server_awaddr,
		proc$debug_module_mem_server_rdata,
		proc$debug_module_mem_server_wdata,
		proc$master0_araddr,
		proc$master0_awaddr,
		proc$master0_rdata,
		proc$master0_wdata,
		proc$master1_araddr,
		proc$master1_awaddr,
		proc$master1_rdata,
		proc$master1_wdata,
		proc$start_fromhostAddr,
		proc$start_startpc,
		proc$start_tohostAddr;
  wire [7 : 0] proc$debug_module_mem_server_arlen,
	       proc$debug_module_mem_server_awlen,
	       proc$debug_module_mem_server_wstrb,
	       proc$master0_arlen,
	       proc$master0_awlen,
	       proc$master0_wstrb,
	       proc$master1_arlen,
	       proc$master1_awlen,
	       proc$master1_wstrb;
  wire [4 : 0] proc$debug_module_mem_server_arid,
	       proc$debug_module_mem_server_awid,
	       proc$debug_module_mem_server_bid,
	       proc$debug_module_mem_server_rid,
	       proc$master0_arid,
	       proc$master0_awid,
	       proc$master0_bid,
	       proc$master0_rid;
  wire [3 : 0] proc$debug_module_mem_server_arcache,
	       proc$debug_module_mem_server_arqos,
	       proc$debug_module_mem_server_arregion,
	       proc$debug_module_mem_server_awcache,
	       proc$debug_module_mem_server_awqos,
	       proc$debug_module_mem_server_awregion,
	       proc$master0_arcache,
	       proc$master0_arqos,
	       proc$master0_arregion,
	       proc$master0_awcache,
	       proc$master0_awqos,
	       proc$master0_awregion,
	       proc$master1_arcache,
	       proc$master1_arid,
	       proc$master1_arqos,
	       proc$master1_arregion,
	       proc$master1_awcache,
	       proc$master1_awid,
	       proc$master1_awqos,
	       proc$master1_awregion,
	       proc$master1_bid,
	       proc$master1_rid,
	       proc$set_verbosity_verbosity;
  wire [2 : 0] proc$debug_module_mem_server_arprot,
	       proc$debug_module_mem_server_arsize,
	       proc$debug_module_mem_server_awprot,
	       proc$debug_module_mem_server_awsize,
	       proc$master0_arprot,
	       proc$master0_arsize,
	       proc$master0_awprot,
	       proc$master0_awsize,
	       proc$master1_arprot,
	       proc$master1_arsize,
	       proc$master1_awprot,
	       proc$master1_awsize;
  wire [1 : 0] proc$debug_module_mem_server_arburst,
	       proc$debug_module_mem_server_awburst,
	       proc$debug_module_mem_server_bresp,
	       proc$debug_module_mem_server_rresp,
	       proc$master0_arburst,
	       proc$master0_awburst,
	       proc$master0_bresp,
	       proc$master0_rresp,
	       proc$master1_arburst,
	       proc$master1_awburst,
	       proc$master1_bresp,
	       proc$master1_rresp;
  wire proc$EN_set_verbosity,
       proc$EN_start,
       proc$RDY_start,
       proc$debug_module_mem_server_arlock,
       proc$debug_module_mem_server_arready,
       proc$debug_module_mem_server_arvalid,
       proc$debug_module_mem_server_awlock,
       proc$debug_module_mem_server_awready,
       proc$debug_module_mem_server_awvalid,
       proc$debug_module_mem_server_bready,
       proc$debug_module_mem_server_bvalid,
       proc$debug_module_mem_server_rlast,
       proc$debug_module_mem_server_rready,
       proc$debug_module_mem_server_ruser,
       proc$debug_module_mem_server_rvalid,
       proc$debug_module_mem_server_wlast,
       proc$debug_module_mem_server_wready,
       proc$debug_module_mem_server_wuser,
       proc$debug_module_mem_server_wvalid,
       proc$m_external_interrupt_req_set_not_clear,
       proc$master0_arlock,
       proc$master0_arready,
       proc$master0_arvalid,
       proc$master0_awlock,
       proc$master0_awready,
       proc$master0_awvalid,
       proc$master0_bready,
       proc$master0_bvalid,
       proc$master0_rlast,
       proc$master0_rready,
       proc$master0_ruser,
       proc$master0_rvalid,
       proc$master0_wlast,
       proc$master0_wready,
       proc$master0_wuser,
       proc$master0_wvalid,
       proc$master1_arlock,
       proc$master1_arready,
       proc$master1_arvalid,
       proc$master1_awlock,
       proc$master1_awready,
       proc$master1_awvalid,
       proc$master1_bready,
       proc$master1_bvalid,
       proc$master1_rlast,
       proc$master1_rready,
       proc$master1_ruser,
       proc$master1_rvalid,
       proc$master1_wlast,
       proc$master1_wready,
       proc$master1_wuser,
       proc$master1_wvalid,
       proc$non_maskable_interrupt_req_set_not_clear,
       proc$s_external_interrupt_req_set_not_clear;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_mem0_controller_addr_range,
		 soc_map$m_plic_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // ports of submodule ssNoSynth_0_ar_buffer_ff
  wire [97 : 0] ssNoSynth_0_ar_buffer_ff$D_IN, ssNoSynth_0_ar_buffer_ff$D_OUT;
  wire ssNoSynth_0_ar_buffer_ff$CLR,
       ssNoSynth_0_ar_buffer_ff$DEQ,
       ssNoSynth_0_ar_buffer_ff$EMPTY_N,
       ssNoSynth_0_ar_buffer_ff$ENQ,
       ssNoSynth_0_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_ar_buffer_firstValid
  wire ssNoSynth_0_ar_buffer_firstValid$D_IN,
       ssNoSynth_0_ar_buffer_firstValid$EN,
       ssNoSynth_0_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_0_aw_buffer_ff
  wire [97 : 0] ssNoSynth_0_aw_buffer_ff$D_IN, ssNoSynth_0_aw_buffer_ff$D_OUT;
  wire ssNoSynth_0_aw_buffer_ff$CLR,
       ssNoSynth_0_aw_buffer_ff$DEQ,
       ssNoSynth_0_aw_buffer_ff$EMPTY_N,
       ssNoSynth_0_aw_buffer_ff$ENQ,
       ssNoSynth_0_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_aw_buffer_firstValid
  wire ssNoSynth_0_aw_buffer_firstValid$D_IN,
       ssNoSynth_0_aw_buffer_firstValid$EN,
       ssNoSynth_0_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_0_w_buffer_ff
  wire [73 : 0] ssNoSynth_0_w_buffer_ff$D_IN, ssNoSynth_0_w_buffer_ff$D_OUT;
  wire ssNoSynth_0_w_buffer_ff$CLR,
       ssNoSynth_0_w_buffer_ff$DEQ,
       ssNoSynth_0_w_buffer_ff$EMPTY_N,
       ssNoSynth_0_w_buffer_ff$ENQ,
       ssNoSynth_0_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_w_buffer_firstValid
  wire ssNoSynth_0_w_buffer_firstValid$D_IN,
       ssNoSynth_0_w_buffer_firstValid$EN,
       ssNoSynth_0_w_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_ar_buffer_ff
  wire [97 : 0] ssNoSynth_1_ar_buffer_ff$D_IN, ssNoSynth_1_ar_buffer_ff$D_OUT;
  wire ssNoSynth_1_ar_buffer_ff$CLR,
       ssNoSynth_1_ar_buffer_ff$DEQ,
       ssNoSynth_1_ar_buffer_ff$EMPTY_N,
       ssNoSynth_1_ar_buffer_ff$ENQ,
       ssNoSynth_1_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_ar_buffer_firstValid
  wire ssNoSynth_1_ar_buffer_firstValid$D_IN,
       ssNoSynth_1_ar_buffer_firstValid$EN,
       ssNoSynth_1_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_aw_buffer_ff
  wire [97 : 0] ssNoSynth_1_aw_buffer_ff$D_IN, ssNoSynth_1_aw_buffer_ff$D_OUT;
  wire ssNoSynth_1_aw_buffer_ff$CLR,
       ssNoSynth_1_aw_buffer_ff$DEQ,
       ssNoSynth_1_aw_buffer_ff$EMPTY_N,
       ssNoSynth_1_aw_buffer_ff$ENQ,
       ssNoSynth_1_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_aw_buffer_firstValid
  wire ssNoSynth_1_aw_buffer_firstValid$D_IN,
       ssNoSynth_1_aw_buffer_firstValid$EN,
       ssNoSynth_1_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_w_buffer_ff
  wire [73 : 0] ssNoSynth_1_w_buffer_ff$D_IN, ssNoSynth_1_w_buffer_ff$D_OUT;
  wire ssNoSynth_1_w_buffer_ff$CLR,
       ssNoSynth_1_w_buffer_ff$DEQ,
       ssNoSynth_1_w_buffer_ff$EMPTY_N,
       ssNoSynth_1_w_buffer_ff$ENQ,
       ssNoSynth_1_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_w_buffer_firstValid
  wire ssNoSynth_1_w_buffer_firstValid$D_IN,
       ssNoSynth_1_w_buffer_firstValid$EN,
       ssNoSynth_1_w_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_ar_buffer_ff
  wire [97 : 0] ssNoSynth_2_ar_buffer_ff$D_IN, ssNoSynth_2_ar_buffer_ff$D_OUT;
  wire ssNoSynth_2_ar_buffer_ff$CLR,
       ssNoSynth_2_ar_buffer_ff$DEQ,
       ssNoSynth_2_ar_buffer_ff$EMPTY_N,
       ssNoSynth_2_ar_buffer_ff$ENQ,
       ssNoSynth_2_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_ar_buffer_firstValid
  wire ssNoSynth_2_ar_buffer_firstValid$D_IN,
       ssNoSynth_2_ar_buffer_firstValid$EN,
       ssNoSynth_2_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_aw_buffer_ff
  wire [97 : 0] ssNoSynth_2_aw_buffer_ff$D_IN, ssNoSynth_2_aw_buffer_ff$D_OUT;
  wire ssNoSynth_2_aw_buffer_ff$CLR,
       ssNoSynth_2_aw_buffer_ff$DEQ,
       ssNoSynth_2_aw_buffer_ff$EMPTY_N,
       ssNoSynth_2_aw_buffer_ff$ENQ,
       ssNoSynth_2_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_aw_buffer_firstValid
  wire ssNoSynth_2_aw_buffer_firstValid$D_IN,
       ssNoSynth_2_aw_buffer_firstValid$EN,
       ssNoSynth_2_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_w_buffer_ff
  wire [73 : 0] ssNoSynth_2_w_buffer_ff$D_IN, ssNoSynth_2_w_buffer_ff$D_OUT;
  wire ssNoSynth_2_w_buffer_ff$CLR,
       ssNoSynth_2_w_buffer_ff$DEQ,
       ssNoSynth_2_w_buffer_ff$EMPTY_N,
       ssNoSynth_2_w_buffer_ff$ENQ,
       ssNoSynth_2_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_w_buffer_firstValid
  wire ssNoSynth_2_w_buffer_firstValid$D_IN,
       ssNoSynth_2_w_buffer_firstValid$EN,
       ssNoSynth_2_w_buffer_firstValid$Q_OUT;

  // ports of submodule tagController_tmp_awreqff
  wire [97 : 0] tagController_tmp_awreqff$D_IN,
		tagController_tmp_awreqff$D_OUT;
  wire tagController_tmp_awreqff$CLR,
       tagController_tmp_awreqff$DEQ,
       tagController_tmp_awreqff$EMPTY_N,
       tagController_tmp_awreqff$ENQ,
       tagController_tmp_awreqff$FULL_N;

  // ports of submodule tagController_tmp_newRst
  wire tagController_tmp_newRst$ASSERT_IN, tagController_tmp_newRst$OUT_RST;

  // ports of submodule tagController_tmp_tagCon
  wire [140 : 0] tagController_tmp_tagCon$cache_request_put_val,
		 tagController_tmp_tagCon$memory_request_get;
  wire [76 : 0] tagController_tmp_tagCon$cache_response_get,
		tagController_tmp_tagCon$memory_response_put_val;
  wire tagController_tmp_tagCon$EN_cache_request_put,
       tagController_tmp_tagCon$EN_cache_response_get,
       tagController_tmp_tagCon$EN_memory_request_get,
       tagController_tmp_tagCon$EN_memory_response_put,
       tagController_tmp_tagCon$RDY_cache_request_put,
       tagController_tmp_tagCon$RDY_cache_response_get,
       tagController_tmp_tagCon$RDY_memory_request_get,
       tagController_tmp_tagCon$RDY_memory_response_put;

  // ports of submodule tmp0_b_buffer_ff
  wire [6 : 0] tmp0_b_buffer_ff$D_IN, tmp0_b_buffer_ff$D_OUT;
  wire tmp0_b_buffer_ff$CLR,
       tmp0_b_buffer_ff$DEQ,
       tmp0_b_buffer_ff$EMPTY_N,
       tmp0_b_buffer_ff$ENQ,
       tmp0_b_buffer_ff$FULL_N;

  // ports of submodule tmp0_b_buffer_firstValid
  wire tmp0_b_buffer_firstValid$D_IN,
       tmp0_b_buffer_firstValid$EN,
       tmp0_b_buffer_firstValid$Q_OUT;

  // ports of submodule tmp0_r_buffer_ff
  wire [72 : 0] tmp0_r_buffer_ff$D_IN, tmp0_r_buffer_ff$D_OUT;
  wire tmp0_r_buffer_ff$CLR,
       tmp0_r_buffer_ff$DEQ,
       tmp0_r_buffer_ff$EMPTY_N,
       tmp0_r_buffer_ff$ENQ,
       tmp0_r_buffer_ff$FULL_N;

  // ports of submodule tmp0_r_buffer_firstValid
  wire tmp0_r_buffer_firstValid$D_IN,
       tmp0_r_buffer_firstValid$EN,
       tmp0_r_buffer_firstValid$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_arbitrate,
       CAN_FIRE_RL_arbitrate_1,
       CAN_FIRE_RL_arbitrate_2,
       CAN_FIRE_RL_arbitrate_3,
       CAN_FIRE_RL_burst,
       CAN_FIRE_RL_burst_1,
       CAN_FIRE_RL_burst_2,
       CAN_FIRE_RL_burst_3,
       CAN_FIRE_RL_burst_4,
       CAN_FIRE_RL_burst_5,
       CAN_FIRE_RL_burst_6,
       CAN_FIRE_RL_burst_7,
       CAN_FIRE_RL_burst_8,
       CAN_FIRE_RL_burst_9,
       CAN_FIRE_RL_checkSinkReady,
       CAN_FIRE_RL_checkSinkReady_1,
       CAN_FIRE_RL_checkSinkReady_2,
       CAN_FIRE_RL_checkSinkReady_3,
       CAN_FIRE_RL_checkSinkReady_4,
       CAN_FIRE_RL_checkSinkReady_5,
       CAN_FIRE_RL_checkSinkReady_6,
       CAN_FIRE_RL_checkSinkReady_7,
       CAN_FIRE_RL_checkSinkReady_8,
       CAN_FIRE_RL_checkSinkReady_9,
       CAN_FIRE_RL_craftReq,
       CAN_FIRE_RL_craftReq_1,
       CAN_FIRE_RL_craftReq_2,
       CAN_FIRE_RL_craftReq_3,
       CAN_FIRE_RL_craftReq_4,
       CAN_FIRE_RL_craftReq_5,
       CAN_FIRE_RL_craftReq_6,
       CAN_FIRE_RL_craftReq_7,
       CAN_FIRE_RL_craftReq_8,
       CAN_FIRE_RL_craftReq_9,
       CAN_FIRE_RL_ifcs_0_1_drainFlits,
       CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_1_firstFlit,
       CAN_FIRE_RL_ifcs_0_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_1_followFlits,
       CAN_FIRE_RL_ifcs_0_1_followFlits_1,
       CAN_FIRE_RL_ifcs_0_1_forwardRsp,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_0_drainFlits,
       CAN_FIRE_RL_ifcs_0_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_firstFlit,
       CAN_FIRE_RL_ifcs_0_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_followFlits,
       CAN_FIRE_RL_ifcs_0_followFlits_1,
       CAN_FIRE_RL_ifcs_0_forwardRsp,
       CAN_FIRE_RL_ifcs_0_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_1_forwardRsp,
       CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_forwardRsp,
       CAN_FIRE_RL_ifcs_2_1_firstFlit,
       CAN_FIRE_RL_ifcs_2_1_followFlits,
       CAN_FIRE_RL_ifcs_2_firstFlit,
       CAN_FIRE_RL_ifcs_2_followFlits,
       CAN_FIRE_RL_merged_0_genFirst,
       CAN_FIRE_RL_merged_0_genOther,
       CAN_FIRE_RL_msNoSynth_0_ar_forwardReady,
       CAN_FIRE_RL_msNoSynth_0_aw_forwardReady,
       CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_0_b_dropFlit,
       CAN_FIRE_RL_msNoSynth_0_b_forwardFlit,
       CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_0_r_dropFlit,
       CAN_FIRE_RL_msNoSynth_0_r_forwardFlit,
       CAN_FIRE_RL_msNoSynth_0_w_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue,
       CAN_FIRE_RL_rl_relay_external_interrupts,
       CAN_FIRE_RL_sink_selected,
       CAN_FIRE_RL_sink_selected_1,
       CAN_FIRE_RL_sink_selected_2,
       CAN_FIRE_RL_sink_selected_3,
       CAN_FIRE_RL_sink_selected_4,
       CAN_FIRE_RL_sink_selected_5,
       CAN_FIRE_RL_sink_selected_6,
       CAN_FIRE_RL_sink_selected_7,
       CAN_FIRE_RL_sink_selected_8,
       CAN_FIRE_RL_sink_selected_9,
       CAN_FIRE_RL_source_selected,
       CAN_FIRE_RL_source_selected_1,
       CAN_FIRE_RL_source_selected_2,
       CAN_FIRE_RL_source_selected_3,
       CAN_FIRE_RL_source_selected_4,
       CAN_FIRE_RL_source_selected_5,
       CAN_FIRE_RL_source_selected_6,
       CAN_FIRE_RL_source_selected_7,
       CAN_FIRE_RL_source_selected_8,
       CAN_FIRE_RL_source_selected_9,
       CAN_FIRE_RL_split_0_putFirst,
       CAN_FIRE_RL_split_0_putOther,
       CAN_FIRE_RL_split_1_putFirst,
       CAN_FIRE_RL_split_1_putOther,
       CAN_FIRE_RL_split_2_putFirst,
       CAN_FIRE_RL_split_2_putOther,
       CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_0_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_0_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_1_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_2_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit,
       CAN_FIRE_RL_tagController_tmp_getCacheAW,
       CAN_FIRE_RL_tagController_tmp_passCacheRead,
       CAN_FIRE_RL_tagController_tmp_passCacheResponse,
       CAN_FIRE_RL_tagController_tmp_passCacheWrite,
       CAN_FIRE_RL_tagController_tmp_passMemoryRequest,
       CAN_FIRE_RL_tagController_tmp_passMemoryResponseRead,
       CAN_FIRE_RL_tagController_tmp_passMemoryResponseWrite,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_b_doPut,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_r_doPut,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_w_doDrop,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_w_setPeek,
       CAN_FIRE_RL_tagController_tmp_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_w_doPut,
       CAN_FIRE_RL_tagController_tmp_ug_slave_u_w_warnDoPut,
       CAN_FIRE_RL_tmp0_ar_forwardReady,
       CAN_FIRE_RL_tmp0_aw_forwardReady,
       CAN_FIRE_RL_tmp0_b_buffer_dequeue,
       CAN_FIRE_RL_tmp0_b_buffer_enqueue,
       CAN_FIRE_RL_tmp0_b_dropFlit,
       CAN_FIRE_RL_tmp0_b_forwardFlit,
       CAN_FIRE_RL_tmp0_r_buffer_dequeue,
       CAN_FIRE_RL_tmp0_r_buffer_enqueue,
       CAN_FIRE_RL_tmp0_r_dropFlit,
       CAN_FIRE_RL_tmp0_r_forwardFlit,
       CAN_FIRE_RL_tmp0_w_forwardReady,
       CAN_FIRE_RL_tmp1_u_ar_doDrop,
       CAN_FIRE_RL_tmp1_u_ar_setPeek,
       CAN_FIRE_RL_tmp1_u_ar_warnDoDrop,
       CAN_FIRE_RL_tmp1_u_aw_doDrop,
       CAN_FIRE_RL_tmp1_u_aw_setPeek,
       CAN_FIRE_RL_tmp1_u_aw_warnDoDrop,
       CAN_FIRE_RL_tmp1_u_b_doPut,
       CAN_FIRE_RL_tmp1_u_b_warnDoPut,
       CAN_FIRE_RL_tmp1_u_r_doPut,
       CAN_FIRE_RL_tmp1_u_r_warnDoPut,
       CAN_FIRE_RL_tmp1_u_w_doDrop,
       CAN_FIRE_RL_tmp1_u_w_setPeek,
       CAN_FIRE_RL_tmp1_u_w_warnDoDrop,
       CAN_FIRE___me_check_121,
       CAN_FIRE___me_check_122,
       CAN_FIRE___me_check_123,
       CAN_FIRE___me_check_125,
       CAN_FIRE___me_check_130,
       CAN_FIRE___me_check_132,
       CAN_FIRE___me_check_134,
       CAN_FIRE___me_check_142,
       CAN_FIRE___me_check_144,
       CAN_FIRE___me_check_146,
       CAN_FIRE___me_check_155,
       CAN_FIRE___me_check_157,
       CAN_FIRE___me_check_159,
       CAN_FIRE___me_check_161,
       CAN_FIRE___me_check_163,
       CAN_FIRE___me_check_164,
       CAN_FIRE___me_check_165,
       CAN_FIRE___me_check_167,
       CAN_FIRE___me_check_173,
       CAN_FIRE___me_check_175,
       CAN_FIRE___me_check_177,
       CAN_FIRE___me_check_185,
       CAN_FIRE___me_check_187,
       CAN_FIRE___me_check_189,
       CAN_FIRE___me_check_198,
       CAN_FIRE___me_check_200,
       CAN_FIRE___me_check_202,
       CAN_FIRE___me_check_204,
       CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       CAN_FIRE_cpu_dmem_master_ar_arready,
       CAN_FIRE_cpu_dmem_master_aw_awready,
       CAN_FIRE_cpu_dmem_master_b_bflit,
       CAN_FIRE_cpu_dmem_master_r_rflit,
       CAN_FIRE_cpu_dmem_master_w_wready,
       CAN_FIRE_cpu_imem_master_ar_arready,
       CAN_FIRE_cpu_imem_master_aw_awready,
       CAN_FIRE_cpu_imem_master_b_bflit,
       CAN_FIRE_cpu_imem_master_r_rflit,
       CAN_FIRE_cpu_imem_master_w_wready,
       CAN_FIRE_nmi_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_start,
       WILL_FIRE_RL_arbitrate,
       WILL_FIRE_RL_arbitrate_1,
       WILL_FIRE_RL_arbitrate_2,
       WILL_FIRE_RL_arbitrate_3,
       WILL_FIRE_RL_burst,
       WILL_FIRE_RL_burst_1,
       WILL_FIRE_RL_burst_2,
       WILL_FIRE_RL_burst_3,
       WILL_FIRE_RL_burst_4,
       WILL_FIRE_RL_burst_5,
       WILL_FIRE_RL_burst_6,
       WILL_FIRE_RL_burst_7,
       WILL_FIRE_RL_burst_8,
       WILL_FIRE_RL_burst_9,
       WILL_FIRE_RL_checkSinkReady,
       WILL_FIRE_RL_checkSinkReady_1,
       WILL_FIRE_RL_checkSinkReady_2,
       WILL_FIRE_RL_checkSinkReady_3,
       WILL_FIRE_RL_checkSinkReady_4,
       WILL_FIRE_RL_checkSinkReady_5,
       WILL_FIRE_RL_checkSinkReady_6,
       WILL_FIRE_RL_checkSinkReady_7,
       WILL_FIRE_RL_checkSinkReady_8,
       WILL_FIRE_RL_checkSinkReady_9,
       WILL_FIRE_RL_craftReq,
       WILL_FIRE_RL_craftReq_1,
       WILL_FIRE_RL_craftReq_2,
       WILL_FIRE_RL_craftReq_3,
       WILL_FIRE_RL_craftReq_4,
       WILL_FIRE_RL_craftReq_5,
       WILL_FIRE_RL_craftReq_6,
       WILL_FIRE_RL_craftReq_7,
       WILL_FIRE_RL_craftReq_8,
       WILL_FIRE_RL_craftReq_9,
       WILL_FIRE_RL_ifcs_0_1_drainFlits,
       WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_1_firstFlit,
       WILL_FIRE_RL_ifcs_0_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_1_followFlits,
       WILL_FIRE_RL_ifcs_0_1_followFlits_1,
       WILL_FIRE_RL_ifcs_0_1_forwardRsp,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_0_drainFlits,
       WILL_FIRE_RL_ifcs_0_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_firstFlit,
       WILL_FIRE_RL_ifcs_0_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_followFlits,
       WILL_FIRE_RL_ifcs_0_followFlits_1,
       WILL_FIRE_RL_ifcs_0_forwardRsp,
       WILL_FIRE_RL_ifcs_0_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_1_forwardRsp,
       WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_forwardRsp,
       WILL_FIRE_RL_ifcs_2_1_firstFlit,
       WILL_FIRE_RL_ifcs_2_1_followFlits,
       WILL_FIRE_RL_ifcs_2_firstFlit,
       WILL_FIRE_RL_ifcs_2_followFlits,
       WILL_FIRE_RL_merged_0_genFirst,
       WILL_FIRE_RL_merged_0_genOther,
       WILL_FIRE_RL_msNoSynth_0_ar_forwardReady,
       WILL_FIRE_RL_msNoSynth_0_aw_forwardReady,
       WILL_FIRE_RL_msNoSynth_0_b_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_0_b_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_0_b_dropFlit,
       WILL_FIRE_RL_msNoSynth_0_b_forwardFlit,
       WILL_FIRE_RL_msNoSynth_0_r_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_0_r_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_0_r_dropFlit,
       WILL_FIRE_RL_msNoSynth_0_r_forwardFlit,
       WILL_FIRE_RL_msNoSynth_0_w_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_b_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_1_b_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_1_r_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_1_r_buffer_enqueue,
       WILL_FIRE_RL_rl_relay_external_interrupts,
       WILL_FIRE_RL_sink_selected,
       WILL_FIRE_RL_sink_selected_1,
       WILL_FIRE_RL_sink_selected_2,
       WILL_FIRE_RL_sink_selected_3,
       WILL_FIRE_RL_sink_selected_4,
       WILL_FIRE_RL_sink_selected_5,
       WILL_FIRE_RL_sink_selected_6,
       WILL_FIRE_RL_sink_selected_7,
       WILL_FIRE_RL_sink_selected_8,
       WILL_FIRE_RL_sink_selected_9,
       WILL_FIRE_RL_source_selected,
       WILL_FIRE_RL_source_selected_1,
       WILL_FIRE_RL_source_selected_2,
       WILL_FIRE_RL_source_selected_3,
       WILL_FIRE_RL_source_selected_4,
       WILL_FIRE_RL_source_selected_5,
       WILL_FIRE_RL_source_selected_6,
       WILL_FIRE_RL_source_selected_7,
       WILL_FIRE_RL_source_selected_8,
       WILL_FIRE_RL_source_selected_9,
       WILL_FIRE_RL_split_0_putFirst,
       WILL_FIRE_RL_split_0_putOther,
       WILL_FIRE_RL_split_1_putFirst,
       WILL_FIRE_RL_split_1_putOther,
       WILL_FIRE_RL_split_2_putFirst,
       WILL_FIRE_RL_split_2_putOther,
       WILL_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_0_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_0_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_0_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_1_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_1_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_w_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_2_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_2_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_w_forwardFlit,
       WILL_FIRE_RL_tagController_tmp_getCacheAW,
       WILL_FIRE_RL_tagController_tmp_passCacheRead,
       WILL_FIRE_RL_tagController_tmp_passCacheResponse,
       WILL_FIRE_RL_tagController_tmp_passCacheWrite,
       WILL_FIRE_RL_tagController_tmp_passMemoryRequest,
       WILL_FIRE_RL_tagController_tmp_passMemoryResponseRead,
       WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_b_doPut,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_r_doPut,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_w_doDrop,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_w_setPeek,
       WILL_FIRE_RL_tagController_tmp_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_w_doPut,
       WILL_FIRE_RL_tagController_tmp_ug_slave_u_w_warnDoPut,
       WILL_FIRE_RL_tmp0_ar_forwardReady,
       WILL_FIRE_RL_tmp0_aw_forwardReady,
       WILL_FIRE_RL_tmp0_b_buffer_dequeue,
       WILL_FIRE_RL_tmp0_b_buffer_enqueue,
       WILL_FIRE_RL_tmp0_b_dropFlit,
       WILL_FIRE_RL_tmp0_b_forwardFlit,
       WILL_FIRE_RL_tmp0_r_buffer_dequeue,
       WILL_FIRE_RL_tmp0_r_buffer_enqueue,
       WILL_FIRE_RL_tmp0_r_dropFlit,
       WILL_FIRE_RL_tmp0_r_forwardFlit,
       WILL_FIRE_RL_tmp0_w_forwardReady,
       WILL_FIRE_RL_tmp1_u_ar_doDrop,
       WILL_FIRE_RL_tmp1_u_ar_setPeek,
       WILL_FIRE_RL_tmp1_u_ar_warnDoDrop,
       WILL_FIRE_RL_tmp1_u_aw_doDrop,
       WILL_FIRE_RL_tmp1_u_aw_setPeek,
       WILL_FIRE_RL_tmp1_u_aw_warnDoDrop,
       WILL_FIRE_RL_tmp1_u_b_doPut,
       WILL_FIRE_RL_tmp1_u_b_warnDoPut,
       WILL_FIRE_RL_tmp1_u_r_doPut,
       WILL_FIRE_RL_tmp1_u_r_warnDoPut,
       WILL_FIRE_RL_tmp1_u_w_doDrop,
       WILL_FIRE_RL_tmp1_u_w_setPeek,
       WILL_FIRE_RL_tmp1_u_w_warnDoDrop,
       WILL_FIRE___me_check_121,
       WILL_FIRE___me_check_122,
       WILL_FIRE___me_check_123,
       WILL_FIRE___me_check_125,
       WILL_FIRE___me_check_130,
       WILL_FIRE___me_check_132,
       WILL_FIRE___me_check_134,
       WILL_FIRE___me_check_142,
       WILL_FIRE___me_check_144,
       WILL_FIRE___me_check_146,
       WILL_FIRE___me_check_155,
       WILL_FIRE___me_check_157,
       WILL_FIRE___me_check_159,
       WILL_FIRE___me_check_161,
       WILL_FIRE___me_check_163,
       WILL_FIRE___me_check_164,
       WILL_FIRE___me_check_165,
       WILL_FIRE___me_check_167,
       WILL_FIRE___me_check_173,
       WILL_FIRE___me_check_175,
       WILL_FIRE___me_check_177,
       WILL_FIRE___me_check_185,
       WILL_FIRE___me_check_187,
       WILL_FIRE___me_check_189,
       WILL_FIRE___me_check_198,
       WILL_FIRE___me_check_200,
       WILL_FIRE___me_check_202,
       WILL_FIRE___me_check_204,
       WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       WILL_FIRE_cpu_dmem_master_ar_arready,
       WILL_FIRE_cpu_dmem_master_aw_awready,
       WILL_FIRE_cpu_dmem_master_b_bflit,
       WILL_FIRE_cpu_dmem_master_r_rflit,
       WILL_FIRE_cpu_dmem_master_w_wready,
       WILL_FIRE_cpu_imem_master_ar_arready,
       WILL_FIRE_cpu_imem_master_aw_awready,
       WILL_FIRE_cpu_imem_master_b_bflit,
       WILL_FIRE_cpu_imem_master_r_rflit,
       WILL_FIRE_cpu_imem_master_w_wready,
       WILL_FIRE_nmi_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_start;

  // inputs to muxes for submodule ports
  reg [71 : 0] MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2,
	       MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2;
  reg [5 : 0] MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2,
	      MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2;
  wire [140 : 0] MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_1,
		 MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_2;
  wire [76 : 0] MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_1,
		MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_2;
  wire [7 : 0] MUX_merged_0_flitLeft$write_1__VAL_1,
	       MUX_split_0_flitLeft$write_1__VAL_1,
	       MUX_split_1_flitLeft$write_1__VAL_1,
	       MUX_split_2_flitLeft$write_1__VAL_1;
  wire MUX_activeSource_0$write_1__SEL_1,
       MUX_activeSource_0$write_1__VAL_1,
       MUX_activeSource_1$write_1__VAL_1,
       MUX_activeSource_1_1_0$write_1__SEL_1,
       MUX_activeSource_1_1_0$write_1__SEL_2,
       MUX_activeSource_1_1_0$write_1__SEL_3,
       MUX_activeSource_1_1_0$write_1__VAL_1,
       MUX_activeSource_1_1_1_1$write_1__VAL_1,
       MUX_activeSource_1_1_2$write_1__VAL_1,
       MUX_flitToSink_0$wset_1__SEL_1,
       MUX_flitToSink_0$wset_1__SEL_3,
       MUX_flitToSink_1$wset_1__SEL_1,
       MUX_flitToSink_1$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_0_1$wset_1__SEL_1,
       MUX_flitToSink_1_0_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_2$wset_1__SEL_1,
       MUX_flitToSink_1_2$wset_1__SEL_3,
       MUX_flitToSink_2$wset_1__SEL_1,
       MUX_flitToSink_2$wset_1__SEL_3,
       MUX_ifcs_0_1_state_1$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__PSEL_1,
       MUX_ifcs_0_state$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__SEL_2,
       MUX_ifcs_0_state$write_1__SEL_3,
       MUX_ifcs_1_1_state_1$write_1__SEL_1,
       MUX_ifcs_2_1_state$write_1__SEL_1,
       MUX_split_0_flitLeft$write_1__SEL_1,
       MUX_split_0_flitLeft$write_1__SEL_2,
       MUX_split_1_flitLeft$write_1__SEL_1,
       MUX_split_1_flitLeft$write_1__SEL_2,
       MUX_split_2_flitLeft$write_1__SEL_1,
       MUX_split_2_flitLeft$write_1__SEL_2,
       MUX_state$write_1__SEL_1,
       MUX_state$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_1,
       MUX_state_1_1_1$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h45074;
  reg [63 : 0] v__h44463;
  reg [63 : 0] v__h49083;
  reg [63 : 0] v__h48472;
  reg [63 : 0] v__h78834;
  reg [63 : 0] v__h78223;
  reg [63 : 0] v__h81727;
  reg [63 : 0] v__h81116;
  reg [63 : 0] v__h59778;
  reg [63 : 0] v__h59397;
  reg [63 : 0] v__h61848;
  reg [63 : 0] v__h61467;
  reg [63 : 0] v__h63747;
  reg [63 : 0] v__h63366;
  reg [63 : 0] v__h91007;
  reg [63 : 0] v__h90626;
  reg [63 : 0] v__h93498;
  reg [63 : 0] v__h93117;
  reg [63 : 0] v__h95808;
  reg [63 : 0] v__h95427;
  reg [31 : 0] v__h98199;
  reg [31 : 0] v__h98193;
  // synopsys translate_on

  // remaining internal signals
  wire [98 : 0] tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4,
		tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2;
  wire [72 : 0] tagController_tmp_shimMaster_wff_rvport1__rea_ETC__q3,
		tagController_tmp_shimSlave_rff_rvport1__read_ETC__q1;
  wire [63 : 0] araddr__h14146,
		aw_awaddr__h9414,
		tmp__h6972,
		tmp__h9197,
		v_araddr__h14163,
		x__h32032,
		x__h32067,
		x__h66323,
		x__h66348,
		x__h6813;
  wire [39 : 0] x__h9446;
  wire [8 : 0] x_port1__read__h67452;
  wire [7 : 0] arlen__h14147, v_arlen__h14164;
  wire [5 : 0] v_arid__h14162;
  wire [4 : 0] a_awid__h33202,
	       fatReq_arid__h66891,
	       tagController_tmp_ug_slave_u_b_peekWirewget_B_ETC__q26,
	       tagController_tmp_ug_slave_u_r_peekWirewget_B_ETC__q25;
  wire [3 : 0] _0_CONCAT_tagController_tmp_tagCon_memory_reque_ETC___d258,
	       arcache__h14151,
	       x__h11223,
	       x__h11235,
	       x__h11247,
	       x__h11259,
	       x__h11271,
	       x__h11283,
	       x__h11295,
	       x__h12819,
	       x__h14227,
	       x__h9489,
	       y__h11224,
	       y__h11236,
	       y__h11248,
	       y__h11260,
	       y__h11272,
	       y__h11284,
	       y__h11296;
  wire [2 : 0] aw_awsize_val__h11153, v_arsize_val__h14209;
  wire [1 : 0] IF_IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_m_ETC___d977,
	       IF_proc_master1_ar_araddr__520_BITS_63_TO_40_5_ETC___d1546,
	       SEXT_SEXT_arbiter_1_1_firstHot_941_942_BIT_0_9_ETC__q22,
	       SEXT_SEXT_arbiter_1_firstHot_1_756_757_BIT_0_7_ETC__q17,
	       SEXT_SEXT_arbiter_1_firstHot_359_360_BIT_0_361_ETC__q12,
	       SEXT_SEXT_arbiter_firstHot_164_165_BIT_0_166_A_ETC__q7,
	       SEXT_arbiter_1_1_firstHot__q19,
	       SEXT_arbiter_1_1_lastSelect_1__q21,
	       SEXT_arbiter_1_1_lastSelect__q20,
	       SEXT_arbiter_1_firstHot_1__q15,
	       SEXT_arbiter_1_firstHot__q9,
	       SEXT_arbiter_1_lastSelect_1__q11,
	       SEXT_arbiter_1_lastSelect_2__q16,
	       SEXT_arbiter_1_lastSelect__q10,
	       SEXT_arbiter_firstHot__q5,
	       SEXT_arbiter_lastSelect__q6,
	       SEXT_x3593__q8,
	       SEXT_x7359__q18,
	       SEXT_x8079__q13,
	       SEXT_x8113__q14,
	       SEXT_x9304__q23,
	       SEXT_x9338__q24;
  wire IF_NOT_ifcs_0_1_innerRoute_first__702_BIT_1_71_ETC___d1724,
       IF_NOT_ifcs_0_innerRoute_first__110_BIT_1_119__ETC___d1132,
       IF_NOT_ifcs_1_1_innerRoute_first__731_BIT_1_73_ETC___d1740,
       IF_NOT_ifcs_1_innerRoute_first__139_BIT_1_143__ETC___d1148,
       IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1976,
       IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1982,
       IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1988,
       IF_SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_7_ETC___d1776,
       IF_SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_7_ETC___d1780,
       IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1394,
       IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1400,
       IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1406,
       IF_SEXT_arbiter_lastSelect_160_161_BIT_0_162_A_ETC___d1184,
       IF_SEXT_arbiter_lastSelect_160_161_BIT_0_162_A_ETC___d1188,
       IF_merged_0_flitLeft_26_EQ_0_27_THEN_NOT_proc__ETC___d1012,
       IF_merged_0_flitLeft_26_EQ_0_27_THEN_NOT_proc__ETC___d936,
       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d929,
       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d950,
       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d953,
       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d958,
       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d961,
       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d965,
       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d970,
       IF_split_0_flitLeft_50_EQ_0_51_THEN_ssNoSynth__ETC___d1102,
       IF_split_1_flitLeft_79_EQ_0_80_THEN_ssNoSynth__ETC___d1103,
       IF_split_2_flitLeft_08_EQ_0_09_THEN_ssNoSynth__ETC___d1104,
       SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957,
       SEXT_arbiter_1_1_lastSelect_1_936_937_BIT_0_93_ETC___d1951,
       SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_934__ETC___d1945,
       SEXT_arbiter_1_firstHot_1_756_757_BIT_0_758_AN_ETC___d1764,
       SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375,
       SEXT_arbiter_1_lastSelect_1_354_355_BIT_0_356__ETC___d1369,
       SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_754__ETC___d1760,
       SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_AN_ETC___d1363,
       SEXT_arbiter_firstHot_164_165_BIT_0_166_AND_re_ETC___d1172,
       SEXT_arbiter_lastSelect_160_161_BIT_0_162_AND__ETC___d1168,
       proc_master1_ar_araddr__520_BITS_63_TO_40_521__ETC___d1534,
       proc_master1_ar_araddr__520_BITS_63_TO_40_521__ETC___d1539,
       proc_master1_ar_araddr__520_MINUS_soc_map_m_me_ETC___d1525,
       proc_master1_ar_araddr__520_MINUS_soc_map_m_pl_ETC___d1530,
       proc_master1_ar_araddr__520_ULT_soc_map_m_mem0_ETC___d1523,
       proc_master1_ar_araddr__520_ULT_soc_map_m_plic_ETC___d1528,
       reqWires_1_0_whas__336_AND_reqWires_1_0_wget___ETC___d1346,
       reqWires_1_1_0_whas__918_AND_reqWires_1_1_0_wg_ETC___d1928,
       split_0_doPut_whas__42_AND_split_0_doPut_wget__ETC___d849,
       split_1_doPut_whas__71_AND_split_1_doPut_wget__ETC___d878,
       split_2_doPut_whas__00_AND_split_2_doPut_wget__ETC___d907,
       state_157_AND_activeSource_0_230_231_AND_ifcs__ETC___d1233,
       state_157_AND_activeSource_1_274_275_AND_ifcs__ETC___d1277,
       state_1_1_1_929_AND_activeSource_1_1_0_023_024_ETC___d2026,
       state_1_1_1_929_AND_activeSource_1_1_1_1_059_0_ETC___d2062,
       state_1_1_1_929_AND_activeSource_1_1_2_095_096_ETC___d2098,
       state_1_1_749_AND_activeSource_1_0_1_816_817_A_ETC___d1819,
       state_1_1_749_AND_activeSource_1_1_1_856_857_A_ETC___d1859,
       state_1_347_AND_activeSource_1_0_435_436_AND_i_ETC___d1438,
       state_1_347_AND_activeSource_1_1_468_469_AND_i_ETC___d1471,
       state_1_347_AND_activeSource_1_2_502_503_AND_i_ETC___d1505,
       x__h43066,
       x__h43169,
       x__h43534,
       x__h43593,
       x__h43675,
       x__h57258,
       x__h57260,
       x__h57409,
       x__h57411,
       x__h57545,
       x__h57547,
       x__h58017,
       x__h58019,
       x__h58079,
       x__h58113,
       x__h58205,
       x__h58207,
       x__h58386,
       x__h58388,
       x__h76832,
       x__h76935,
       x__h77300,
       x__h77359,
       x__h77441,
       x__h88483,
       x__h88485,
       x__h88634,
       x__h88636,
       x__h88770,
       x__h88772,
       x__h89242,
       x__h89244,
       x__h89304,
       x__h89338,
       x__h89430,
       x__h89432,
       x__h89611,
       x__h89613,
       y__h43067,
       y__h43170,
       y__h43535,
       y__h43676,
       y__h57259,
       y__h57261,
       y__h57410,
       y__h57412,
       y__h57546,
       y__h57548,
       y__h58018,
       y__h58020,
       y__h58206,
       y__h58208,
       y__h58387,
       y__h58389,
       y__h76833,
       y__h76936,
       y__h77301,
       y__h77442,
       y__h88484,
       y__h88486,
       y__h88635,
       y__h88637,
       y__h88771,
       y__h88773,
       y__h89243,
       y__h89245,
       y__h89431,
       y__h89433,
       y__h89612,
       y__h89614;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method start
  assign RDY_start = proc$RDY_start ;
  assign CAN_FIRE_start = proc$RDY_start ;
  assign WILL_FIRE_start = EN_start ;

  // value method cpu_imem_master_aw_awid
  assign cpu_imem_master_awid = { 1'd0, tmp1_u_aw_peekWire$wget[97:93] } ;

  // value method cpu_imem_master_aw_awaddr
  assign cpu_imem_master_awaddr = tmp1_u_aw_peekWire$wget[92:29] ;

  // value method cpu_imem_master_aw_awlen
  assign cpu_imem_master_awlen = tmp1_u_aw_peekWire$wget[28:21] ;

  // value method cpu_imem_master_aw_awsize
  assign cpu_imem_master_awsize = tmp1_u_aw_peekWire$wget[20:18] ;

  // value method cpu_imem_master_aw_awburst
  assign cpu_imem_master_awburst = tmp1_u_aw_peekWire$wget[17:16] ;

  // value method cpu_imem_master_aw_awlock
  assign cpu_imem_master_awlock = tmp1_u_aw_peekWire$wget[15] ;

  // value method cpu_imem_master_aw_awcache
  assign cpu_imem_master_awcache = tmp1_u_aw_peekWire$wget[14:11] ;

  // value method cpu_imem_master_aw_awprot
  assign cpu_imem_master_awprot = tmp1_u_aw_peekWire$wget[10:8] ;

  // value method cpu_imem_master_aw_awqos
  assign cpu_imem_master_awqos = tmp1_u_aw_peekWire$wget[7:4] ;

  // value method cpu_imem_master_aw_awregion
  assign cpu_imem_master_awregion = tmp1_u_aw_peekWire$wget[3:0] ;

  // value method cpu_imem_master_aw_awvalid
  assign cpu_imem_master_awvalid = proc$master0_awvalid ;

  // action method cpu_imem_master_aw_awready
  assign CAN_FIRE_cpu_imem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_aw_awready = 1'd1 ;

  // value method cpu_imem_master_w_wdata
  assign cpu_imem_master_wdata = tmp1_u_w_peekWire$wget[73:10] ;

  // value method cpu_imem_master_w_wstrb
  assign cpu_imem_master_wstrb = tmp1_u_w_peekWire$wget[9:2] ;

  // value method cpu_imem_master_w_wlast
  assign cpu_imem_master_wlast = tmp1_u_w_peekWire$wget[1] ;

  // value method cpu_imem_master_w_wvalid
  assign cpu_imem_master_wvalid = proc$master0_wvalid ;

  // action method cpu_imem_master_w_wready
  assign CAN_FIRE_cpu_imem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_w_wready = 1'd1 ;

  // action method cpu_imem_master_b_bflit
  assign CAN_FIRE_cpu_imem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_b_bflit = cpu_imem_master_bvalid ;

  // value method cpu_imem_master_b_bready
  assign cpu_imem_master_bready = tmp0_b_buffer_ff$FULL_N ;

  // value method cpu_imem_master_ar_arid
  assign cpu_imem_master_arid = { 1'd0, tmp1_u_ar_peekWire$wget[97:93] } ;

  // value method cpu_imem_master_ar_araddr
  assign cpu_imem_master_araddr = tmp1_u_ar_peekWire$wget[92:29] ;

  // value method cpu_imem_master_ar_arlen
  assign cpu_imem_master_arlen = tmp1_u_ar_peekWire$wget[28:21] ;

  // value method cpu_imem_master_ar_arsize
  assign cpu_imem_master_arsize = tmp1_u_ar_peekWire$wget[20:18] ;

  // value method cpu_imem_master_ar_arburst
  assign cpu_imem_master_arburst = tmp1_u_ar_peekWire$wget[17:16] ;

  // value method cpu_imem_master_ar_arlock
  assign cpu_imem_master_arlock = tmp1_u_ar_peekWire$wget[15] ;

  // value method cpu_imem_master_ar_arcache
  assign cpu_imem_master_arcache = tmp1_u_ar_peekWire$wget[14:11] ;

  // value method cpu_imem_master_ar_arprot
  assign cpu_imem_master_arprot = tmp1_u_ar_peekWire$wget[10:8] ;

  // value method cpu_imem_master_ar_arqos
  assign cpu_imem_master_arqos = tmp1_u_ar_peekWire$wget[7:4] ;

  // value method cpu_imem_master_ar_arregion
  assign cpu_imem_master_arregion = tmp1_u_ar_peekWire$wget[3:0] ;

  // value method cpu_imem_master_ar_arvalid
  assign cpu_imem_master_arvalid = proc$master0_arvalid ;

  // action method cpu_imem_master_ar_arready
  assign CAN_FIRE_cpu_imem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_ar_arready = 1'd1 ;

  // action method cpu_imem_master_r_rflit
  assign CAN_FIRE_cpu_imem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_r_rflit = cpu_imem_master_rvalid ;

  // value method cpu_imem_master_r_rready
  assign cpu_imem_master_rready = tmp0_r_buffer_ff$FULL_N ;

  // value method cpu_dmem_master_aw_awid
  assign cpu_dmem_master_awid =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[98:93] ;

  // value method cpu_dmem_master_aw_awaddr
  assign cpu_dmem_master_awaddr =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[92:29] ;

  // value method cpu_dmem_master_aw_awlen
  assign cpu_dmem_master_awlen =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[28:21] ;

  // value method cpu_dmem_master_aw_awsize
  assign cpu_dmem_master_awsize =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[20:18] ;

  // value method cpu_dmem_master_aw_awburst
  assign cpu_dmem_master_awburst =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[17:16] ;

  // value method cpu_dmem_master_aw_awlock
  assign cpu_dmem_master_awlock =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[15] ;

  // value method cpu_dmem_master_aw_awcache
  assign cpu_dmem_master_awcache =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[14:11] ;

  // value method cpu_dmem_master_aw_awprot
  assign cpu_dmem_master_awprot =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[10:8] ;

  // value method cpu_dmem_master_aw_awqos
  assign cpu_dmem_master_awqos =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[7:4] ;

  // value method cpu_dmem_master_aw_awregion
  assign cpu_dmem_master_awregion =
	     tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2[3:0] ;

  // value method cpu_dmem_master_aw_awvalid
  assign cpu_dmem_master_awvalid =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_setPeek ;

  // action method cpu_dmem_master_aw_awready
  assign CAN_FIRE_cpu_dmem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_aw_awready = 1'd1 ;

  // value method cpu_dmem_master_w_wdata
  assign cpu_dmem_master_wdata =
	     tagController_tmp_shimMaster_wff_rvport1__rea_ETC__q3[72:9] ;

  // value method cpu_dmem_master_w_wstrb
  assign cpu_dmem_master_wstrb =
	     tagController_tmp_shimMaster_wff_rvport1__rea_ETC__q3[8:1] ;

  // value method cpu_dmem_master_w_wlast
  assign cpu_dmem_master_wlast =
	     tagController_tmp_shimMaster_wff_rvport1__rea_ETC__q3[0] ;

  // value method cpu_dmem_master_w_wvalid
  assign cpu_dmem_master_wvalid =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_w_setPeek ;

  // action method cpu_dmem_master_w_wready
  assign CAN_FIRE_cpu_dmem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_w_wready = 1'd1 ;

  // action method cpu_dmem_master_b_bflit
  assign CAN_FIRE_cpu_dmem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_b_bflit = cpu_dmem_master_bvalid ;

  // value method cpu_dmem_master_b_bready
  assign cpu_dmem_master_bready = !tagController_tmp_shimMaster_bff_rv[8] ;

  // value method cpu_dmem_master_ar_arid
  assign cpu_dmem_master_arid =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[98:93] ;

  // value method cpu_dmem_master_ar_araddr
  assign cpu_dmem_master_araddr =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[92:29] ;

  // value method cpu_dmem_master_ar_arlen
  assign cpu_dmem_master_arlen =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[28:21] ;

  // value method cpu_dmem_master_ar_arsize
  assign cpu_dmem_master_arsize =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[20:18] ;

  // value method cpu_dmem_master_ar_arburst
  assign cpu_dmem_master_arburst =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[17:16] ;

  // value method cpu_dmem_master_ar_arlock
  assign cpu_dmem_master_arlock =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[15] ;

  // value method cpu_dmem_master_ar_arcache
  assign cpu_dmem_master_arcache =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[14:11] ;

  // value method cpu_dmem_master_ar_arprot
  assign cpu_dmem_master_arprot =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[10:8] ;

  // value method cpu_dmem_master_ar_arqos
  assign cpu_dmem_master_arqos =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[7:4] ;

  // value method cpu_dmem_master_ar_arregion
  assign cpu_dmem_master_arregion =
	     tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4[3:0] ;

  // value method cpu_dmem_master_ar_arvalid
  assign cpu_dmem_master_arvalid =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_setPeek ;

  // action method cpu_dmem_master_ar_arready
  assign CAN_FIRE_cpu_dmem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_ar_arready = 1'd1 ;

  // action method cpu_dmem_master_r_rflit
  assign CAN_FIRE_cpu_dmem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_r_rflit = cpu_dmem_master_rvalid ;

  // value method cpu_dmem_master_r_rready
  assign cpu_dmem_master_rready = !tagController_tmp_shimMaster_rff_rv[73] ;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // submodule ifcs_0_1_innerReq
  FIFO2 #(.width(32'd98), .guarded(32'd1)) ifcs_0_1_innerReq(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_innerReq$D_IN),
							     .ENQ(ifcs_0_1_innerReq$ENQ),
							     .DEQ(ifcs_0_1_innerReq$DEQ),
							     .CLR(ifcs_0_1_innerReq$CLR),
							     .D_OUT(ifcs_0_1_innerReq$D_OUT),
							     .FULL_N(ifcs_0_1_innerReq$FULL_N),
							     .EMPTY_N(ifcs_0_1_innerReq$EMPTY_N));

  // submodule ifcs_0_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_0_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_0_1_innerRoute$D_IN),
							      .ENQ(ifcs_0_1_innerRoute$ENQ),
							      .DEQ(ifcs_0_1_innerRoute$DEQ),
							      .CLR(ifcs_0_1_innerRoute$CLR),
							      .D_OUT(ifcs_0_1_innerRoute$D_OUT),
							      .FULL_N(ifcs_0_1_innerRoute$FULL_N),
							      .EMPTY_N(ifcs_0_1_innerRoute$EMPTY_N));

  // submodule ifcs_0_1_noRouteRsp
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_0_1_noRouteRsp(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(ifcs_0_1_noRouteRsp$D_IN),
							       .ENQ(ifcs_0_1_noRouteRsp$ENQ),
							       .DEQ(ifcs_0_1_noRouteRsp$DEQ),
							       .CLR(ifcs_0_1_noRouteRsp$CLR),
							       .D_OUT(ifcs_0_1_noRouteRsp$D_OUT),
							       .FULL_N(ifcs_0_1_noRouteRsp$FULL_N),
							       .EMPTY_N(ifcs_0_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_routeBack$D_IN),
							     .ENQ(ifcs_0_1_routeBack$ENQ),
							     .DEQ(ifcs_0_1_routeBack$DEQ),
							     .CLR(ifcs_0_1_routeBack$CLR),
							     .D_OUT(ifcs_0_1_routeBack$D_OUT),
							     .FULL_N(ifcs_0_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_0_1_routeBack$EMPTY_N));

  // submodule ifcs_0_1_rspBack
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_0_1_rspBack(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_1_rspBack$D_IN),
							    .ENQ(ifcs_0_1_rspBack$ENQ),
							    .DEQ(ifcs_0_1_rspBack$DEQ),
							    .CLR(ifcs_0_1_rspBack$CLR),
							    .D_OUT(ifcs_0_1_rspBack$D_OUT),
							    .FULL_N(ifcs_0_1_rspBack$FULL_N),
							    .EMPTY_N(ifcs_0_1_rspBack$EMPTY_N));

  // submodule ifcs_0_innerReq
  FIFO2 #(.width(32'd173), .guarded(32'd1)) ifcs_0_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerReq$D_IN),
							    .ENQ(ifcs_0_innerReq$ENQ),
							    .DEQ(ifcs_0_innerReq$DEQ),
							    .CLR(ifcs_0_innerReq$CLR),
							    .D_OUT(ifcs_0_innerReq$D_OUT),
							    .FULL_N(ifcs_0_innerReq$FULL_N),
							    .EMPTY_N(ifcs_0_innerReq$EMPTY_N));

  // submodule ifcs_0_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_0_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerRoute$D_IN),
							    .ENQ(ifcs_0_innerRoute$ENQ),
							    .DEQ(ifcs_0_innerRoute$DEQ),
							    .CLR(ifcs_0_innerRoute$CLR),
							    .D_OUT(ifcs_0_innerRoute$D_OUT),
							    .FULL_N(ifcs_0_innerRoute$FULL_N),
							    .EMPTY_N(ifcs_0_innerRoute$EMPTY_N));

  // submodule ifcs_0_noRouteRsp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_0_noRouteRsp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_noRouteRsp$D_IN),
							    .ENQ(ifcs_0_noRouteRsp$ENQ),
							    .DEQ(ifcs_0_noRouteRsp$DEQ),
							    .CLR(ifcs_0_noRouteRsp$CLR),
							    .D_OUT(ifcs_0_noRouteRsp$D_OUT),
							    .FULL_N(ifcs_0_noRouteRsp$FULL_N),
							    .EMPTY_N(ifcs_0_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_0_routeBack$D_IN),
							   .ENQ(ifcs_0_routeBack$ENQ),
							   .DEQ(ifcs_0_routeBack$DEQ),
							   .CLR(ifcs_0_routeBack$CLR),
							   .D_OUT(ifcs_0_routeBack$D_OUT),
							   .FULL_N(ifcs_0_routeBack$FULL_N),
							   .EMPTY_N(ifcs_0_routeBack$EMPTY_N));

  // submodule ifcs_0_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_0_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_0_rspBack$D_IN),
							 .ENQ(ifcs_0_rspBack$ENQ),
							 .DEQ(ifcs_0_rspBack$DEQ),
							 .CLR(ifcs_0_rspBack$CLR),
							 .D_OUT(ifcs_0_rspBack$D_OUT),
							 .FULL_N(ifcs_0_rspBack$FULL_N),
							 .EMPTY_N(ifcs_0_rspBack$EMPTY_N));

  // submodule ifcs_1_1_innerReq
  FIFO2 #(.width(32'd98), .guarded(32'd1)) ifcs_1_1_innerReq(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_innerReq$D_IN),
							     .ENQ(ifcs_1_1_innerReq$ENQ),
							     .DEQ(ifcs_1_1_innerReq$DEQ),
							     .CLR(ifcs_1_1_innerReq$CLR),
							     .D_OUT(ifcs_1_1_innerReq$D_OUT),
							     .FULL_N(),
							     .EMPTY_N(ifcs_1_1_innerReq$EMPTY_N));

  // submodule ifcs_1_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_1_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_1_1_innerRoute$D_IN),
							      .ENQ(ifcs_1_1_innerRoute$ENQ),
							      .DEQ(ifcs_1_1_innerRoute$DEQ),
							      .CLR(ifcs_1_1_innerRoute$CLR),
							      .D_OUT(ifcs_1_1_innerRoute$D_OUT),
							      .FULL_N(),
							      .EMPTY_N(ifcs_1_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_1_noRouteRsp
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_1_1_noRouteRsp(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(ifcs_1_1_noRouteRsp$D_IN),
							       .ENQ(ifcs_1_1_noRouteRsp$ENQ),
							       .DEQ(ifcs_1_1_noRouteRsp$DEQ),
							       .CLR(ifcs_1_1_noRouteRsp$CLR),
							       .D_OUT(ifcs_1_1_noRouteRsp$D_OUT),
							       .FULL_N(ifcs_1_1_noRouteRsp$FULL_N),
							       .EMPTY_N(ifcs_1_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_routeBack$D_IN),
							     .ENQ(ifcs_1_1_routeBack$ENQ),
							     .DEQ(ifcs_1_1_routeBack$DEQ),
							     .CLR(ifcs_1_1_routeBack$CLR),
							     .D_OUT(ifcs_1_1_routeBack$D_OUT),
							     .FULL_N(ifcs_1_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_1_1_routeBack$EMPTY_N));

  // submodule ifcs_1_1_rspBack
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_1_1_rspBack(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_1_rspBack$D_IN),
							    .ENQ(ifcs_1_1_rspBack$ENQ),
							    .DEQ(ifcs_1_1_rspBack$DEQ),
							    .CLR(ifcs_1_1_rspBack$CLR),
							    .D_OUT(ifcs_1_1_rspBack$D_OUT),
							    .FULL_N(ifcs_1_1_rspBack$FULL_N),
							    .EMPTY_N(ifcs_1_1_rspBack$EMPTY_N));

  // submodule ifcs_1_innerReq
  FIFO2 #(.width(32'd173), .guarded(32'd1)) ifcs_1_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerReq$D_IN),
							    .ENQ(ifcs_1_innerReq$ENQ),
							    .DEQ(ifcs_1_innerReq$DEQ),
							    .CLR(ifcs_1_innerReq$CLR),
							    .D_OUT(ifcs_1_innerReq$D_OUT),
							    .FULL_N(),
							    .EMPTY_N(ifcs_1_innerReq$EMPTY_N));

  // submodule ifcs_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_1_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerRoute$D_IN),
							    .ENQ(ifcs_1_innerRoute$ENQ),
							    .DEQ(ifcs_1_innerRoute$DEQ),
							    .CLR(ifcs_1_innerRoute$CLR),
							    .D_OUT(ifcs_1_innerRoute$D_OUT),
							    .FULL_N(),
							    .EMPTY_N(ifcs_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_noRouteRsp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_1_noRouteRsp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_noRouteRsp$D_IN),
							    .ENQ(ifcs_1_noRouteRsp$ENQ),
							    .DEQ(ifcs_1_noRouteRsp$DEQ),
							    .CLR(ifcs_1_noRouteRsp$CLR),
							    .D_OUT(ifcs_1_noRouteRsp$D_OUT),
							    .FULL_N(),
							    .EMPTY_N(ifcs_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_1_routeBack$D_IN),
							   .ENQ(ifcs_1_routeBack$ENQ),
							   .DEQ(ifcs_1_routeBack$DEQ),
							   .CLR(ifcs_1_routeBack$CLR),
							   .D_OUT(ifcs_1_routeBack$D_OUT),
							   .FULL_N(ifcs_1_routeBack$FULL_N),
							   .EMPTY_N(ifcs_1_routeBack$EMPTY_N));

  // submodule ifcs_1_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_1_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_1_rspBack$D_IN),
							 .ENQ(ifcs_1_rspBack$ENQ),
							 .DEQ(ifcs_1_rspBack$DEQ),
							 .CLR(ifcs_1_rspBack$CLR),
							 .D_OUT(ifcs_1_rspBack$D_OUT),
							 .FULL_N(ifcs_1_rspBack$FULL_N),
							 .EMPTY_N(ifcs_1_rspBack$EMPTY_N));

  // submodule ifcs_2_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_2_1_routeBack$D_IN),
							     .ENQ(ifcs_2_1_routeBack$ENQ),
							     .DEQ(ifcs_2_1_routeBack$DEQ),
							     .CLR(ifcs_2_1_routeBack$CLR),
							     .D_OUT(ifcs_2_1_routeBack$D_OUT),
							     .FULL_N(ifcs_2_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_2_1_routeBack$EMPTY_N));

  // submodule ifcs_2_1_rspBack
  FIFO2 #(.width(32'd72), .guarded(32'd1)) ifcs_2_1_rspBack(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_2_1_rspBack$D_IN),
							    .ENQ(ifcs_2_1_rspBack$ENQ),
							    .DEQ(ifcs_2_1_rspBack$DEQ),
							    .CLR(ifcs_2_1_rspBack$CLR),
							    .D_OUT(ifcs_2_1_rspBack$D_OUT),
							    .FULL_N(ifcs_2_1_rspBack$FULL_N),
							    .EMPTY_N(ifcs_2_1_rspBack$EMPTY_N));

  // submodule ifcs_2_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_2_routeBack$D_IN),
							   .ENQ(ifcs_2_routeBack$ENQ),
							   .DEQ(ifcs_2_routeBack$DEQ),
							   .CLR(ifcs_2_routeBack$CLR),
							   .D_OUT(ifcs_2_routeBack$D_OUT),
							   .FULL_N(ifcs_2_routeBack$FULL_N),
							   .EMPTY_N(ifcs_2_routeBack$EMPTY_N));

  // submodule ifcs_2_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_2_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_2_rspBack$D_IN),
							 .ENQ(ifcs_2_rspBack$ENQ),
							 .DEQ(ifcs_2_rspBack$DEQ),
							 .CLR(ifcs_2_rspBack$CLR),
							 .D_OUT(ifcs_2_rspBack$D_OUT),
							 .FULL_N(ifcs_2_rspBack$FULL_N),
							 .EMPTY_N(ifcs_2_rspBack$EMPTY_N));

  // submodule msNoSynth_0_b_buffer_ff
  FIFO1 #(.width(32'd6), .guarded(32'd0)) msNoSynth_0_b_buffer_ff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(msNoSynth_0_b_buffer_ff$D_IN),
								  .ENQ(msNoSynth_0_b_buffer_ff$ENQ),
								  .DEQ(msNoSynth_0_b_buffer_ff$DEQ),
								  .CLR(msNoSynth_0_b_buffer_ff$CLR),
								  .D_OUT(msNoSynth_0_b_buffer_ff$D_OUT),
								  .FULL_N(msNoSynth_0_b_buffer_ff$FULL_N),
								  .EMPTY_N(msNoSynth_0_b_buffer_ff$EMPTY_N));

  // submodule msNoSynth_0_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_0_b_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_0_b_buffer_firstValid$D_IN),
							   .EN(msNoSynth_0_b_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_0_b_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_0_r_buffer_ff
  FIFO1 #(.width(32'd72),
	  .guarded(32'd0)) msNoSynth_0_r_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_0_r_buffer_ff$D_IN),
						   .ENQ(msNoSynth_0_r_buffer_ff$ENQ),
						   .DEQ(msNoSynth_0_r_buffer_ff$DEQ),
						   .CLR(msNoSynth_0_r_buffer_ff$CLR),
						   .D_OUT(msNoSynth_0_r_buffer_ff$D_OUT),
						   .FULL_N(msNoSynth_0_r_buffer_ff$FULL_N),
						   .EMPTY_N(msNoSynth_0_r_buffer_ff$EMPTY_N));

  // submodule msNoSynth_0_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_0_r_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_0_r_buffer_firstValid$D_IN),
							   .EN(msNoSynth_0_r_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_0_r_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_1_b_buffer_ff
  FIFO1 #(.width(32'd6), .guarded(32'd0)) msNoSynth_1_b_buffer_ff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(msNoSynth_1_b_buffer_ff$D_IN),
								  .ENQ(msNoSynth_1_b_buffer_ff$ENQ),
								  .DEQ(msNoSynth_1_b_buffer_ff$DEQ),
								  .CLR(msNoSynth_1_b_buffer_ff$CLR),
								  .D_OUT(),
								  .FULL_N(msNoSynth_1_b_buffer_ff$FULL_N),
								  .EMPTY_N());

  // submodule msNoSynth_1_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_1_b_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_1_b_buffer_firstValid$D_IN),
							   .EN(msNoSynth_1_b_buffer_firstValid$EN),
							   .Q_OUT());

  // submodule msNoSynth_1_r_buffer_ff
  FIFO1 #(.width(32'd72),
	  .guarded(32'd0)) msNoSynth_1_r_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_1_r_buffer_ff$D_IN),
						   .ENQ(msNoSynth_1_r_buffer_ff$ENQ),
						   .DEQ(msNoSynth_1_r_buffer_ff$DEQ),
						   .CLR(msNoSynth_1_r_buffer_ff$CLR),
						   .D_OUT(),
						   .FULL_N(msNoSynth_1_r_buffer_ff$FULL_N),
						   .EMPTY_N());

  // submodule msNoSynth_1_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_1_r_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_1_r_buffer_firstValid$D_IN),
							   .EN(msNoSynth_1_r_buffer_firstValid$EN),
							   .Q_OUT());

  // submodule plic
  mkPLIC_16_2_7 plic(.CLK(CLK),
		     .RST_N(RST_N),
		     .axi4_slave_araddr(plic$axi4_slave_araddr),
		     .axi4_slave_arburst(plic$axi4_slave_arburst),
		     .axi4_slave_arcache(plic$axi4_slave_arcache),
		     .axi4_slave_arid(plic$axi4_slave_arid),
		     .axi4_slave_arlen(plic$axi4_slave_arlen),
		     .axi4_slave_arlock(plic$axi4_slave_arlock),
		     .axi4_slave_arprot(plic$axi4_slave_arprot),
		     .axi4_slave_arqos(plic$axi4_slave_arqos),
		     .axi4_slave_arregion(plic$axi4_slave_arregion),
		     .axi4_slave_arsize(plic$axi4_slave_arsize),
		     .axi4_slave_awaddr(plic$axi4_slave_awaddr),
		     .axi4_slave_awburst(plic$axi4_slave_awburst),
		     .axi4_slave_awcache(plic$axi4_slave_awcache),
		     .axi4_slave_awid(plic$axi4_slave_awid),
		     .axi4_slave_awlen(plic$axi4_slave_awlen),
		     .axi4_slave_awlock(plic$axi4_slave_awlock),
		     .axi4_slave_awprot(plic$axi4_slave_awprot),
		     .axi4_slave_awqos(plic$axi4_slave_awqos),
		     .axi4_slave_awregion(plic$axi4_slave_awregion),
		     .axi4_slave_awsize(plic$axi4_slave_awsize),
		     .axi4_slave_bready(plic$axi4_slave_bready),
		     .axi4_slave_rready(plic$axi4_slave_rready),
		     .axi4_slave_wdata(plic$axi4_slave_wdata),
		     .axi4_slave_wlast(plic$axi4_slave_wlast),
		     .axi4_slave_wstrb(plic$axi4_slave_wstrb),
		     .axi4_slave_wuser(plic$axi4_slave_wuser),
		     .set_addr_map_addr_base(plic$set_addr_map_addr_base),
		     .set_addr_map_addr_lim(plic$set_addr_map_addr_lim),
		     .set_verbosity_verbosity(plic$set_verbosity_verbosity),
		     .v_sources_0_m_interrupt_req_set_not_clear(plic$v_sources_0_m_interrupt_req_set_not_clear),
		     .v_sources_10_m_interrupt_req_set_not_clear(plic$v_sources_10_m_interrupt_req_set_not_clear),
		     .v_sources_11_m_interrupt_req_set_not_clear(plic$v_sources_11_m_interrupt_req_set_not_clear),
		     .v_sources_12_m_interrupt_req_set_not_clear(plic$v_sources_12_m_interrupt_req_set_not_clear),
		     .v_sources_13_m_interrupt_req_set_not_clear(plic$v_sources_13_m_interrupt_req_set_not_clear),
		     .v_sources_14_m_interrupt_req_set_not_clear(plic$v_sources_14_m_interrupt_req_set_not_clear),
		     .v_sources_15_m_interrupt_req_set_not_clear(plic$v_sources_15_m_interrupt_req_set_not_clear),
		     .v_sources_1_m_interrupt_req_set_not_clear(plic$v_sources_1_m_interrupt_req_set_not_clear),
		     .v_sources_2_m_interrupt_req_set_not_clear(plic$v_sources_2_m_interrupt_req_set_not_clear),
		     .v_sources_3_m_interrupt_req_set_not_clear(plic$v_sources_3_m_interrupt_req_set_not_clear),
		     .v_sources_4_m_interrupt_req_set_not_clear(plic$v_sources_4_m_interrupt_req_set_not_clear),
		     .v_sources_5_m_interrupt_req_set_not_clear(plic$v_sources_5_m_interrupt_req_set_not_clear),
		     .v_sources_6_m_interrupt_req_set_not_clear(plic$v_sources_6_m_interrupt_req_set_not_clear),
		     .v_sources_7_m_interrupt_req_set_not_clear(plic$v_sources_7_m_interrupt_req_set_not_clear),
		     .v_sources_8_m_interrupt_req_set_not_clear(plic$v_sources_8_m_interrupt_req_set_not_clear),
		     .v_sources_9_m_interrupt_req_set_not_clear(plic$v_sources_9_m_interrupt_req_set_not_clear),
		     .EN_set_verbosity(plic$EN_set_verbosity),
		     .EN_show_PLIC_state(plic$EN_show_PLIC_state),
		     .EN_server_reset_request_put(plic$EN_server_reset_request_put),
		     .EN_server_reset_response_get(plic$EN_server_reset_response_get),
		     .EN_set_addr_map(plic$EN_set_addr_map),
		     .axi4_slave_awvalid(plic$axi4_slave_awvalid),
		     .axi4_slave_wvalid(plic$axi4_slave_wvalid),
		     .axi4_slave_arvalid(plic$axi4_slave_arvalid),
		     .RDY_set_verbosity(),
		     .RDY_show_PLIC_state(),
		     .RDY_server_reset_request_put(),
		     .RDY_server_reset_response_get(),
		     .RDY_set_addr_map(),
		     .axi4_slave_awready(plic$axi4_slave_awready),
		     .axi4_slave_wready(plic$axi4_slave_wready),
		     .axi4_slave_bid(plic$axi4_slave_bid),
		     .axi4_slave_bresp(plic$axi4_slave_bresp),
		     .axi4_slave_bvalid(plic$axi4_slave_bvalid),
		     .axi4_slave_arready(plic$axi4_slave_arready),
		     .axi4_slave_rid(plic$axi4_slave_rid),
		     .axi4_slave_rdata(plic$axi4_slave_rdata),
		     .axi4_slave_rresp(plic$axi4_slave_rresp),
		     .axi4_slave_rlast(plic$axi4_slave_rlast),
		     .axi4_slave_ruser(plic$axi4_slave_ruser),
		     .axi4_slave_rvalid(plic$axi4_slave_rvalid),
		     .v_targets_0_m_eip(plic$v_targets_0_m_eip),
		     .v_targets_1_m_eip(plic$v_targets_1_m_eip));

  // submodule proc
  mkProc proc(.CLK(CLK),
	      .RST_N(RST_N),
	      .debug_module_mem_server_araddr(proc$debug_module_mem_server_araddr),
	      .debug_module_mem_server_arburst(proc$debug_module_mem_server_arburst),
	      .debug_module_mem_server_arcache(proc$debug_module_mem_server_arcache),
	      .debug_module_mem_server_arid(proc$debug_module_mem_server_arid),
	      .debug_module_mem_server_arlen(proc$debug_module_mem_server_arlen),
	      .debug_module_mem_server_arlock(proc$debug_module_mem_server_arlock),
	      .debug_module_mem_server_arprot(proc$debug_module_mem_server_arprot),
	      .debug_module_mem_server_arqos(proc$debug_module_mem_server_arqos),
	      .debug_module_mem_server_arregion(proc$debug_module_mem_server_arregion),
	      .debug_module_mem_server_arsize(proc$debug_module_mem_server_arsize),
	      .debug_module_mem_server_awaddr(proc$debug_module_mem_server_awaddr),
	      .debug_module_mem_server_awburst(proc$debug_module_mem_server_awburst),
	      .debug_module_mem_server_awcache(proc$debug_module_mem_server_awcache),
	      .debug_module_mem_server_awid(proc$debug_module_mem_server_awid),
	      .debug_module_mem_server_awlen(proc$debug_module_mem_server_awlen),
	      .debug_module_mem_server_awlock(proc$debug_module_mem_server_awlock),
	      .debug_module_mem_server_awprot(proc$debug_module_mem_server_awprot),
	      .debug_module_mem_server_awqos(proc$debug_module_mem_server_awqos),
	      .debug_module_mem_server_awregion(proc$debug_module_mem_server_awregion),
	      .debug_module_mem_server_awsize(proc$debug_module_mem_server_awsize),
	      .debug_module_mem_server_bready(proc$debug_module_mem_server_bready),
	      .debug_module_mem_server_rready(proc$debug_module_mem_server_rready),
	      .debug_module_mem_server_wdata(proc$debug_module_mem_server_wdata),
	      .debug_module_mem_server_wlast(proc$debug_module_mem_server_wlast),
	      .debug_module_mem_server_wstrb(proc$debug_module_mem_server_wstrb),
	      .debug_module_mem_server_wuser(proc$debug_module_mem_server_wuser),
	      .m_external_interrupt_req_set_not_clear(proc$m_external_interrupt_req_set_not_clear),
	      .master0_arready(proc$master0_arready),
	      .master0_awready(proc$master0_awready),
	      .master0_bid(proc$master0_bid),
	      .master0_bresp(proc$master0_bresp),
	      .master0_rdata(proc$master0_rdata),
	      .master0_rid(proc$master0_rid),
	      .master0_rlast(proc$master0_rlast),
	      .master0_rresp(proc$master0_rresp),
	      .master0_ruser(proc$master0_ruser),
	      .master0_wready(proc$master0_wready),
	      .master1_arready(proc$master1_arready),
	      .master1_awready(proc$master1_awready),
	      .master1_bid(proc$master1_bid),
	      .master1_bresp(proc$master1_bresp),
	      .master1_rdata(proc$master1_rdata),
	      .master1_rid(proc$master1_rid),
	      .master1_rlast(proc$master1_rlast),
	      .master1_rresp(proc$master1_rresp),
	      .master1_ruser(proc$master1_ruser),
	      .master1_wready(proc$master1_wready),
	      .non_maskable_interrupt_req_set_not_clear(proc$non_maskable_interrupt_req_set_not_clear),
	      .s_external_interrupt_req_set_not_clear(proc$s_external_interrupt_req_set_not_clear),
	      .set_verbosity_verbosity(proc$set_verbosity_verbosity),
	      .start_fromhostAddr(proc$start_fromhostAddr),
	      .start_startpc(proc$start_startpc),
	      .start_tohostAddr(proc$start_tohostAddr),
	      .EN_start(proc$EN_start),
	      .master0_bvalid(proc$master0_bvalid),
	      .master0_rvalid(proc$master0_rvalid),
	      .master1_bvalid(proc$master1_bvalid),
	      .master1_rvalid(proc$master1_rvalid),
	      .EN_set_verbosity(proc$EN_set_verbosity),
	      .debug_module_mem_server_awvalid(proc$debug_module_mem_server_awvalid),
	      .debug_module_mem_server_wvalid(proc$debug_module_mem_server_wvalid),
	      .debug_module_mem_server_arvalid(proc$debug_module_mem_server_arvalid),
	      .RDY_start(proc$RDY_start),
	      .master0_awid(proc$master0_awid),
	      .master0_awaddr(proc$master0_awaddr),
	      .master0_awlen(proc$master0_awlen),
	      .master0_awsize(proc$master0_awsize),
	      .master0_awburst(proc$master0_awburst),
	      .master0_awlock(proc$master0_awlock),
	      .master0_awcache(proc$master0_awcache),
	      .master0_awprot(proc$master0_awprot),
	      .master0_awqos(proc$master0_awqos),
	      .master0_awregion(proc$master0_awregion),
	      .master0_awvalid(proc$master0_awvalid),
	      .master0_wdata(proc$master0_wdata),
	      .master0_wstrb(proc$master0_wstrb),
	      .master0_wlast(proc$master0_wlast),
	      .master0_wuser(proc$master0_wuser),
	      .master0_wvalid(proc$master0_wvalid),
	      .master0_bready(proc$master0_bready),
	      .master0_arid(proc$master0_arid),
	      .master0_araddr(proc$master0_araddr),
	      .master0_arlen(proc$master0_arlen),
	      .master0_arsize(proc$master0_arsize),
	      .master0_arburst(proc$master0_arburst),
	      .master0_arlock(proc$master0_arlock),
	      .master0_arcache(proc$master0_arcache),
	      .master0_arprot(proc$master0_arprot),
	      .master0_arqos(proc$master0_arqos),
	      .master0_arregion(proc$master0_arregion),
	      .master0_arvalid(proc$master0_arvalid),
	      .master0_rready(proc$master0_rready),
	      .master1_awid(proc$master1_awid),
	      .master1_awaddr(proc$master1_awaddr),
	      .master1_awlen(proc$master1_awlen),
	      .master1_awsize(proc$master1_awsize),
	      .master1_awburst(proc$master1_awburst),
	      .master1_awlock(proc$master1_awlock),
	      .master1_awcache(proc$master1_awcache),
	      .master1_awprot(proc$master1_awprot),
	      .master1_awqos(proc$master1_awqos),
	      .master1_awregion(proc$master1_awregion),
	      .master1_awvalid(proc$master1_awvalid),
	      .master1_wdata(proc$master1_wdata),
	      .master1_wstrb(proc$master1_wstrb),
	      .master1_wlast(proc$master1_wlast),
	      .master1_wuser(proc$master1_wuser),
	      .master1_wvalid(proc$master1_wvalid),
	      .master1_bready(proc$master1_bready),
	      .master1_arid(proc$master1_arid),
	      .master1_araddr(proc$master1_araddr),
	      .master1_arlen(proc$master1_arlen),
	      .master1_arsize(proc$master1_arsize),
	      .master1_arburst(proc$master1_arburst),
	      .master1_arlock(proc$master1_arlock),
	      .master1_arcache(proc$master1_arcache),
	      .master1_arprot(proc$master1_arprot),
	      .master1_arqos(proc$master1_arqos),
	      .master1_arregion(proc$master1_arregion),
	      .master1_arvalid(proc$master1_arvalid),
	      .master1_rready(proc$master1_rready),
	      .RDY_set_verbosity(),
	      .debug_module_mem_server_awready(proc$debug_module_mem_server_awready),
	      .debug_module_mem_server_wready(proc$debug_module_mem_server_wready),
	      .debug_module_mem_server_bid(proc$debug_module_mem_server_bid),
	      .debug_module_mem_server_bresp(proc$debug_module_mem_server_bresp),
	      .debug_module_mem_server_bvalid(proc$debug_module_mem_server_bvalid),
	      .debug_module_mem_server_arready(proc$debug_module_mem_server_arready),
	      .debug_module_mem_server_rid(proc$debug_module_mem_server_rid),
	      .debug_module_mem_server_rdata(proc$debug_module_mem_server_rdata),
	      .debug_module_mem_server_rresp(proc$debug_module_mem_server_rresp),
	      .debug_module_mem_server_rlast(proc$debug_module_mem_server_rlast),
	      .debug_module_mem_server_ruser(proc$debug_module_mem_server_ruser),
	      .debug_module_mem_server_rvalid(proc$debug_module_mem_server_rvalid));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_range(),
		    .m_plic_addr_range(soc_map$m_plic_addr_range),
		    .m_uart0_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_mem0_controller_addr_range(soc_map$m_mem0_controller_addr_range),
		    .m_tcm_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule ssNoSynth_0_ar_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_0_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_0_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_0_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_0_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_0_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_0_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_0_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_0_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_0_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_0_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_0_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_0_aw_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_0_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_0_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_0_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_0_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_0_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_0_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_0_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_0_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_0_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_0_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_0_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_0_w_buffer_ff
  FIFO1 #(.width(32'd74),
	  .guarded(32'd0)) ssNoSynth_0_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_0_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_0_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_0_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_0_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_0_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_0_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_0_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_0_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_0_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_0_w_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_ar_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_1_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_1_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_1_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_1_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_1_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_1_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_1_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_1_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_1_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_1_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_1_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_aw_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_1_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_1_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_1_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_1_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_1_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_1_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_1_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_1_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_1_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_1_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_1_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_w_buffer_ff
  FIFO1 #(.width(32'd74),
	  .guarded(32'd0)) ssNoSynth_1_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_1_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_1_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_1_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_1_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_1_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_1_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_1_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_1_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_1_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_1_w_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_ar_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_2_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_2_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_2_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_2_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_2_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_2_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_2_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_2_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_2_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_2_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_2_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_aw_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_2_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_2_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_2_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_2_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_2_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_2_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_2_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_2_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_2_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_2_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_2_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_w_buffer_ff
  FIFO1 #(.width(32'd74),
	  .guarded(32'd0)) ssNoSynth_2_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_2_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_2_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_2_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_2_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_2_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_2_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_2_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_2_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_2_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_2_w_buffer_firstValid$Q_OUT));

  // submodule tagController_tmp_awreqff
  FIFO2 #(.width(32'd98),
	  .guarded(32'd1)) tagController_tmp_awreqff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(tagController_tmp_awreqff$D_IN),
						     .ENQ(tagController_tmp_awreqff$ENQ),
						     .DEQ(tagController_tmp_awreqff$DEQ),
						     .CLR(tagController_tmp_awreqff$CLR),
						     .D_OUT(tagController_tmp_awreqff$D_OUT),
						     .FULL_N(tagController_tmp_awreqff$FULL_N),
						     .EMPTY_N(tagController_tmp_awreqff$EMPTY_N));

  // submodule tagController_tmp_newRst
  MakeReset0 #(.init(1'd0)) tagController_tmp_newRst(.CLK(CLK),
						     .RST(RST_N),
						     .ASSERT_IN(tagController_tmp_newRst$ASSERT_IN),
						     .ASSERT_OUT(),
						     .OUT_RST(tagController_tmp_newRst$OUT_RST));

  // submodule tagController_tmp_tagCon
  mkTagController tagController_tmp_tagCon(.CLK(CLK),
					   .RST_N(tagController_tmp_newRst$OUT_RST),
					   .cache_request_put_val(tagController_tmp_tagCon$cache_request_put_val),
					   .memory_response_put_val(tagController_tmp_tagCon$memory_response_put_val),
					   .EN_cache_request_put(tagController_tmp_tagCon$EN_cache_request_put),
					   .EN_cache_response_get(tagController_tmp_tagCon$EN_cache_response_get),
					   .EN_memory_request_get(tagController_tmp_tagCon$EN_memory_request_get),
					   .EN_memory_response_put(tagController_tmp_tagCon$EN_memory_response_put),
					   .cache_request_canPut(),
					   .RDY_cache_request_put(tagController_tmp_tagCon$RDY_cache_request_put),
					   .cache_response_canGet(),
					   .cache_response_peek(),
					   .RDY_cache_response_peek(),
					   .cache_response_get(tagController_tmp_tagCon$cache_response_get),
					   .RDY_cache_response_get(tagController_tmp_tagCon$RDY_cache_response_get),
					   .memory_request_canGet(),
					   .memory_request_peek(),
					   .RDY_memory_request_peek(),
					   .memory_request_get(tagController_tmp_tagCon$memory_request_get),
					   .RDY_memory_request_get(tagController_tmp_tagCon$RDY_memory_request_get),
					   .memory_response_canPut(),
					   .RDY_memory_response_put(tagController_tmp_tagCon$RDY_memory_response_put));

  // submodule tmp0_b_buffer_ff
  FIFO1 #(.width(32'd7), .guarded(32'd0)) tmp0_b_buffer_ff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(tmp0_b_buffer_ff$D_IN),
							   .ENQ(tmp0_b_buffer_ff$ENQ),
							   .DEQ(tmp0_b_buffer_ff$DEQ),
							   .CLR(tmp0_b_buffer_ff$CLR),
							   .D_OUT(tmp0_b_buffer_ff$D_OUT),
							   .FULL_N(tmp0_b_buffer_ff$FULL_N),
							   .EMPTY_N(tmp0_b_buffer_ff$EMPTY_N));

  // submodule tmp0_b_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) tmp0_b_buffer_firstValid(.CLK(CLK),
								   .D_IN(tmp0_b_buffer_firstValid$D_IN),
								   .EN(tmp0_b_buffer_firstValid$EN),
								   .Q_OUT(tmp0_b_buffer_firstValid$Q_OUT));

  // submodule tmp0_r_buffer_ff
  FIFO1 #(.width(32'd73), .guarded(32'd0)) tmp0_r_buffer_ff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(tmp0_r_buffer_ff$D_IN),
							    .ENQ(tmp0_r_buffer_ff$ENQ),
							    .DEQ(tmp0_r_buffer_ff$DEQ),
							    .CLR(tmp0_r_buffer_ff$CLR),
							    .D_OUT(tmp0_r_buffer_ff$D_OUT),
							    .FULL_N(tmp0_r_buffer_ff$FULL_N),
							    .EMPTY_N(tmp0_r_buffer_ff$EMPTY_N));

  // submodule tmp0_r_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) tmp0_r_buffer_firstValid(.CLK(CLK),
								   .D_IN(tmp0_r_buffer_firstValid$D_IN),
								   .EN(tmp0_r_buffer_firstValid$EN),
								   .Q_OUT(tmp0_r_buffer_firstValid$Q_OUT));

  // rule RL_checkSinkReady
  assign CAN_FIRE_RL_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady = 1'd1 ;

  // rule RL_checkSinkReady_1
  assign CAN_FIRE_RL_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_1 = 1'd1 ;

  // rule RL_checkSinkReady_2
  assign CAN_FIRE_RL_checkSinkReady_2 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_2 = 1'd1 ;

  // rule RL_craftReq
  assign CAN_FIRE_RL_craftReq =
	     ifcs_0_innerRoute$EMPTY_N && ifcs_0_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq = CAN_FIRE_RL_craftReq ;

  // rule RL_craftReq_1
  assign CAN_FIRE_RL_craftReq_1 =
	     ifcs_1_innerRoute$EMPTY_N && ifcs_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_1 = CAN_FIRE_RL_craftReq_1 ;

  // rule RL_arbitrate
  assign CAN_FIRE_RL_arbitrate =
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget ||
	      CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) &&
	     !state ;
  assign WILL_FIRE_RL_arbitrate = CAN_FIRE_RL_arbitrate ;

  // rule RL_source_selected
  assign CAN_FIRE_RL_source_selected =
	     (!ifcs_0_innerRoute$EMPTY_N || ifcs_0_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected = CAN_FIRE_RL_source_selected ;

  // rule RL_burst
  assign CAN_FIRE_RL_burst =
	     ifcs_0_innerReq$EMPTY_N && ifcs_0_innerRoute$EMPTY_N &&
	     state_157_AND_activeSource_0_230_231_AND_ifcs__ETC___d1233 ;
  assign WILL_FIRE_RL_burst = CAN_FIRE_RL_burst ;

  // rule RL_source_selected_1
  assign CAN_FIRE_RL_source_selected_1 =
	     (!ifcs_1_innerRoute$EMPTY_N || ifcs_1_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_1 = CAN_FIRE_RL_source_selected_1 ;

  // rule RL_burst_1
  assign CAN_FIRE_RL_burst_1 =
	     ifcs_1_innerReq$EMPTY_N && ifcs_1_innerRoute$EMPTY_N &&
	     state_157_AND_activeSource_1_274_275_AND_ifcs__ETC___d1277 ;
  assign WILL_FIRE_RL_burst_1 = CAN_FIRE_RL_burst_1 ;

  // rule __me_check_142
  assign CAN_FIRE___me_check_142 = 1'b1 ;
  assign WILL_FIRE___me_check_142 = 1'b1 ;

  // rule __me_check_144
  assign CAN_FIRE___me_check_144 = 1'b1 ;
  assign WILL_FIRE___me_check_144 = 1'b1 ;

  // rule RL_sink_selected
  assign CAN_FIRE_RL_sink_selected =
	     IF_split_0_flitLeft_50_EQ_0_51_THEN_ssNoSynth__ETC___d1102 &&
	     flitToSink_0$whas ;
  assign WILL_FIRE_RL_sink_selected = CAN_FIRE_RL_sink_selected ;

  // rule RL_sink_selected_1
  assign CAN_FIRE_RL_sink_selected_1 =
	     IF_split_1_flitLeft_79_EQ_0_80_THEN_ssNoSynth__ETC___d1103 &&
	     flitToSink_1$whas ;
  assign WILL_FIRE_RL_sink_selected_1 = CAN_FIRE_RL_sink_selected_1 ;

  // rule RL_sink_selected_2
  assign CAN_FIRE_RL_sink_selected_2 =
	     IF_split_2_flitLeft_08_EQ_0_09_THEN_ssNoSynth__ETC___d1104 &&
	     flitToSink_2$whas ;
  assign WILL_FIRE_RL_sink_selected_2 = CAN_FIRE_RL_sink_selected_2 ;

  // rule __me_check_146
  assign CAN_FIRE___me_check_146 = 1'b1 ;
  assign WILL_FIRE___me_check_146 = 1'b1 ;

  // rule RL_checkSinkReady_5
  assign CAN_FIRE_RL_checkSinkReady_5 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_5 = 1'd1 ;

  // rule RL_checkSinkReady_6
  assign CAN_FIRE_RL_checkSinkReady_6 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_6 = 1'd1 ;

  // rule RL_checkSinkReady_7
  assign CAN_FIRE_RL_checkSinkReady_7 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_7 = 1'd1 ;

  // rule RL_craftReq_5
  assign CAN_FIRE_RL_craftReq_5 =
	     ifcs_0_1_innerRoute$EMPTY_N && ifcs_0_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_5 = CAN_FIRE_RL_craftReq_5 ;

  // rule RL_craftReq_6
  assign CAN_FIRE_RL_craftReq_6 =
	     ifcs_1_1_innerRoute$EMPTY_N && ifcs_1_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_6 = CAN_FIRE_RL_craftReq_6 ;

  // rule RL_arbitrate_2
  assign CAN_FIRE_RL_arbitrate_2 =
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget ||
	      CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) &&
	     !state_1_1 ;
  assign WILL_FIRE_RL_arbitrate_2 = CAN_FIRE_RL_arbitrate_2 ;

  // rule RL_source_selected_5
  assign CAN_FIRE_RL_source_selected_5 =
	     (!ifcs_0_1_innerRoute$EMPTY_N || ifcs_0_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_0_1$whas ;
  assign WILL_FIRE_RL_source_selected_5 = CAN_FIRE_RL_source_selected_5 ;

  // rule RL_burst_5
  assign CAN_FIRE_RL_burst_5 =
	     ifcs_0_1_innerReq$EMPTY_N && ifcs_0_1_innerRoute$EMPTY_N &&
	     state_1_1_749_AND_activeSource_1_0_1_816_817_A_ETC___d1819 ;
  assign WILL_FIRE_RL_burst_5 = CAN_FIRE_RL_burst_5 ;

  // rule RL_source_selected_6
  assign CAN_FIRE_RL_source_selected_6 =
	     (!ifcs_1_1_innerRoute$EMPTY_N || ifcs_1_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_6 = CAN_FIRE_RL_source_selected_6 ;

  // rule RL_burst_6
  assign CAN_FIRE_RL_burst_6 =
	     ifcs_1_1_innerReq$EMPTY_N && ifcs_1_1_innerRoute$EMPTY_N &&
	     state_1_1_749_AND_activeSource_1_1_1_856_857_A_ETC___d1859 ;
  assign WILL_FIRE_RL_burst_6 = CAN_FIRE_RL_burst_6 ;

  // rule __me_check_185
  assign CAN_FIRE___me_check_185 = 1'b1 ;
  assign WILL_FIRE___me_check_185 = 1'b1 ;

  // rule __me_check_187
  assign CAN_FIRE___me_check_187 = 1'b1 ;
  assign WILL_FIRE___me_check_187 = 1'b1 ;

  // rule RL_sink_selected_5
  assign CAN_FIRE_RL_sink_selected_5 =
	     ssNoSynth_0_ar_buffer_ff$FULL_N && flitToSink_1_0_1$whas ;
  assign WILL_FIRE_RL_sink_selected_5 = CAN_FIRE_RL_sink_selected_5 ;

  // rule RL_sink_selected_6
  assign CAN_FIRE_RL_sink_selected_6 =
	     ssNoSynth_1_ar_buffer_ff$FULL_N && flitToSink_1_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_6 = CAN_FIRE_RL_sink_selected_6 ;

  // rule RL_sink_selected_7
  assign CAN_FIRE_RL_sink_selected_7 =
	     ssNoSynth_2_ar_buffer_ff$FULL_N && flitToSink_1_2$whas ;
  assign WILL_FIRE_RL_sink_selected_7 = CAN_FIRE_RL_sink_selected_7 ;

  // rule __me_check_189
  assign CAN_FIRE___me_check_189 = 1'b1 ;
  assign WILL_FIRE___me_check_189 = 1'b1 ;

  // rule RL_rl_relay_external_interrupts
  assign CAN_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;
  assign WILL_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;

  // rule RL_tmp1_u_aw_setPeek
  assign CAN_FIRE_RL_tmp1_u_aw_setPeek = proc$master0_awvalid ;
  assign WILL_FIRE_RL_tmp1_u_aw_setPeek = proc$master0_awvalid ;

  // rule RL_tmp1_u_aw_warnDoDrop
  assign CAN_FIRE_RL_tmp1_u_aw_warnDoDrop =
	     tmp1_u_aw_dropWire$whas && !proc$master0_awvalid ;
  assign WILL_FIRE_RL_tmp1_u_aw_warnDoDrop =
	     CAN_FIRE_RL_tmp1_u_aw_warnDoDrop ;

  // rule RL_tmp1_u_aw_doDrop
  assign CAN_FIRE_RL_tmp1_u_aw_doDrop =
	     proc$master0_awvalid && tmp1_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_tmp1_u_aw_doDrop = CAN_FIRE_RL_tmp1_u_aw_doDrop ;

  // rule RL_tmp0_aw_forwardReady
  assign CAN_FIRE_RL_tmp0_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_tmp0_aw_forwardReady = 1'd1 ;

  // rule RL_tmp1_u_w_setPeek
  assign CAN_FIRE_RL_tmp1_u_w_setPeek = proc$master0_wvalid ;
  assign WILL_FIRE_RL_tmp1_u_w_setPeek = proc$master0_wvalid ;

  // rule RL_tmp1_u_w_warnDoDrop
  assign CAN_FIRE_RL_tmp1_u_w_warnDoDrop =
	     tmp1_u_w_dropWire$whas && !proc$master0_wvalid ;
  assign WILL_FIRE_RL_tmp1_u_w_warnDoDrop = CAN_FIRE_RL_tmp1_u_w_warnDoDrop ;

  // rule RL_tmp1_u_w_doDrop
  assign CAN_FIRE_RL_tmp1_u_w_doDrop =
	     proc$master0_wvalid && tmp1_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_tmp1_u_w_doDrop = CAN_FIRE_RL_tmp1_u_w_doDrop ;

  // rule RL_tmp0_w_forwardReady
  assign CAN_FIRE_RL_tmp0_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_tmp0_w_forwardReady = 1'd1 ;

  // rule RL_tmp1_u_b_warnDoPut
  assign CAN_FIRE_RL_tmp1_u_b_warnDoPut =
	     tmp1_u_b_putWire$whas && !tmp0_b_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_tmp1_u_b_warnDoPut = CAN_FIRE_RL_tmp1_u_b_warnDoPut ;

  // rule RL_tmp1_u_b_doPut
  assign CAN_FIRE_RL_tmp1_u_b_doPut =
	     tmp0_b_buffer_ff$FULL_N && tmp1_u_b_putWire$whas ;
  assign WILL_FIRE_RL_tmp1_u_b_doPut = CAN_FIRE_RL_tmp1_u_b_doPut ;

  // rule RL_tmp0_b_forwardFlit
  assign CAN_FIRE_RL_tmp0_b_forwardFlit =
	     tmp0_b_buffer_firstValid$Q_OUT &&
	     (tmp0_b_buffer_ff$EMPTY_N || CAN_FIRE_RL_tmp1_u_b_doPut) ;
  assign WILL_FIRE_RL_tmp0_b_forwardFlit = CAN_FIRE_RL_tmp0_b_forwardFlit ;

  // rule RL_tmp0_b_dropFlit
  assign CAN_FIRE_RL_tmp0_b_dropFlit =
	     (tmp0_b_buffer_ff$EMPTY_N || CAN_FIRE_RL_tmp1_u_b_doPut) &&
	     proc$master0_bready ;
  assign WILL_FIRE_RL_tmp0_b_dropFlit = CAN_FIRE_RL_tmp0_b_dropFlit ;

  // rule RL_tmp0_b_buffer_enqueue
  assign CAN_FIRE_RL_tmp0_b_buffer_enqueue =
	     CAN_FIRE_RL_tmp1_u_b_doPut &&
	     (!CAN_FIRE_RL_tmp0_b_dropFlit || tmp0_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_tmp0_b_buffer_enqueue =
	     CAN_FIRE_RL_tmp0_b_buffer_enqueue ;

  // rule RL_tmp0_b_buffer_dequeue
  assign CAN_FIRE_RL_tmp0_b_buffer_dequeue =
	     CAN_FIRE_RL_tmp0_b_dropFlit && tmp0_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_tmp0_b_buffer_dequeue =
	     CAN_FIRE_RL_tmp0_b_buffer_dequeue ;

  // rule RL_tmp1_u_ar_setPeek
  assign CAN_FIRE_RL_tmp1_u_ar_setPeek = proc$master0_arvalid ;
  assign WILL_FIRE_RL_tmp1_u_ar_setPeek = proc$master0_arvalid ;

  // rule RL_tmp1_u_ar_warnDoDrop
  assign CAN_FIRE_RL_tmp1_u_ar_warnDoDrop =
	     tmp1_u_ar_dropWire$whas && !proc$master0_arvalid ;
  assign WILL_FIRE_RL_tmp1_u_ar_warnDoDrop =
	     CAN_FIRE_RL_tmp1_u_ar_warnDoDrop ;

  // rule RL_tmp1_u_ar_doDrop
  assign CAN_FIRE_RL_tmp1_u_ar_doDrop =
	     proc$master0_arvalid && tmp1_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_tmp1_u_ar_doDrop = CAN_FIRE_RL_tmp1_u_ar_doDrop ;

  // rule RL_tmp0_ar_forwardReady
  assign CAN_FIRE_RL_tmp0_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_tmp0_ar_forwardReady = 1'd1 ;

  // rule RL_tmp1_u_r_warnDoPut
  assign CAN_FIRE_RL_tmp1_u_r_warnDoPut =
	     tmp1_u_r_putWire$whas && !tmp0_r_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_tmp1_u_r_warnDoPut = CAN_FIRE_RL_tmp1_u_r_warnDoPut ;

  // rule RL_tmp1_u_r_doPut
  assign CAN_FIRE_RL_tmp1_u_r_doPut =
	     tmp0_r_buffer_ff$FULL_N && tmp1_u_r_putWire$whas ;
  assign WILL_FIRE_RL_tmp1_u_r_doPut = CAN_FIRE_RL_tmp1_u_r_doPut ;

  // rule RL_tmp0_r_forwardFlit
  assign CAN_FIRE_RL_tmp0_r_forwardFlit =
	     tmp0_r_buffer_firstValid$Q_OUT &&
	     (tmp0_r_buffer_ff$EMPTY_N || CAN_FIRE_RL_tmp1_u_r_doPut) ;
  assign WILL_FIRE_RL_tmp0_r_forwardFlit = CAN_FIRE_RL_tmp0_r_forwardFlit ;

  // rule RL_tmp0_r_dropFlit
  assign CAN_FIRE_RL_tmp0_r_dropFlit =
	     (tmp0_r_buffer_ff$EMPTY_N || CAN_FIRE_RL_tmp1_u_r_doPut) &&
	     proc$master0_rready ;
  assign WILL_FIRE_RL_tmp0_r_dropFlit = CAN_FIRE_RL_tmp0_r_dropFlit ;

  // rule RL_tmp0_r_buffer_enqueue
  assign CAN_FIRE_RL_tmp0_r_buffer_enqueue =
	     CAN_FIRE_RL_tmp1_u_r_doPut &&
	     (!CAN_FIRE_RL_tmp0_r_dropFlit || tmp0_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_tmp0_r_buffer_enqueue =
	     CAN_FIRE_RL_tmp0_r_buffer_enqueue ;

  // rule RL_tmp0_r_buffer_dequeue
  assign CAN_FIRE_RL_tmp0_r_buffer_dequeue =
	     CAN_FIRE_RL_tmp0_r_dropFlit && tmp0_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_tmp0_r_buffer_dequeue =
	     CAN_FIRE_RL_tmp0_r_buffer_dequeue ;

  // rule RL_tagController_tmp_passCacheResponse
  assign CAN_FIRE_RL_tagController_tmp_passCacheResponse =
	     tagController_tmp_tagCon$RDY_cache_response_get &&
	     !tagController_tmp_shimSlave_bff_rv[7] &&
	     !tagController_tmp_shimSlave_rff_rv[73] ;
  assign WILL_FIRE_RL_tagController_tmp_passCacheResponse =
	     CAN_FIRE_RL_tagController_tmp_passCacheResponse ;

  // rule RL_tagController_tmp_passMemoryRequest
  assign CAN_FIRE_RL_tagController_tmp_passMemoryRequest =
	     tagController_tmp_tagCon$RDY_memory_request_get &&
	     !tagController_tmp_shimMaster_wff_rv[73] &&
	     (tagController_tmp_doneSendingAW ||
	      !tagController_tmp_shimMaster_awff_rv[99]) &&
	     !tagController_tmp_shimMaster_arff_rv[99] ;
  assign WILL_FIRE_RL_tagController_tmp_passMemoryRequest =
	     CAN_FIRE_RL_tagController_tmp_passMemoryRequest ;

  // rule RL_tagController_tmp_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_setPeek =
	     tagController_tmp_shimSlave_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_b_setPeek =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_setPeek ;

  // rule RL_tagController_tmp_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_setPeek =
	     tagController_tmp_shimSlave_rff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_r_setPeek =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_setPeek ;

  // rule RL_tagController_tmp_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_setPeek =
	     tagController_tmp_shimMaster_awff_rv$port1__read[99] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_setPeek ;

  // rule RL_tagController_tmp_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_warnDoDrop =
	     tagController_tmp_ug_master_u_aw_dropWire$whas &&
	     !tagController_tmp_shimMaster_awff_rv$port1__read[99] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_warnDoDrop ;

  // rule RL_tagController_tmp_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_doDrop =
	     tagController_tmp_shimMaster_awff_rv$port1__read[99] &&
	     tagController_tmp_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_doDrop ;

  // rule RL_tagController_tmp_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_w_setPeek =
	     tagController_tmp_shimMaster_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_w_setPeek ;

  // rule RL_tagController_tmp_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_w_warnDoDrop =
	     tagController_tmp_ug_master_u_w_dropWire$whas &&
	     !tagController_tmp_shimMaster_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_w_warnDoDrop ;

  // rule RL_tagController_tmp_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_w_doDrop =
	     tagController_tmp_shimMaster_wff_rv$port1__read[73] &&
	     tagController_tmp_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_w_doDrop ;

  // rule RL_tagController_tmp_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_b_warnDoPut =
	     tagController_tmp_ug_master_u_b_putWire$whas &&
	     tagController_tmp_shimMaster_bff_rv[8] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_b_warnDoPut ;

  // rule RL_tagController_tmp_ug_master_u_b_doPut
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_b_doPut =
	     !tagController_tmp_shimMaster_bff_rv[8] &&
	     tagController_tmp_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_b_doPut =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_b_doPut ;

  // rule RL_tagController_tmp_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_setPeek =
	     tagController_tmp_shimMaster_arff_rv$port1__read[99] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_setPeek ;

  // rule RL_tagController_tmp_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_warnDoDrop =
	     tagController_tmp_ug_master_u_ar_dropWire$whas &&
	     !tagController_tmp_shimMaster_arff_rv$port1__read[99] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_warnDoDrop ;

  // rule RL_tagController_tmp_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_doDrop =
	     tagController_tmp_shimMaster_arff_rv$port1__read[99] &&
	     tagController_tmp_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_doDrop ;

  // rule RL_tagController_tmp_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_r_warnDoPut =
	     tagController_tmp_ug_master_u_r_putWire$whas &&
	     tagController_tmp_shimMaster_rff_rv[73] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_r_warnDoPut ;

  // rule RL_tagController_tmp_ug_master_u_r_doPut
  assign CAN_FIRE_RL_tagController_tmp_ug_master_u_r_doPut =
	     !tagController_tmp_shimMaster_rff_rv[73] &&
	     tagController_tmp_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_master_u_r_doPut =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_r_doPut ;

  // rule RL_tagController_tmp_passMemoryResponseWrite
  assign CAN_FIRE_RL_tagController_tmp_passMemoryResponseWrite =
	     tagController_tmp_shimMaster_bff_rv$port1__read[8] &&
	     tagController_tmp_tagCon$RDY_memory_response_put ;
  assign WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite =
	     CAN_FIRE_RL_tagController_tmp_passMemoryResponseWrite &&
	     !WILL_FIRE_RL_tagController_tmp_passMemoryResponseRead ;

  // rule RL_tagController_tmp_passMemoryResponseRead
  assign CAN_FIRE_RL_tagController_tmp_passMemoryResponseRead =
	     tagController_tmp_shimMaster_rff_rv$port1__read[73] &&
	     tagController_tmp_tagCon$RDY_memory_response_put ;
  assign WILL_FIRE_RL_tagController_tmp_passMemoryResponseRead =
	     CAN_FIRE_RL_tagController_tmp_passMemoryResponseRead ;

  // rule RL_msNoSynth_1_b_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue = 1'b0 ;
  assign WILL_FIRE_RL_msNoSynth_1_b_buffer_dequeue = 1'b0 ;

  // rule RL_msNoSynth_1_r_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue = 1'b0 ;
  assign WILL_FIRE_RL_msNoSynth_1_r_buffer_dequeue = 1'b0 ;

  // rule RL_ssNoSynth_0_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit =
	     tagController_tmp_shimSlave_arff_rv[98] ||
	     ssNoSynth_0_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_5) ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit ;

  // rule RL_tagController_tmp_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_ar_warnDoPut =
	     tagController_tmp_ug_slave_u_ar_putWire$whas &&
	     tagController_tmp_shimSlave_arff_rv[98] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_ar_warnDoPut ;

  // rule RL_ssNoSynth_0_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit =
	     (ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_5) &&
	     !tagController_tmp_shimSlave_arff_rv[98] ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ;

  // rule RL_tagController_tmp_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_ar_doPut =
	     !tagController_tmp_shimSlave_arff_rv[98] &&
	     tagController_tmp_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_ar_doPut ;

  // rule RL_tagController_tmp_passCacheRead
  assign CAN_FIRE_RL_tagController_tmp_passCacheRead =
	     tagController_tmp_shimSlave_arff_rv$port1__read[98] &&
	     tagController_tmp_tagCon$RDY_cache_request_put ;
  assign WILL_FIRE_RL_tagController_tmp_passCacheRead =
	     CAN_FIRE_RL_tagController_tmp_passCacheRead ;

  // rule RL_ssNoSynth_0_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_5 &&
	     (!CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ||
	      ssNoSynth_0_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_0_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit &&
	     ssNoSynth_0_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue ;

  // rule RL_ssNoSynth_1_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit =
	     ssNoSynth_1_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_6) ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit ;

  // rule RL_ssNoSynth_1_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit =
	     (ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_6) &&
	     plic$axi4_slave_arready ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ;

  // rule RL_ssNoSynth_1_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_6 &&
	     (!CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ||
	      ssNoSynth_1_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_1_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit &&
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue ;

  // rule RL_ssNoSynth_2_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit =
	     ssNoSynth_2_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_7) ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit ;

  // rule RL_ssNoSynth_2_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit =
	     (ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_7) &&
	     proc$debug_module_mem_server_arready ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ;

  // rule RL_ssNoSynth_2_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_7 &&
	     (!CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ||
	      ssNoSynth_2_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_2_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit &&
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue ;

  // rule RL_split_0_putFirst
  assign CAN_FIRE_RL_split_0_putFirst =
	     split_0_doPut_whas__42_AND_split_0_doPut_wget__ETC___d849 &&
	     split_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_0_putFirst = CAN_FIRE_RL_split_0_putFirst ;

  // rule RL_ssNoSynth_0_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit =
	     tagController_tmp_shimSlave_awff_rv[98] ||
	     ssNoSynth_0_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_split_0_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit ;

  // rule RL_tagController_tmp_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_aw_warnDoPut =
	     tagController_tmp_ug_slave_u_aw_putWire$whas &&
	     tagController_tmp_shimSlave_awff_rv[98] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_aw_warnDoPut ;

  // rule RL_ssNoSynth_0_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit =
	     (ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_split_0_flitLeft$write_1__SEL_2) &&
	     !tagController_tmp_shimSlave_awff_rv[98] ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ;

  // rule RL_tagController_tmp_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_aw_doPut =
	     !tagController_tmp_shimSlave_awff_rv[98] &&
	     tagController_tmp_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_aw_doPut ;

  // rule RL_tagController_tmp_getCacheAW
  assign CAN_FIRE_RL_tagController_tmp_getCacheAW =
	     tagController_tmp_shimSlave_awff_rv$port1__read[98] &&
	     tagController_tmp_awreqff$FULL_N ;
  assign WILL_FIRE_RL_tagController_tmp_getCacheAW =
	     CAN_FIRE_RL_tagController_tmp_getCacheAW ;

  // rule RL_ssNoSynth_0_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue =
	     MUX_split_0_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ||
	      ssNoSynth_0_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_0_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit &&
	     ssNoSynth_0_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue ;

  // rule RL_split_0_putOther
  assign CAN_FIRE_RL_split_0_putOther =
	     CAN_FIRE_RL_sink_selected &&
	     (!split_0_doPut$wget[172] || ssNoSynth_0_w_buffer_ff$FULL_N) &&
	     split_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_0_putOther = CAN_FIRE_RL_split_0_putOther ;

  // rule RL_ssNoSynth_0_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit =
	     tagController_tmp_shimSlave_wff_rv[74] ||
	     ssNoSynth_0_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_0_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit ;

  // rule RL_tagController_tmp_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_w_warnDoPut =
	     tagController_tmp_ug_slave_u_w_putWire$whas &&
	     tagController_tmp_shimSlave_wff_rv[74] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_w_warnDoPut ;

  // rule RL_ssNoSynth_0_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_w_dropFlit =
	     (ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_0_w_buffer_enqw$whas) &&
	     !tagController_tmp_shimSlave_wff_rv[74] ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ;

  // rule RL_tagController_tmp_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_w_doPut =
	     !tagController_tmp_shimSlave_wff_rv[74] &&
	     tagController_tmp_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_w_doPut ;

  // rule RL_tagController_tmp_passCacheWrite
  assign CAN_FIRE_RL_tagController_tmp_passCacheWrite =
	     tagController_tmp_shimSlave_wff_rv$port1__read[74] &&
	     tagController_tmp_tagCon$RDY_cache_request_put &&
	     tagController_tmp_awreqff$EMPTY_N ;
  assign WILL_FIRE_RL_tagController_tmp_passCacheWrite =
	     CAN_FIRE_RL_tagController_tmp_passCacheWrite &&
	     !WILL_FIRE_RL_tagController_tmp_passCacheRead ;

  // rule RL_ssNoSynth_0_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue =
	     ssNoSynth_0_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ||
	      ssNoSynth_0_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue ;

  // rule RL_ssNoSynth_0_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit &&
	     ssNoSynth_0_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue ;

  // rule RL_split_1_putFirst
  assign CAN_FIRE_RL_split_1_putFirst =
	     split_1_doPut_whas__71_AND_split_1_doPut_wget__ETC___d878 &&
	     split_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_1_putFirst = CAN_FIRE_RL_split_1_putFirst ;

  // rule RL_ssNoSynth_1_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit =
	     ssNoSynth_1_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_split_1_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit ;

  // rule RL_ssNoSynth_1_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit =
	     (ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_split_1_flitLeft$write_1__SEL_2) &&
	     plic$axi4_slave_awready ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ;

  // rule RL_ssNoSynth_1_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue =
	     MUX_split_1_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ||
	      ssNoSynth_1_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_1_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit &&
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue ;

  // rule RL_split_1_putOther
  assign CAN_FIRE_RL_split_1_putOther =
	     CAN_FIRE_RL_sink_selected_1 &&
	     (!split_1_doPut$wget[172] || ssNoSynth_1_w_buffer_ff$FULL_N) &&
	     split_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_1_putOther = CAN_FIRE_RL_split_1_putOther ;

  // rule RL_ssNoSynth_1_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit =
	     ssNoSynth_1_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_1_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit ;

  // rule RL_ssNoSynth_1_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_w_dropFlit =
	     (ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_1_w_buffer_enqw$whas) &&
	     plic$axi4_slave_wready ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ;

  // rule RL_ssNoSynth_1_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue =
	     ssNoSynth_1_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ||
	      ssNoSynth_1_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue ;

  // rule RL_ssNoSynth_1_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit &&
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue ;

  // rule RL_split_2_putFirst
  assign CAN_FIRE_RL_split_2_putFirst =
	     split_2_doPut_whas__00_AND_split_2_doPut_wget__ETC___d907 &&
	     split_2_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_2_putFirst = CAN_FIRE_RL_split_2_putFirst ;

  // rule RL_ssNoSynth_2_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit =
	     ssNoSynth_2_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_split_2_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit ;

  // rule RL_ssNoSynth_2_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit =
	     (ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_split_2_flitLeft$write_1__SEL_2) &&
	     proc$debug_module_mem_server_awready ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ;

  // rule RL_ssNoSynth_2_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue =
	     MUX_split_2_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ||
	      ssNoSynth_2_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_2_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit &&
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue ;

  // rule RL_split_2_putOther
  assign CAN_FIRE_RL_split_2_putOther =
	     CAN_FIRE_RL_sink_selected_2 &&
	     (!split_2_doPut$wget[172] || ssNoSynth_2_w_buffer_ff$FULL_N) &&
	     split_2_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_2_putOther = CAN_FIRE_RL_split_2_putOther ;

  // rule RL_ssNoSynth_2_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit =
	     ssNoSynth_2_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_2_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit ;

  // rule RL_ssNoSynth_2_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_w_dropFlit =
	     (ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_2_w_buffer_enqw$whas) &&
	     proc$debug_module_mem_server_wready ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ;

  // rule RL_ssNoSynth_2_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue =
	     ssNoSynth_2_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ||
	      ssNoSynth_2_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue ;

  // rule RL_ssNoSynth_2_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit &&
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue ;

  // rule RL_ifcs_0_firstFlit
  assign CAN_FIRE_RL_ifcs_0_firstFlit =
	     proc$master1_wvalid &&
	     IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d929 &&
	     ifcs_0_innerReq$FULL_N &&
	     ifcs_0_innerRoute$FULL_N &&
	     (IF_merged_0_flitLeft_26_EQ_0_27_THEN_NOT_proc__ETC___d936 ||
	      proc$master1_awvalid) &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_m_ETC___d977 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit = CAN_FIRE_RL_ifcs_0_firstFlit ;

  // rule RL_ifcs_0_followFlits
  assign CAN_FIRE_RL_ifcs_0_followFlits =
	     proc$master1_wvalid &&
	     IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d929 &&
	     ifcs_0_innerReq$FULL_N &&
	     (IF_merged_0_flitLeft_26_EQ_0_27_THEN_NOT_proc__ETC___d936 ||
	      proc$master1_awvalid) &&
	     ifcs_0_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits = CAN_FIRE_RL_ifcs_0_followFlits ;

  // rule RL_ifcs_0_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_nonRoutableFlit =
	     IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d929 &&
	     IF_merged_0_flitLeft_26_EQ_0_27_THEN_NOT_proc__ETC___d1012 &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_m_ETC___d977 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_nonRoutableFlit ;

  // rule RL_ifcs_0_drainFlits
  assign CAN_FIRE_RL_ifcs_0_drainFlits =
	     IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d929 &&
	     proc$master1_wvalid &&
	     ifcs_0_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_drainFlits = CAN_FIRE_RL_ifcs_0_drainFlits ;

  // rule __me_check_123
  assign CAN_FIRE___me_check_123 = 1'b1 ;
  assign WILL_FIRE___me_check_123 = 1'b1 ;

  // rule RL_ifcs_0_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     msNoSynth_0_b_buffer_ff$FULL_N && ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_drainNoRouteResponse ;

  // rule RL_checkSinkReady_3
  assign CAN_FIRE_RL_checkSinkReady_3 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_3 = 1'd1 ;

  // rule RL_ifcs_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     msNoSynth_1_b_buffer_ff$FULL_N && ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_4
  assign CAN_FIRE_RL_checkSinkReady_4 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_4 = 1'd1 ;

  // rule RL_craftReq_2
  assign CAN_FIRE_RL_craftReq_2 =
	     ifcs_0_routeBack$EMPTY_N && ifcs_0_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_2 = CAN_FIRE_RL_craftReq_2 ;

  // rule RL_craftReq_3
  assign CAN_FIRE_RL_craftReq_3 =
	     ifcs_1_routeBack$EMPTY_N && ifcs_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_3 = CAN_FIRE_RL_craftReq_3 ;

  // rule RL_craftReq_4
  assign CAN_FIRE_RL_craftReq_4 =
	     ifcs_2_routeBack$EMPTY_N && ifcs_2_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_4 = CAN_FIRE_RL_craftReq_4 ;

  // rule RL_arbitrate_1
  assign CAN_FIRE_RL_arbitrate_1 =
	     reqWires_1_0_whas__336_AND_reqWires_1_0_wget___ETC___d1346 &&
	     !state_1 ;
  assign WILL_FIRE_RL_arbitrate_1 = CAN_FIRE_RL_arbitrate_1 ;

  // rule RL_source_selected_2
  assign CAN_FIRE_RL_source_selected_2 =
	     (!ifcs_0_routeBack$EMPTY_N || ifcs_0_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_0$whas ;
  assign WILL_FIRE_RL_source_selected_2 = CAN_FIRE_RL_source_selected_2 ;

  // rule RL_burst_2
  assign CAN_FIRE_RL_burst_2 =
	     ifcs_0_rspBack$EMPTY_N && ifcs_0_routeBack$EMPTY_N &&
	     state_1_347_AND_activeSource_1_0_435_436_AND_i_ETC___d1438 ;
  assign WILL_FIRE_RL_burst_2 = CAN_FIRE_RL_burst_2 ;

  // rule RL_source_selected_3
  assign CAN_FIRE_RL_source_selected_3 =
	     (!ifcs_1_routeBack$EMPTY_N || ifcs_1_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_3 = CAN_FIRE_RL_source_selected_3 ;

  // rule RL_burst_3
  assign CAN_FIRE_RL_burst_3 =
	     ifcs_1_rspBack$EMPTY_N && ifcs_1_routeBack$EMPTY_N &&
	     state_1_347_AND_activeSource_1_1_468_469_AND_i_ETC___d1471 ;
  assign WILL_FIRE_RL_burst_3 = CAN_FIRE_RL_burst_3 ;

  // rule __me_check_157
  assign CAN_FIRE___me_check_157 = 1'b1 ;
  assign WILL_FIRE___me_check_157 = 1'b1 ;

  // rule RL_source_selected_4
  assign CAN_FIRE_RL_source_selected_4 =
	     (!ifcs_2_routeBack$EMPTY_N || ifcs_2_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_2$whas ;
  assign WILL_FIRE_RL_source_selected_4 = CAN_FIRE_RL_source_selected_4 ;

  // rule RL_burst_4
  assign CAN_FIRE_RL_burst_4 =
	     ifcs_2_rspBack$EMPTY_N && ifcs_2_routeBack$EMPTY_N &&
	     state_1_347_AND_activeSource_1_2_502_503_AND_i_ETC___d1505 ;
  assign WILL_FIRE_RL_burst_4 = CAN_FIRE_RL_burst_4 ;

  // rule __me_check_155
  assign CAN_FIRE___me_check_155 = 1'b1 ;
  assign WILL_FIRE___me_check_155 = 1'b1 ;

  // rule __me_check_159
  assign CAN_FIRE___me_check_159 = 1'b1 ;
  assign WILL_FIRE___me_check_159 = 1'b1 ;

  // rule RL_sink_selected_3
  assign CAN_FIRE_RL_sink_selected_3 =
	     !CAN_FIRE_RL_ifcs_0_drainNoRouteResponse && flitToSink_1_0$whas ;
  assign WILL_FIRE_RL_sink_selected_3 = CAN_FIRE_RL_sink_selected_3 ;

  // rule RL_sink_selected_4
  assign CAN_FIRE_RL_sink_selected_4 =
	     !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse && flitToSink_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_4 = CAN_FIRE_RL_sink_selected_4 ;

  // rule __me_check_161
  assign CAN_FIRE___me_check_161 = 1'b1 ;
  assign WILL_FIRE___me_check_161 = 1'b1 ;

  // rule RL_ifcs_0_forwardRsp
  assign CAN_FIRE_RL_ifcs_0_forwardRsp =
	     msNoSynth_0_b_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_3 &&
	     !ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_forwardRsp = CAN_FIRE_RL_ifcs_0_forwardRsp ;

  // rule RL_msNoSynth_0_b_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_0_b_forwardFlit =
	     msNoSynth_0_b_buffer_firstValid$Q_OUT &&
	     (msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      msNoSynth_0_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_0_b_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_0_b_forwardFlit ;

  // rule RL_msNoSynth_0_b_dropFlit
  assign CAN_FIRE_RL_msNoSynth_0_b_dropFlit =
	     (msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      msNoSynth_0_b_buffer_enqw$whas) &&
	     proc$master1_bready ;
  assign WILL_FIRE_RL_msNoSynth_0_b_dropFlit =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit ;

  // rule RL_msNoSynth_0_b_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue =
	     msNoSynth_0_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_0_b_dropFlit ||
	      msNoSynth_0_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_0_b_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue ;

  // rule RL_msNoSynth_0_b_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit &&
	     msNoSynth_0_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue ;

  // rule RL_ifcs_0_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d929 &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read &&
	     ifcs_0_noRouteRsp$FULL_N &&
	     proc$master1_wvalid ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;

  // rule __me_check_121
  assign CAN_FIRE___me_check_121 = 1'b1 ;
  assign WILL_FIRE___me_check_121 = 1'b1 ;

  // rule __me_check_122
  assign CAN_FIRE___me_check_122 = 1'b1 ;
  assign WILL_FIRE___me_check_122 = 1'b1 ;

  // rule __me_check_125
  assign CAN_FIRE___me_check_125 = 1'b1 ;
  assign WILL_FIRE___me_check_125 = 1'b1 ;

  // rule RL_merged_0_genFirst
  assign CAN_FIRE_RL_merged_0_genFirst =
	     proc$master1_awvalid && proc$master1_wvalid &&
	     merged_0_doDrop$whas &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genFirst = CAN_FIRE_RL_merged_0_genFirst ;

  // rule RL_msNoSynth_0_aw_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_aw_forwardReady = 1'd1 ;

  // rule RL_merged_0_genOther
  assign CAN_FIRE_RL_merged_0_genOther =
	     proc$master1_wvalid && merged_0_doDrop$whas &&
	     merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genOther = CAN_FIRE_RL_merged_0_genOther ;

  // rule RL_msNoSynth_0_w_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_w_forwardReady = 1'd1 ;

  // rule RL_ifcs_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_1_forwardRsp =
	     msNoSynth_1_b_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_4 &&
	     !ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_forwardRsp = CAN_FIRE_RL_ifcs_1_forwardRsp ;

  // rule RL_msNoSynth_1_b_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue =
	     msNoSynth_1_b_buffer_enqw$whas ;
  assign WILL_FIRE_RL_msNoSynth_1_b_buffer_enqueue =
	     msNoSynth_1_b_buffer_enqw$whas ;

  // rule RL_ifcs_0_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_firstFlit_1 =
	     tagController_tmp_shimSlave_bff_rv$port1__read[7] &&
	     ifcs_0_rspBack$FULL_N &&
	     ifcs_0_routeBack$FULL_N &&
	     !ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit_1 = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;

  // rule RL_ifcs_0_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_followFlits_1 =
	     tagController_tmp_shimSlave_bff_rv$port1__read[7] &&
	     ifcs_0_rspBack$FULL_N &&
	     ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // rule __me_check_130
  assign CAN_FIRE___me_check_130 = 1'b1 ;
  assign WILL_FIRE___me_check_130 = 1'b1 ;

  // rule RL_ssNoSynth_0_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_0_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_0_b_forwardReady = 1'd1 ;

  // rule RL_tagController_tmp_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_warnDoDrop =
	     tagController_tmp_ug_slave_u_b_dropWire$whas &&
	     !tagController_tmp_shimSlave_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_warnDoDrop ;

  // rule RL_tagController_tmp_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_doDrop =
	     tagController_tmp_shimSlave_bff_rv$port1__read[7] &&
	     tagController_tmp_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_doDrop ;

  // rule RL_ifcs_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_firstFlit_1 =
	     plic$axi4_slave_bvalid && ifcs_1_rspBack$FULL_N &&
	     ifcs_1_routeBack$FULL_N &&
	     !ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_firstFlit_1 = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;

  // rule RL_ifcs_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_followFlits_1 =
	     plic$axi4_slave_bvalid && ifcs_1_rspBack$FULL_N &&
	     ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // rule __me_check_132
  assign CAN_FIRE___me_check_132 = 1'b1 ;
  assign WILL_FIRE___me_check_132 = 1'b1 ;

  // rule RL_ssNoSynth_1_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_1_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_1_b_forwardReady = 1'd1 ;

  // rule RL_ifcs_2_firstFlit
  assign CAN_FIRE_RL_ifcs_2_firstFlit =
	     proc$debug_module_mem_server_bvalid && ifcs_2_rspBack$FULL_N &&
	     ifcs_2_routeBack$FULL_N &&
	     !ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_firstFlit = CAN_FIRE_RL_ifcs_2_firstFlit ;

  // rule RL_ifcs_2_followFlits
  assign CAN_FIRE_RL_ifcs_2_followFlits =
	     proc$debug_module_mem_server_bvalid && ifcs_2_rspBack$FULL_N &&
	     ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_followFlits = CAN_FIRE_RL_ifcs_2_followFlits ;

  // rule __me_check_134
  assign CAN_FIRE___me_check_134 = 1'b1 ;
  assign WILL_FIRE___me_check_134 = 1'b1 ;

  // rule RL_ssNoSynth_2_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_2_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_2_b_forwardReady = 1'd1 ;

  // rule RL_ifcs_0_1_firstFlit
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit =
	     proc$master1_arvalid && ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_innerRoute$FULL_N &&
	     ifcs_0_1_state == 2'd0 &&
	     IF_proc_master1_ar_araddr__520_BITS_63_TO_40_5_ETC___d1546 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit = CAN_FIRE_RL_ifcs_0_1_firstFlit ;

  // rule RL_ifcs_0_1_followFlits
  assign CAN_FIRE_RL_ifcs_0_1_followFlits =
	     proc$master1_arvalid && ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits =
	     CAN_FIRE_RL_ifcs_0_1_followFlits ;

  // rule RL_ifcs_0_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     ifcs_0_1_noRoute_flitCount == 9'd0 && proc$master1_arvalid &&
	     ifcs_0_1_state == 2'd0 &&
	     IF_proc_master1_ar_araddr__520_BITS_63_TO_40_5_ETC___d1546 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ;

  // rule RL_ifcs_0_1_drainFlits
  assign CAN_FIRE_RL_ifcs_0_1_drainFlits =
	     proc$master1_arvalid && ifcs_0_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_1_drainFlits = CAN_FIRE_RL_ifcs_0_1_drainFlits ;

  // rule __me_check_165
  assign CAN_FIRE___me_check_165 = 1'b1 ;
  assign WILL_FIRE___me_check_165 = 1'b1 ;

  // rule RL_ifcs_0_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     msNoSynth_0_r_buffer_ff$FULL_N && ifcs_0_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_8
  assign CAN_FIRE_RL_checkSinkReady_8 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_8 = 1'd1 ;

  // rule RL_ifcs_1_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     msNoSynth_1_r_buffer_ff$FULL_N && ifcs_1_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_9
  assign CAN_FIRE_RL_checkSinkReady_9 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_9 = 1'd1 ;

  // rule RL_craftReq_7
  assign CAN_FIRE_RL_craftReq_7 =
	     ifcs_0_1_routeBack$EMPTY_N && ifcs_0_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_7 = CAN_FIRE_RL_craftReq_7 ;

  // rule RL_craftReq_8
  assign CAN_FIRE_RL_craftReq_8 =
	     ifcs_1_1_routeBack$EMPTY_N && ifcs_1_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_8 = CAN_FIRE_RL_craftReq_8 ;

  // rule RL_craftReq_9
  assign CAN_FIRE_RL_craftReq_9 =
	     ifcs_2_1_routeBack$EMPTY_N && ifcs_2_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_9 = CAN_FIRE_RL_craftReq_9 ;

  // rule RL_arbitrate_3
  assign CAN_FIRE_RL_arbitrate_3 =
	     reqWires_1_1_0_whas__918_AND_reqWires_1_1_0_wg_ETC___d1928 &&
	     !state_1_1_1 ;
  assign WILL_FIRE_RL_arbitrate_3 = CAN_FIRE_RL_arbitrate_3 ;

  // rule RL_source_selected_7
  assign CAN_FIRE_RL_source_selected_7 =
	     (!ifcs_0_1_routeBack$EMPTY_N || ifcs_0_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_7 = CAN_FIRE_RL_source_selected_7 ;

  // rule RL_burst_7
  assign CAN_FIRE_RL_burst_7 =
	     ifcs_0_1_rspBack$EMPTY_N && ifcs_0_1_routeBack$EMPTY_N &&
	     state_1_1_1_929_AND_activeSource_1_1_0_023_024_ETC___d2026 ;
  assign WILL_FIRE_RL_burst_7 = CAN_FIRE_RL_burst_7 ;

  // rule RL_source_selected_8
  assign CAN_FIRE_RL_source_selected_8 =
	     (!ifcs_1_1_routeBack$EMPTY_N || ifcs_1_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_1_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_8 = CAN_FIRE_RL_source_selected_8 ;

  // rule RL_burst_8
  assign CAN_FIRE_RL_burst_8 =
	     ifcs_1_1_rspBack$EMPTY_N && ifcs_1_1_routeBack$EMPTY_N &&
	     state_1_1_1_929_AND_activeSource_1_1_1_1_059_0_ETC___d2062 ;
  assign WILL_FIRE_RL_burst_8 = CAN_FIRE_RL_burst_8 ;

  // rule __me_check_200
  assign CAN_FIRE___me_check_200 = 1'b1 ;
  assign WILL_FIRE___me_check_200 = 1'b1 ;

  // rule RL_source_selected_9
  assign CAN_FIRE_RL_source_selected_9 =
	     (!ifcs_2_1_routeBack$EMPTY_N || ifcs_2_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_2$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_9 = CAN_FIRE_RL_source_selected_9 ;

  // rule RL_burst_9
  assign CAN_FIRE_RL_burst_9 =
	     ifcs_2_1_rspBack$EMPTY_N && ifcs_2_1_routeBack$EMPTY_N &&
	     state_1_1_1_929_AND_activeSource_1_1_2_095_096_ETC___d2098 ;
  assign WILL_FIRE_RL_burst_9 = CAN_FIRE_RL_burst_9 ;

  // rule __me_check_198
  assign CAN_FIRE___me_check_198 = 1'b1 ;
  assign WILL_FIRE___me_check_198 = 1'b1 ;

  // rule __me_check_202
  assign CAN_FIRE___me_check_202 = 1'b1 ;
  assign WILL_FIRE___me_check_202 = 1'b1 ;

  // rule RL_sink_selected_8
  assign CAN_FIRE_RL_sink_selected_8 =
	     !CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse &&
	     flitToSink_1_1_0$whas ;
  assign WILL_FIRE_RL_sink_selected_8 = CAN_FIRE_RL_sink_selected_8 ;

  // rule RL_sink_selected_9
  assign CAN_FIRE_RL_sink_selected_9 =
	     !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse &&
	     flitToSink_1_1_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_9 = CAN_FIRE_RL_sink_selected_9 ;

  // rule __me_check_204
  assign CAN_FIRE___me_check_204 = 1'b1 ;
  assign WILL_FIRE___me_check_204 = 1'b1 ;

  // rule RL_ifcs_0_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_0_1_forwardRsp =
	     msNoSynth_0_r_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_8 &&
	     !ifcs_0_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_1_forwardRsp = CAN_FIRE_RL_ifcs_0_1_forwardRsp ;

  // rule RL_msNoSynth_0_r_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_0_r_forwardFlit =
	     msNoSynth_0_r_buffer_firstValid$Q_OUT &&
	     (msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      msNoSynth_0_r_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_0_r_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_0_r_forwardFlit ;

  // rule RL_msNoSynth_0_r_dropFlit
  assign CAN_FIRE_RL_msNoSynth_0_r_dropFlit =
	     (msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      msNoSynth_0_r_buffer_enqw$whas) &&
	     proc$master1_rready ;
  assign WILL_FIRE_RL_msNoSynth_0_r_dropFlit =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit ;

  // rule RL_msNoSynth_0_r_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue =
	     msNoSynth_0_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_0_r_dropFlit ||
	      msNoSynth_0_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_0_r_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue ;

  // rule RL_msNoSynth_0_r_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit &&
	     msNoSynth_0_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue ;

  // rule RL_ifcs_0_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     x_port1__read__h67452 != 9'd0 && ifcs_0_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h67452 != 9'd1 || proc$master1_arvalid) ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;

  // rule __me_check_163
  assign CAN_FIRE___me_check_163 = 1'b1 ;
  assign WILL_FIRE___me_check_163 = 1'b1 ;

  // rule __me_check_164
  assign CAN_FIRE___me_check_164 = 1'b1 ;
  assign WILL_FIRE___me_check_164 = 1'b1 ;

  // rule __me_check_167
  assign CAN_FIRE___me_check_167 = 1'b1 ;
  assign WILL_FIRE___me_check_167 = 1'b1 ;

  // rule RL_msNoSynth_0_ar_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_ar_forwardReady = 1'd1 ;

  // rule RL_ifcs_1_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_1_1_forwardRsp =
	     msNoSynth_1_r_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_9 &&
	     !ifcs_1_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_1_forwardRsp = CAN_FIRE_RL_ifcs_1_1_forwardRsp ;

  // rule RL_msNoSynth_1_r_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue =
	     msNoSynth_1_r_buffer_enqw$whas ;
  assign WILL_FIRE_RL_msNoSynth_1_r_buffer_enqueue =
	     msNoSynth_1_r_buffer_enqw$whas ;

  // rule RL_ifcs_1_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     ifcs_1_1_noRoute_flitCount != 9'd0 &&
	     ifcs_1_1_noRouteRsp$FULL_N &&
	     ifcs_1_1_noRoute_flitCount != 9'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;

  // rule RL_ifcs_0_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     tagController_tmp_shimSlave_rff_rv$port1__read[73] &&
	     ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_routeBack$FULL_N &&
	     !ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;

  // rule RL_ifcs_0_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_1_followFlits_1 =
	     tagController_tmp_shimSlave_rff_rv$port1__read[73] &&
	     ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_1_followFlits_1 ;

  // rule __me_check_173
  assign CAN_FIRE___me_check_173 = 1'b1 ;
  assign WILL_FIRE___me_check_173 = 1'b1 ;

  // rule RL_ssNoSynth_0_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_0_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_0_r_forwardReady = 1'd1 ;

  // rule RL_tagController_tmp_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_warnDoDrop =
	     tagController_tmp_ug_slave_u_r_dropWire$whas &&
	     !tagController_tmp_shimSlave_rff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_warnDoDrop ;

  // rule RL_tagController_tmp_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_doDrop =
	     tagController_tmp_shimSlave_rff_rv$port1__read[73] &&
	     tagController_tmp_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_tagController_tmp_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_doDrop ;

  // rule RL_ifcs_1_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     plic$axi4_slave_rvalid && ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_routeBack$FULL_N &&
	     !ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;

  // rule RL_ifcs_1_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_1_followFlits_1 =
	     plic$axi4_slave_rvalid && ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_1_followFlits_1 ;

  // rule __me_check_175
  assign CAN_FIRE___me_check_175 = 1'b1 ;
  assign WILL_FIRE___me_check_175 = 1'b1 ;

  // rule RL_ssNoSynth_1_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_1_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_1_r_forwardReady = 1'd1 ;

  // rule RL_ifcs_2_1_firstFlit
  assign CAN_FIRE_RL_ifcs_2_1_firstFlit =
	     proc$debug_module_mem_server_rvalid && ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_routeBack$FULL_N &&
	     !ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_firstFlit = CAN_FIRE_RL_ifcs_2_1_firstFlit ;

  // rule RL_ifcs_2_1_followFlits
  assign CAN_FIRE_RL_ifcs_2_1_followFlits =
	     proc$debug_module_mem_server_rvalid && ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_followFlits =
	     CAN_FIRE_RL_ifcs_2_1_followFlits ;

  // rule __me_check_177
  assign CAN_FIRE___me_check_177 = 1'b1 ;
  assign WILL_FIRE___me_check_177 = 1'b1 ;

  // rule RL_ssNoSynth_2_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_2_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_2_r_forwardReady = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_activeSource_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[1] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_2 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;
  assign MUX_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_ifcs_0_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	     !tagController_tmp_shimSlave_rff_rvport1__read_ETC__q1[1] ;
  assign MUX_ifcs_0_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ;
  assign MUX_ifcs_0_state$write_1__SEL_1 =
	     MUX_ifcs_0_state$write_1__PSEL_1 && proc$master1_wlast ;
  assign MUX_ifcs_0_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ifcs_0_firstFlit && !proc$master1_wlast ;
  assign MUX_ifcs_0_state$write_1__SEL_3 =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp && !proc$master1_wlast ;
  assign MUX_ifcs_1_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 && plic$axi4_slave_rlast ;
  assign MUX_ifcs_2_1_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_2_1_followFlits &&
	     proc$debug_module_mem_server_rlast ;
  assign MUX_split_0_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ;
  assign MUX_split_0_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;
  assign MUX_split_1_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ;
  assign MUX_split_1_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;
  assign MUX_split_2_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ;
  assign MUX_split_2_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;
  assign MUX_state$write_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[1] ;
  assign MUX_state$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[1] ;
  assign MUX_state_1_1_1$write_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[1] ;
  assign MUX_state_1_1_1$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[1] ;
  assign MUX_state_1_1_1$write_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[1] ;
  assign MUX_activeSource_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate &&
	     IF_SEXT_arbiter_lastSelect_160_161_BIT_0_162_A_ETC___d1184 ;
  assign MUX_activeSource_1$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate &&
	     IF_SEXT_arbiter_lastSelect_160_161_BIT_0_162_A_ETC___d1188 ;
  assign MUX_activeSource_1_1_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1976 ;
  assign MUX_activeSource_1_1_1_1$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1982 ;
  assign MUX_activeSource_1_1_2$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1988 ;
  assign MUX_merged_0_flitLeft$write_1__VAL_1 = merged_0_flitLeft - 8'd1 ;
  always@(MUX_flitToSink_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_0$wset_1__SEL_4 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_0$wset_1__SEL_5 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_0$wset_1__SEL_6 or ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_0$wset_1__SEL_1 || MUX_flitToSink_1_0$wset_1__SEL_4:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_2 || MUX_flitToSink_1_0$wset_1__SEL_5:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_3 || MUX_flitToSink_1_0$wset_1__SEL_6:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_2_rspBack$D_OUT;
      default: MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_4 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_5 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_6 or ifcs_2_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_0$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_4:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_5:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_6:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_2_1_rspBack$D_OUT;
      default: MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1$wset_1__SEL_4 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1$wset_1__SEL_5 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1$wset_1__SEL_6 or ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1$wset_1__SEL_1 || MUX_flitToSink_1_1$wset_1__SEL_4:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_2 || MUX_flitToSink_1_1$wset_1__SEL_5:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_3 || MUX_flitToSink_1_1$wset_1__SEL_6:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_2_rspBack$D_OUT;
      default: MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_4 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_5 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_6 or ifcs_2_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_1_1$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_4:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_5:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_6:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_2_1_rspBack$D_OUT;
      default: MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_split_0_flitLeft$write_1__VAL_1 = split_0_flitLeft - 8'd1 ;
  assign MUX_split_1_flitLeft$write_1__VAL_1 = split_1_flitLeft - 8'd1 ;
  assign MUX_split_2_flitLeft$write_1__VAL_1 = split_2_flitLeft - 8'd1 ;
  assign MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_1 =
	     { tmp__h6972[39:3],
	       4'd0,
	       tagController_tmp_awreqff$D_OUT[97:93],
	       3'd1,
	       tagController_tmp_shimSlave_wff_rv$port1__read[1],
	       tagController_tmp_awreqff$D_OUT[14:11] < 4'd4,
	       1'd0,
	       tagController_tmp_shimSlave_wff_rv$port1__read[9:2],
	       8'd255,
	       tagController_tmp_shimSlave_wff_rv$port1__read[0],
	       tagController_tmp_shimSlave_wff_rv$port1__read[73:10],
	       tagController_tmp_awreqff$D_OUT[28:21] } ;
  assign MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_2 =
	     { tagController_tmp_shimSlave_arff_rv$port1__read[68:29],
	       1'b0,
	       tagController_tmp_shimSlave_arff_rv$port1__read[97:93],
	       86'h02AAAAAAAAAAAAAAAAAAAA,
	       tagController_tmp_shimSlave_arff_rv$port1__read[14:11] < 4'd4,
	       2'd0,
	       tagController_tmp_shimSlave_arff_rv$port1__read[23:18] } ;
  assign MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_1 =
	     { tagController_tmp_shimMaster_bff_rv$port1__read[7:2],
	       71'h0CAAAAAAAAAAAAAAAA } ;
  assign MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_2 =
	     { tagController_tmp_shimMaster_rff_rv$port1__read[72:67],
	       4'd0,
	       tagController_tmp_shimMaster_rff_rv$port1__read[0],
	       1'd0,
	       tagController_tmp_shimMaster_rff_rv$port1__read[67:3] } ;

  // inlined wires
  assign tmp0_b_buffer_enqw$wget =
	     { cpu_imem_master_bid[4:0], cpu_imem_master_bresp } ;
  assign tmp0_r_buffer_enqw$wget =
	     { cpu_imem_master_rid[4:0],
	       cpu_imem_master_rdata,
	       cpu_imem_master_rresp,
	       cpu_imem_master_rlast,
	       1'd0 } ;
  assign tmp1_u_aw_peekWire$wget =
	     { proc$master0_awid,
	       proc$master0_awaddr,
	       proc$master0_awlen,
	       proc$master0_awsize,
	       proc$master0_awburst,
	       proc$master0_awlock,
	       proc$master0_awcache,
	       proc$master0_awprot,
	       proc$master0_awqos,
	       proc$master0_awregion } ;
  assign tmp1_u_w_peekWire$wget =
	     { proc$master0_wdata,
	       proc$master0_wstrb,
	       proc$master0_wlast,
	       proc$master0_wuser } ;
  assign tmp1_u_b_putWire$whas =
	     cpu_imem_master_bvalid && tmp0_b_buffer_ff$FULL_N ;
  assign tmp1_u_ar_peekWire$wget =
	     { proc$master0_arid,
	       proc$master0_araddr,
	       proc$master0_arlen,
	       proc$master0_arsize,
	       proc$master0_arburst,
	       proc$master0_arlock,
	       proc$master0_arcache,
	       proc$master0_arprot,
	       proc$master0_arqos,
	       proc$master0_arregion } ;
  assign tmp1_u_r_putWire$whas =
	     cpu_imem_master_rvalid && tmp0_r_buffer_ff$FULL_N ;
  assign tagController_tmp_ug_slave_u_aw_putWire$wget =
	     ssNoSynth_0_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_aw_buffer_ff$D_OUT :
	       split_0_doPut$wget[171:74] ;
  assign tagController_tmp_ug_slave_u_aw_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit &&
	     !tagController_tmp_shimSlave_awff_rv[98] ;
  assign tagController_tmp_ug_slave_u_w_putWire$wget =
	     ssNoSynth_0_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_w_buffer_ff$D_OUT :
	       split_0_doPut$wget[73:0] ;
  assign tagController_tmp_ug_slave_u_w_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit &&
	     !tagController_tmp_shimSlave_wff_rv[74] ;
  assign tagController_tmp_ug_slave_u_b_peekWire$wget =
	     tagController_tmp_shimSlave_bff_rv$port1__read[6:0] ;
  assign tagController_tmp_ug_slave_u_ar_putWire$wget =
	     ssNoSynth_0_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_ar_buffer_ff$D_OUT :
	       ssNoSynth_0_ar_buffer_enqw$wget ;
  assign tagController_tmp_ug_slave_u_ar_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit &&
	     !tagController_tmp_shimSlave_arff_rv[98] ;
  assign tagController_tmp_ug_slave_u_r_peekWire$wget =
	     tagController_tmp_shimSlave_rff_rv$port1__read[72:0] ;
  assign tagController_tmp_ug_master_u_b_putWire$wget =
	     { cpu_dmem_master_bid, cpu_dmem_master_bresp } ;
  assign tagController_tmp_ug_master_u_b_putWire$whas =
	     cpu_dmem_master_bvalid &&
	     !tagController_tmp_shimMaster_bff_rv[8] ;
  assign tagController_tmp_ug_master_u_r_putWire$wget =
	     { cpu_dmem_master_rid,
	       cpu_dmem_master_rdata,
	       cpu_dmem_master_rresp,
	       cpu_dmem_master_rlast } ;
  assign tagController_tmp_ug_master_u_r_putWire$whas =
	     cpu_dmem_master_rvalid &&
	     !tagController_tmp_shimMaster_rff_rv[73] ;
  assign msNoSynth_0_w_dwReady$whas =
	     WILL_FIRE_RL_merged_0_genOther ||
	     WILL_FIRE_RL_merged_0_genFirst ;
  assign msNoSynth_0_b_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ?
	       ifcs_0_noRouteRsp$D_OUT :
	       MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_0_b_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_0_forwardRsp ;
  assign msNoSynth_0_ar_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp &&
	     x_port1__read__h67452 == 9'd1 ||
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign msNoSynth_0_r_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ?
	       ifcs_0_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_0_r_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_0_1_forwardRsp ;
  assign msNoSynth_1_b_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ?
	       ifcs_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_1_b_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_1_forwardRsp ;
  assign msNoSynth_1_r_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ?
	       ifcs_1_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_1_r_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_1_1_forwardRsp ;
  assign ssNoSynth_0_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] ||
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[172] ;
  assign ssNoSynth_0_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ssNoSynth_0_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_0_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_0_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_0_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ssNoSynth_1_aw_buffer_enqw$wget = split_1_doPut$wget[171:74] ;
  assign ssNoSynth_1_w_buffer_enqw$wget = split_1_doPut$wget[73:0] ;
  assign ssNoSynth_1_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] ||
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[172] ;
  assign ssNoSynth_1_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ssNoSynth_1_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_1_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_1_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_1_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ssNoSynth_2_aw_buffer_enqw$wget = split_2_doPut$wget[171:74] ;
  assign ssNoSynth_2_w_buffer_enqw$wget = split_2_doPut$wget[73:0] ;
  assign ssNoSynth_2_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] ||
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[172] ;
  assign ssNoSynth_2_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_2_followFlits ||
	     WILL_FIRE_RL_ifcs_2_firstFlit ;
  assign ssNoSynth_2_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_2$wset_1__SEL_1 ||
	      MUX_flitToSink_1_2$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_2_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_2_1_followFlits ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit ;
  assign split_0_doPut$wget =
	     (MUX_flitToSink_0$wset_1__SEL_1 ||
	      MUX_flitToSink_0$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_1_doPut$wget =
	     (MUX_flitToSink_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_2_doPut$wget =
	     (MUX_flitToSink_2$wset_1__SEL_1 ||
	      MUX_flitToSink_2$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign reqWires_0$wget =
	     (!ifcs_0_innerRoute$D_OUT[0] ||
	      !IF_split_0_flitLeft_50_EQ_0_51_THEN_ssNoSynth__ETC___d1102) ?
	       IF_NOT_ifcs_0_innerRoute_first__110_BIT_1_119__ETC___d1132 :
	       ifcs_0_innerRoute$D_OUT[0] ;
  assign reqWires_1$wget =
	     (!ifcs_1_innerRoute$D_OUT[0] ||
	      !IF_split_0_flitLeft_50_EQ_0_51_THEN_ssNoSynth__ETC___d1102) ?
	       IF_NOT_ifcs_1_innerRoute_first__139_BIT_1_143__ETC___d1148 :
	       ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_0$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[1] ;
  assign flitToSink_2$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[2] ;
  assign reqWires_1_0$wget =
	     (!ifcs_0_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_0_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_0_routeBack$D_OUT[0] ;
  assign reqWires_1_1$wget =
	     (!ifcs_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_1_routeBack$D_OUT[0] ;
  assign reqWires_1_2$wget =
	     (!ifcs_2_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_2_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_2_routeBack$D_OUT[0] ;
  assign flitToSink_1_0$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ;
  assign flitToSink_1_1$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ;
  assign reqWires_1_0_1$wget =
	     (!ifcs_0_1_innerRoute$D_OUT[0] ||
	      !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_ifcs_0_1_innerRoute_first__702_BIT_1_71_ETC___d1724 :
	       ifcs_0_1_innerRoute$D_OUT[0] ;
  assign reqWires_1_1_1$wget =
	     (!ifcs_1_1_innerRoute$D_OUT[0] ||
	      !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_ifcs_1_1_innerRoute_first__731_BIT_1_73_ETC___d1740 :
	       ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_0_1$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_1_1$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[1] ;
  assign flitToSink_1_2$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[2] ;
  assign reqWires_1_1_0$wget =
	     (!ifcs_0_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_0_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_0_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_1_1$wget =
	     (!ifcs_1_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_1_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_1_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_2$wget =
	     (!ifcs_2_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_2_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_2_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_0$whas =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_1_1$whas =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ;
  assign tmp1_u_aw_dropWire$whas =
	     proc$master0_awvalid && cpu_imem_master_awready ;
  assign tmp1_u_w_dropWire$whas =
	     proc$master0_wvalid && cpu_imem_master_wready ;
  assign tmp1_u_ar_dropWire$whas =
	     proc$master0_arvalid && cpu_imem_master_arready ;
  assign tagController_tmp_ug_slave_u_b_dropWire$whas =
	     tagController_tmp_shimSlave_bff_rv$port1__read[7] &&
	     ssNoSynth_0_b_dwReady$whas ;
  assign tagController_tmp_ug_slave_u_r_dropWire$whas =
	     tagController_tmp_shimSlave_rff_rv$port1__read[73] &&
	     ssNoSynth_0_r_dwReady$whas ;
  assign tagController_tmp_ug_master_u_aw_dropWire$whas =
	     tagController_tmp_shimMaster_awff_rv$port1__read[99] &&
	     cpu_dmem_master_awready ;
  assign tagController_tmp_ug_master_u_w_dropWire$whas =
	     tagController_tmp_shimMaster_wff_rv$port1__read[73] &&
	     cpu_dmem_master_wready ;
  assign tagController_tmp_ug_master_u_ar_dropWire$whas =
	     tagController_tmp_shimMaster_arff_rv$port1__read[99] &&
	     cpu_dmem_master_arready ;
  assign merged_0_doDrop$whas =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp ||
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign sourceSelect_1_0$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1394 ;
  assign sourceSelect_1_1$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1400 ;
  assign sourceSelect_1_2$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1406 ;
  assign sourceSelect_1_0_1$whas =
	     WILL_FIRE_RL_arbitrate_2 &&
	     IF_SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_7_ETC___d1776 ;
  assign sourceSelect_1_1_1$whas =
	     WILL_FIRE_RL_arbitrate_2 &&
	     IF_SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_7_ETC___d1780 ;
  assign tagController_tmp_shimSlave_awff_rv$port0__write_1 =
	     { 1'd1, tagController_tmp_ug_slave_u_aw_putWire$wget } ;
  assign tagController_tmp_shimSlave_awff_rv$port1__read =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_aw_doPut ?
	       tagController_tmp_shimSlave_awff_rv$port0__write_1 :
	       tagController_tmp_shimSlave_awff_rv ;
  assign tagController_tmp_shimSlave_awff_rv$port2__read =
	     CAN_FIRE_RL_tagController_tmp_getCacheAW ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       tagController_tmp_shimSlave_awff_rv$port1__read ;
  assign tagController_tmp_shimSlave_wff_rv$port0__write_1 =
	     { 1'd1, tagController_tmp_ug_slave_u_w_putWire$wget } ;
  assign tagController_tmp_shimSlave_wff_rv$port1__read =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_w_doPut ?
	       tagController_tmp_shimSlave_wff_rv$port0__write_1 :
	       tagController_tmp_shimSlave_wff_rv ;
  assign tagController_tmp_shimSlave_wff_rv$port2__read =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       tagController_tmp_shimSlave_wff_rv$port1__read ;
  assign tagController_tmp_shimSlave_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_tagController_tmp_passCacheResponse &&
	     tagController_tmp_tagCon$cache_response_get[68:67] != 2'd0 ;
  assign tagController_tmp_shimSlave_bff_rv$port0__write_1 =
	     { 1'd1,
	       (tagController_tmp_tagCon$cache_response_get[68:67] == 2'd1) ?
		 tagController_tmp_tagCon$cache_response_get[75:71] :
		 5'd0,
	       2'd0 } ;
  assign tagController_tmp_shimSlave_bff_rv$port1__read =
	     tagController_tmp_shimSlave_bff_rv$EN_port0__write ?
	       tagController_tmp_shimSlave_bff_rv$port0__write_1 :
	       tagController_tmp_shimSlave_bff_rv ;
  assign tagController_tmp_shimSlave_bff_rv$port2__read =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_b_doDrop ?
	       8'd42 :
	       tagController_tmp_shimSlave_bff_rv$port1__read ;
  assign tagController_tmp_shimSlave_arff_rv$port0__write_1 =
	     { 1'd1, tagController_tmp_ug_slave_u_ar_putWire$wget } ;
  assign tagController_tmp_shimSlave_arff_rv$port1__read =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_ar_doPut ?
	       tagController_tmp_shimSlave_arff_rv$port0__write_1 :
	       tagController_tmp_shimSlave_arff_rv ;
  assign tagController_tmp_shimSlave_arff_rv$port2__read =
	     CAN_FIRE_RL_tagController_tmp_passCacheRead ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       tagController_tmp_shimSlave_arff_rv$port1__read ;
  assign tagController_tmp_shimSlave_rff_rv$EN_port0__write =
	     WILL_FIRE_RL_tagController_tmp_passCacheResponse &&
	     tagController_tmp_tagCon$cache_response_get[68:67] == 2'd0 ;
  assign tagController_tmp_shimSlave_rff_rv$port0__write_1 =
	     { 1'd1,
	       tagController_tmp_tagCon$cache_response_get[75:71],
	       tagController_tmp_tagCon$cache_response_get[63:0],
	       2'd0,
	       tagController_tmp_tagCon$cache_response_get[66],
	       tagController_tmp_tagCon$cache_response_get[64] } ;
  assign tagController_tmp_shimSlave_rff_rv$port1__read =
	     tagController_tmp_shimSlave_rff_rv$EN_port0__write ?
	       tagController_tmp_shimSlave_rff_rv$port0__write_1 :
	       tagController_tmp_shimSlave_rff_rv ;
  assign tagController_tmp_shimSlave_rff_rv$port2__read =
	     CAN_FIRE_RL_tagController_tmp_ug_slave_u_r_doDrop ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       tagController_tmp_shimSlave_rff_rv$port1__read ;
  assign tagController_tmp_shimMaster_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_tagController_tmp_passMemoryRequest &&
	     tagController_tmp_tagCon$memory_request_get[93:92] == 2'd1 &&
	     !tagController_tmp_doneSendingAW ;
  assign tagController_tmp_shimMaster_awff_rv$port0__write_1 =
	     { 1'd1,
	       tagController_tmp_tagCon$memory_request_get[100:95],
	       aw_awaddr__h9414,
	       tagController_tmp_tagCon$memory_request_get[7:0],
	       aw_awsize_val__h11153,
	       3'd2,
	       x__h12819,
	       11'd0 } ;
  assign tagController_tmp_shimMaster_awff_rv$port1__read =
	     tagController_tmp_shimMaster_awff_rv$EN_port0__write ?
	       tagController_tmp_shimMaster_awff_rv$port0__write_1 :
	       tagController_tmp_shimMaster_awff_rv ;
  assign tagController_tmp_shimMaster_awff_rv$port2__read =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_aw_doDrop ?
	       100'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       tagController_tmp_shimMaster_awff_rv$port1__read ;
  assign tagController_tmp_shimMaster_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_tagController_tmp_passMemoryRequest &&
	     tagController_tmp_tagCon$memory_request_get[93:92] == 2'd1 ;
  assign tagController_tmp_shimMaster_wff_rv$port0__write_1 =
	     { 1'd1,
	       tagController_tmp_tagCon$memory_request_get[71:8],
	       tagController_tmp_tagCon$memory_request_get[88:81],
	       tagController_tmp_tagCon$memory_request_get[91] } ;
  assign tagController_tmp_shimMaster_wff_rv$port1__read =
	     tagController_tmp_shimMaster_wff_rv$EN_port0__write ?
	       tagController_tmp_shimMaster_wff_rv$port0__write_1 :
	       tagController_tmp_shimMaster_wff_rv ;
  assign tagController_tmp_shimMaster_wff_rv$port2__read =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_w_doDrop ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       tagController_tmp_shimMaster_wff_rv$port1__read ;
  assign tagController_tmp_shimMaster_bff_rv$port0__write_1 =
	     { 1'd1, tagController_tmp_ug_master_u_b_putWire$wget } ;
  assign tagController_tmp_shimMaster_bff_rv$port1__read =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_b_doPut ?
	       tagController_tmp_shimMaster_bff_rv$port0__write_1 :
	       tagController_tmp_shimMaster_bff_rv ;
  assign tagController_tmp_shimMaster_bff_rv$port2__read =
	     WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite ?
	       9'd170 :
	       tagController_tmp_shimMaster_bff_rv$port1__read ;
  assign tagController_tmp_shimMaster_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_tagController_tmp_passMemoryRequest &&
	     tagController_tmp_tagCon$memory_request_get[93:92] != 2'd1 ;
  assign tagController_tmp_shimMaster_arff_rv$port0__write_1 =
	     { 1'd1,
	       v_arid__h14162,
	       v_araddr__h14163,
	       v_arlen__h14164,
	       v_arsize_val__h14209,
	       3'd2,
	       x__h14227,
	       11'd0 } ;
  assign tagController_tmp_shimMaster_arff_rv$port1__read =
	     tagController_tmp_shimMaster_arff_rv$EN_port0__write ?
	       tagController_tmp_shimMaster_arff_rv$port0__write_1 :
	       tagController_tmp_shimMaster_arff_rv ;
  assign tagController_tmp_shimMaster_arff_rv$port2__read =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_ar_doDrop ?
	       100'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       tagController_tmp_shimMaster_arff_rv$port1__read ;
  assign tagController_tmp_shimMaster_rff_rv$port0__write_1 =
	     { 1'd1, tagController_tmp_ug_master_u_r_putWire$wget } ;
  assign tagController_tmp_shimMaster_rff_rv$port1__read =
	     CAN_FIRE_RL_tagController_tmp_ug_master_u_r_doPut ?
	       tagController_tmp_shimMaster_rff_rv$port0__write_1 :
	       tagController_tmp_shimMaster_rff_rv ;
  assign tagController_tmp_shimMaster_rff_rv$port2__read =
	     CAN_FIRE_RL_tagController_tmp_passMemoryResponseRead ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       tagController_tmp_shimMaster_rff_rv$port1__read ;
  assign ifcs_0_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     merged_0_flitLeft == 8'd0 ;
  assign ifcs_0_noRoute_inner_currentReq$port0__write_1 =
	     { proc$master1_awid,
	       proc$master1_awaddr,
	       proc$master1_awlen,
	       proc$master1_awsize,
	       proc$master1_awburst,
	       proc$master1_awlock,
	       proc$master1_awcache,
	       proc$master1_awprot,
	       proc$master1_awqos,
	       proc$master1_awregion } ;
  assign ifcs_0_noRoute_inner_currentReq$port1__read =
	     ifcs_0_noRoute_inner_currentReq$EN_port0__write ?
	       ifcs_0_noRoute_inner_currentReq$port0__write_1 :
	       ifcs_0_noRoute_inner_currentReq ;
  assign ifcs_0_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     merged_0_flitLeft == 8'd0 ;
  assign ifcs_0_noRoute_inner_pendingReq$port1__read =
	     ifcs_0_noRoute_inner_pendingReq$EN_port0__write ||
	     ifcs_0_noRoute_inner_pendingReq ;
  assign ifcs_0_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$port0__write_1 =
	     { proc$master1_arid,
	       proc$master1_araddr,
	       proc$master1_arlen,
	       proc$master1_arsize,
	       proc$master1_arburst,
	       proc$master1_arlock,
	       proc$master1_arcache,
	       proc$master1_arprot,
	       proc$master1_arqos,
	       proc$master1_arregion } ;
  assign ifcs_0_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       ifcs_0_1_noRoute_currentReq$port0__write_1 :
	       ifcs_0_1_noRoute_currentReq ;
  assign ifcs_0_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, proc$master1_arlen } + 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h67452 - 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ?
	       ifcs_0_1_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h67452 ;
  assign ifcs_1_1_noRoute_flitCount$port1__write_1 =
	     ifcs_1_1_noRoute_flitCount - 9'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ?
	       ifcs_1_1_noRoute_flitCount$port1__write_1 :
	       ifcs_1_1_noRoute_flitCount ;

  // register activeSource_0
  assign activeSource_0$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_0$write_1__VAL_1 :
	       MUX_activeSource_0$write_1__VAL_1 ;
  assign activeSource_0$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[1] ;

  // register activeSource_1
  assign activeSource_1$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_1$write_1__VAL_1 :
	       MUX_activeSource_1$write_1__VAL_1 ;
  assign activeSource_1$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[1] ;

  // register activeSource_1_0
  assign activeSource_1_0$D_IN = 1'b0 ;
  assign activeSource_1_0$EN = 1'b0 ;

  // register activeSource_1_0_1
  assign activeSource_1_0_1$D_IN = 1'b0 ;
  assign activeSource_1_0_1$EN = 1'b0 ;

  // register activeSource_1_1
  assign activeSource_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1$EN = 1'b0 ;

  // register activeSource_1_1_0
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_0$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      default: activeSource_1_1_0$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_0$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;

  // register activeSource_1_1_1
  assign activeSource_1_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1_1$EN = 1'b0 ;

  // register activeSource_1_1_1_1
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_1_1$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      default: activeSource_1_1_1_1$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_1_1$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;

  // register activeSource_1_1_2
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_2$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      default: activeSource_1_1_2$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_2$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;

  // register activeSource_1_2
  assign activeSource_1_2$D_IN = 1'b0 ;
  assign activeSource_1_2$EN = 1'b0 ;

  // register arbiter_1_1_firstHot
  assign arbiter_1_1_firstHot$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1988 ;
  assign arbiter_1_1_firstHot$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect
  assign arbiter_1_1_lastSelect$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1976 ;
  assign arbiter_1_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect_1
  assign arbiter_1_1_lastSelect_1$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1982 ;
  assign arbiter_1_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_firstHot
  assign arbiter_1_firstHot$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1406 ;
  assign arbiter_1_firstHot$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_firstHot_1
  assign arbiter_1_firstHot_1$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_7_ETC___d1780 ;
  assign arbiter_1_firstHot_1$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_1_lastSelect
  assign arbiter_1_lastSelect$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1394 ;
  assign arbiter_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_1
  assign arbiter_1_lastSelect_1$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1400 ;
  assign arbiter_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_2
  assign arbiter_1_lastSelect_2$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_7_ETC___d1776 ;
  assign arbiter_1_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_firstHot
  assign arbiter_firstHot$D_IN =
	     IF_SEXT_arbiter_lastSelect_160_161_BIT_0_162_A_ETC___d1188 ;
  assign arbiter_firstHot$EN = CAN_FIRE_RL_arbitrate ;

  // register arbiter_lastSelect
  assign arbiter_lastSelect$D_IN =
	     IF_SEXT_arbiter_lastSelect_160_161_BIT_0_162_A_ETC___d1184 ;
  assign arbiter_lastSelect$EN = CAN_FIRE_RL_arbitrate ;

  // register ifcs_0_1_noRoute_currentReq
  assign ifcs_0_1_noRoute_currentReq$D_IN =
	     ifcs_0_1_noRoute_currentReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_0_1_noRoute_flitCount
  assign ifcs_0_1_noRoute_flitCount$D_IN =
	     ifcs_0_1_noRoute_flitCount$port2__read ;
  assign ifcs_0_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_0_1_state
  assign ifcs_0_1_state$D_IN = 2'd0 ;
  assign ifcs_0_1_state$EN =
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ;

  // register ifcs_0_1_state_1
  assign ifcs_0_1_state_1$D_IN = MUX_ifcs_0_1_state_1$write_1__SEL_1 ;
  assign ifcs_0_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	     !tagController_tmp_ug_slave_u_r_peekWire$wget[1] ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 &&
	     tagController_tmp_ug_slave_u_r_peekWire$wget[1] ;

  // register ifcs_0_noRoute_inner_currentReq
  assign ifcs_0_noRoute_inner_currentReq$D_IN =
	     ifcs_0_noRoute_inner_currentReq$port1__read ;
  assign ifcs_0_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_0_noRoute_inner_pendingReq
  assign ifcs_0_noRoute_inner_pendingReq$D_IN =
	     ifcs_0_noRoute_inner_pendingReq$port2__read ;
  assign ifcs_0_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_0_state
  always@(MUX_ifcs_0_state$write_1__SEL_1 or
	  MUX_ifcs_0_state$write_1__SEL_2 or MUX_ifcs_0_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ifcs_0_state$write_1__SEL_1: ifcs_0_state$D_IN = 2'd0;
      MUX_ifcs_0_state$write_1__SEL_2: ifcs_0_state$D_IN = 2'd1;
      MUX_ifcs_0_state$write_1__SEL_3: ifcs_0_state$D_IN = 2'd2;
      default: ifcs_0_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign ifcs_0_state$EN =
	     (WILL_FIRE_RL_ifcs_0_drainFlits ||
	      WILL_FIRE_RL_ifcs_0_followFlits) &&
	     proc$master1_wlast ||
	     WILL_FIRE_RL_ifcs_0_firstFlit && !proc$master1_wlast ||
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp && !proc$master1_wlast ;

  // register ifcs_0_state_1
  assign ifcs_0_state_1$D_IN = 1'd0 ;
  assign ifcs_0_state_1$EN = CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // register ifcs_1_1_noRoute_currentReq
  assign ifcs_1_1_noRoute_currentReq$D_IN = ifcs_1_1_noRoute_currentReq ;
  assign ifcs_1_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_1_1_noRoute_flitCount
  assign ifcs_1_1_noRoute_flitCount$D_IN =
	     ifcs_1_1_noRoute_flitCount$port2__read ;
  assign ifcs_1_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_1_1_state
  assign ifcs_1_1_state$D_IN = 2'h0 ;
  assign ifcs_1_1_state$EN = 1'b0 ;

  // register ifcs_1_1_state_1
  assign ifcs_1_1_state_1$D_IN = !MUX_ifcs_1_1_state_1$write_1__SEL_1 ;
  assign ifcs_1_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 && plic$axi4_slave_rlast ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 && !plic$axi4_slave_rlast ;

  // register ifcs_1_noRoute_inner_currentReq
  assign ifcs_1_noRoute_inner_currentReq$D_IN =
	     ifcs_1_noRoute_inner_currentReq ;
  assign ifcs_1_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_1_noRoute_inner_pendingReq
  assign ifcs_1_noRoute_inner_pendingReq$D_IN =
	     ifcs_1_noRoute_inner_pendingReq ;
  assign ifcs_1_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_1_state
  assign ifcs_1_state$D_IN = 2'h0 ;
  assign ifcs_1_state$EN = 1'b0 ;

  // register ifcs_1_state_1
  assign ifcs_1_state_1$D_IN = 1'd0 ;
  assign ifcs_1_state_1$EN = CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // register ifcs_2_1_state
  assign ifcs_2_1_state$D_IN = !MUX_ifcs_2_1_state$write_1__SEL_1 ;
  assign ifcs_2_1_state$EN =
	     WILL_FIRE_RL_ifcs_2_1_followFlits &&
	     proc$debug_module_mem_server_rlast ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit &&
	     !proc$debug_module_mem_server_rlast ;

  // register ifcs_2_state
  assign ifcs_2_state$D_IN = 1'd0 ;
  assign ifcs_2_state$EN = CAN_FIRE_RL_ifcs_2_followFlits ;

  // register merged_0_flitLeft
  assign merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_0_genOther ?
	       MUX_merged_0_flitLeft$write_1__VAL_1 :
	       proc$master1_awlen ;
  assign merged_0_flitLeft$EN = msNoSynth_0_w_dwReady$whas ;

  // register merged_1_flitLeft
  assign merged_1_flitLeft$D_IN = 8'h0 ;
  assign merged_1_flitLeft$EN = 1'b0 ;

  // register split_0_flitLeft
  assign split_0_flitLeft$D_IN =
	     MUX_split_0_flitLeft$write_1__SEL_1 ?
	       MUX_split_0_flitLeft$write_1__VAL_1 :
	       split_0_doPut$wget[102:95] ;
  assign split_0_flitLeft$EN = ssNoSynth_0_w_buffer_enqw$whas ;

  // register split_1_flitLeft
  assign split_1_flitLeft$D_IN =
	     MUX_split_1_flitLeft$write_1__SEL_1 ?
	       MUX_split_1_flitLeft$write_1__VAL_1 :
	       split_1_doPut$wget[102:95] ;
  assign split_1_flitLeft$EN = ssNoSynth_1_w_buffer_enqw$whas ;

  // register split_2_flitLeft
  assign split_2_flitLeft$D_IN =
	     MUX_split_2_flitLeft$write_1__SEL_1 ?
	       MUX_split_2_flitLeft$write_1__VAL_1 :
	       split_2_doPut$wget[102:95] ;
  assign split_2_flitLeft$EN = ssNoSynth_2_w_buffer_enqw$whas ;

  // register state
  assign state$D_IN = !MUX_state$write_1__SEL_1 && !MUX_state$write_1__SEL_2 ;
  assign state$EN =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[1] ;

  // register state_1
  assign state_1$D_IN = 1'd0 ;
  assign state_1$EN =
	     WILL_FIRE_RL_burst_4 || WILL_FIRE_RL_burst_3 ||
	     WILL_FIRE_RL_burst_2 ;

  // register state_1_1
  assign state_1_1$D_IN = 1'd0 ;
  assign state_1_1$EN = WILL_FIRE_RL_burst_6 || WILL_FIRE_RL_burst_5 ;

  // register state_1_1_1
  assign state_1_1_1$D_IN =
	     !MUX_state_1_1_1$write_1__SEL_1 &&
	     !MUX_state_1_1_1$write_1__SEL_2 &&
	     !MUX_state_1_1_1$write_1__SEL_3 ;
  assign state_1_1_1$EN =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[1] ;

  // register tagController_tmp_addrOffset
  assign tagController_tmp_addrOffset$D_IN =
	     tagController_tmp_shimSlave_wff_rv$port1__read[1] ?
	       64'd0 :
	       x__h6813 ;
  assign tagController_tmp_addrOffset$EN =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite ;

  // register tagController_tmp_doneSendingAW
  assign tagController_tmp_doneSendingAW$D_IN =
	     !tagController_tmp_tagCon$memory_request_get[91] ;
  assign tagController_tmp_doneSendingAW$EN =
	     WILL_FIRE_RL_tagController_tmp_passMemoryRequest &&
	     tagController_tmp_tagCon$memory_request_get[93:92] == 2'd1 ;

  // register tagController_tmp_shimMaster_arff_rv
  assign tagController_tmp_shimMaster_arff_rv$D_IN =
	     tagController_tmp_shimMaster_arff_rv$port2__read ;
  assign tagController_tmp_shimMaster_arff_rv$EN = 1'b1 ;

  // register tagController_tmp_shimMaster_awff_rv
  assign tagController_tmp_shimMaster_awff_rv$D_IN =
	     tagController_tmp_shimMaster_awff_rv$port2__read ;
  assign tagController_tmp_shimMaster_awff_rv$EN = 1'b1 ;

  // register tagController_tmp_shimMaster_bff_rv
  assign tagController_tmp_shimMaster_bff_rv$D_IN =
	     tagController_tmp_shimMaster_bff_rv$port2__read ;
  assign tagController_tmp_shimMaster_bff_rv$EN = 1'b1 ;

  // register tagController_tmp_shimMaster_rff_rv
  assign tagController_tmp_shimMaster_rff_rv$D_IN =
	     tagController_tmp_shimMaster_rff_rv$port2__read ;
  assign tagController_tmp_shimMaster_rff_rv$EN = 1'b1 ;

  // register tagController_tmp_shimMaster_wff_rv
  assign tagController_tmp_shimMaster_wff_rv$D_IN =
	     tagController_tmp_shimMaster_wff_rv$port2__read ;
  assign tagController_tmp_shimMaster_wff_rv$EN = 1'b1 ;

  // register tagController_tmp_shimSlave_arff_rv
  assign tagController_tmp_shimSlave_arff_rv$D_IN =
	     tagController_tmp_shimSlave_arff_rv$port2__read ;
  assign tagController_tmp_shimSlave_arff_rv$EN = 1'b1 ;

  // register tagController_tmp_shimSlave_awff_rv
  assign tagController_tmp_shimSlave_awff_rv$D_IN =
	     tagController_tmp_shimSlave_awff_rv$port2__read ;
  assign tagController_tmp_shimSlave_awff_rv$EN = 1'b1 ;

  // register tagController_tmp_shimSlave_bff_rv
  assign tagController_tmp_shimSlave_bff_rv$D_IN =
	     tagController_tmp_shimSlave_bff_rv$port2__read ;
  assign tagController_tmp_shimSlave_bff_rv$EN = 1'b1 ;

  // register tagController_tmp_shimSlave_rff_rv
  assign tagController_tmp_shimSlave_rff_rv$D_IN =
	     tagController_tmp_shimSlave_rff_rv$port2__read ;
  assign tagController_tmp_shimSlave_rff_rv$EN = 1'b1 ;

  // register tagController_tmp_shimSlave_wff_rv
  assign tagController_tmp_shimSlave_wff_rv$D_IN =
	     tagController_tmp_shimSlave_wff_rv$port2__read ;
  assign tagController_tmp_shimSlave_wff_rv$EN = 1'b1 ;

  // submodule ifcs_0_1_innerReq
  assign ifcs_0_1_innerReq$D_IN =
	     { fatReq_arid__h66891,
	       proc$master1_araddr,
	       proc$master1_arlen,
	       proc$master1_arsize,
	       proc$master1_arburst,
	       proc$master1_arlock,
	       proc$master1_arcache,
	       proc$master1_arprot,
	       proc$master1_arqos,
	       proc$master1_arregion } ;
  assign ifcs_0_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_0_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_1_innerRoute
  assign ifcs_0_1_innerRoute$D_IN =
	     { proc$master1_araddr[63:40] == 24'd0 &&
	       !proc_master1_ar_araddr__520_ULT_soc_map_m_mem0_ETC___d1523 &&
	       proc_master1_ar_araddr__520_MINUS_soc_map_m_me_ETC___d1525,
	       proc_master1_ar_araddr__520_BITS_63_TO_40_521__ETC___d1539,
	       proc_master1_ar_araddr__520_BITS_63_TO_40_521__ETC___d1534 } ;
  assign ifcs_0_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_0_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_1_noRouteRsp
  assign ifcs_0_1_noRouteRsp$D_IN =
	     { ifcs_0_1_noRoute_currentReq$port1__read[96:93],
	       66'h2AAAAAAAAAAAAAAAB,
	       x_port1__read__h67452 == 9'd1,
	       1'h0 } ;
  assign ifcs_0_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;
  assign ifcs_0_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;
  assign ifcs_0_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_1_routeBack
  assign ifcs_0_1_routeBack$D_IN =
	     2'd1 <<
	     tagController_tmp_ug_slave_u_r_peekWirewget_B_ETC__q25[4] ;
  assign ifcs_0_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ifcs_0_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_rspBack$D_OUT[1] ;
  assign ifcs_0_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_1_rspBack
  assign ifcs_0_1_rspBack$D_IN =
	     { tagController_tmp_ug_slave_u_r_peekWirewget_B_ETC__q25[3:0],
	       tagController_tmp_ug_slave_u_r_peekWire$wget[67:0] } ;
  assign ifcs_0_1_rspBack$ENQ = ssNoSynth_0_r_dwReady$whas ;
  assign ifcs_0_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_7 ;
  assign ifcs_0_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_0_innerReq
  assign ifcs_0_innerReq$D_IN =
	     { merged_0_flitLeft != 8'd0,
	       a_awid__h33202,
	       proc$master1_awaddr,
	       proc$master1_awlen,
	       proc$master1_awsize,
	       proc$master1_awburst,
	       proc$master1_awlock,
	       proc$master1_awcache,
	       proc$master1_awprot,
	       proc$master1_awqos,
	       proc$master1_awregion,
	       proc$master1_wdata,
	       proc$master1_wstrb,
	       proc$master1_wlast,
	       proc$master1_wuser } ;
  assign ifcs_0_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst ;
  assign ifcs_0_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_innerRoute
  assign ifcs_0_innerRoute$D_IN =
	     { proc$master1_awaddr[63:40] == 24'd0 &&
	       !IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d950 &&
	       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d953,
	       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d970,
	       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d965 } ;
  assign ifcs_0_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerRoute$DEQ =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerReq$D_OUT[1] ;
  assign ifcs_0_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_noRouteRsp
  assign ifcs_0_noRouteRsp$D_IN =
	     { ifcs_0_noRoute_inner_currentReq$port1__read[96:93], 2'd3 } ;
  assign ifcs_0_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;
  assign ifcs_0_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_0_drainNoRouteResponse ;
  assign ifcs_0_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_routeBack
  assign ifcs_0_routeBack$D_IN =
	     2'd1 <<
	     tagController_tmp_ug_slave_u_b_peekWirewget_B_ETC__q26[4] ;
  assign ifcs_0_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ifcs_0_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_rspBack
  assign ifcs_0_rspBack$D_IN =
	     { tagController_tmp_ug_slave_u_b_peekWirewget_B_ETC__q26[3:0],
	       tagController_tmp_ug_slave_u_b_peekWire$wget[1:0] } ;
  assign ifcs_0_rspBack$ENQ = ssNoSynth_0_b_dwReady$whas ;
  assign ifcs_0_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerReq
  assign ifcs_1_1_innerReq$D_IN = 98'h0 ;
  assign ifcs_1_1_innerReq$ENQ = 1'b0 ;
  assign ifcs_1_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_1_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerRoute
  assign ifcs_1_1_innerRoute$D_IN = 3'h0 ;
  assign ifcs_1_1_innerRoute$ENQ = 1'b0 ;
  assign ifcs_1_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_1_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_1_noRouteRsp
  assign ifcs_1_1_noRouteRsp$D_IN =
	     { ifcs_1_1_noRoute_currentReq[96:93], 68'hAAAAAAAAAAAAAAAAC } ;
  assign ifcs_1_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;
  assign ifcs_1_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;
  assign ifcs_1_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_1_routeBack
  assign ifcs_1_1_routeBack$D_IN = 2'd1 << plic$axi4_slave_rid[4] ;
  assign ifcs_1_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ifcs_1_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_rspBack$D_OUT[1] ;
  assign ifcs_1_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_rspBack
  assign ifcs_1_1_rspBack$D_IN =
	     { plic$axi4_slave_rid[3:0],
	       plic$axi4_slave_rdata,
	       plic$axi4_slave_rresp,
	       plic$axi4_slave_rlast,
	       plic$axi4_slave_ruser } ;
  assign ifcs_1_1_rspBack$ENQ = ssNoSynth_1_r_dwReady$whas ;
  assign ifcs_1_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_8 ;
  assign ifcs_1_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_innerReq
  assign ifcs_1_innerReq$D_IN = 173'h0 ;
  assign ifcs_1_innerReq$ENQ = 1'b0 ;
  assign ifcs_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_1 ;
  assign ifcs_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_innerRoute
  assign ifcs_1_innerRoute$D_IN = 3'h0 ;
  assign ifcs_1_innerRoute$ENQ = 1'b0 ;
  assign ifcs_1_innerRoute$DEQ =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerReq$D_OUT[1] ;
  assign ifcs_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_noRouteRsp
  assign ifcs_1_noRouteRsp$D_IN = 6'h0 ;
  assign ifcs_1_noRouteRsp$ENQ = 1'b0 ;
  assign ifcs_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_1_drainNoRouteResponse ;
  assign ifcs_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_routeBack
  assign ifcs_1_routeBack$D_IN = 2'd1 << plic$axi4_slave_bid[4] ;
  assign ifcs_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ifcs_1_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_rspBack
  assign ifcs_1_rspBack$D_IN =
	     { plic$axi4_slave_bid[3:0], plic$axi4_slave_bresp } ;
  assign ifcs_1_rspBack$ENQ = ssNoSynth_1_b_dwReady$whas ;
  assign ifcs_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_routeBack
  assign ifcs_2_1_routeBack$D_IN =
	     2'd1 << proc$debug_module_mem_server_rid[4] ;
  assign ifcs_2_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_1_firstFlit ;
  assign ifcs_2_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_rspBack$D_OUT[1] ;
  assign ifcs_2_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_rspBack
  assign ifcs_2_1_rspBack$D_IN =
	     { proc$debug_module_mem_server_rid[3:0],
	       proc$debug_module_mem_server_rdata,
	       proc$debug_module_mem_server_rresp,
	       proc$debug_module_mem_server_rlast,
	       proc$debug_module_mem_server_ruser } ;
  assign ifcs_2_1_rspBack$ENQ = ssNoSynth_2_r_dwReady$whas ;
  assign ifcs_2_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_9 ;
  assign ifcs_2_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_routeBack
  assign ifcs_2_routeBack$D_IN = 2'd1 << proc$debug_module_mem_server_bid[4] ;
  assign ifcs_2_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_firstFlit ;
  assign ifcs_2_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_rspBack
  assign ifcs_2_rspBack$D_IN =
	     { proc$debug_module_mem_server_bid[3:0],
	       proc$debug_module_mem_server_bresp } ;
  assign ifcs_2_rspBack$ENQ = ssNoSynth_2_b_dwReady$whas ;
  assign ifcs_2_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_rspBack$CLR = 1'b0 ;

  // submodule msNoSynth_0_b_buffer_ff
  assign msNoSynth_0_b_buffer_ff$D_IN = msNoSynth_0_b_buffer_enqw$wget ;
  assign msNoSynth_0_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue ;
  assign msNoSynth_0_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue ;
  assign msNoSynth_0_b_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_0_b_buffer_firstValid
  assign msNoSynth_0_b_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_0_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit ;

  // submodule msNoSynth_0_r_buffer_ff
  assign msNoSynth_0_r_buffer_ff$D_IN = msNoSynth_0_r_buffer_enqw$wget ;
  assign msNoSynth_0_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue ;
  assign msNoSynth_0_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue ;
  assign msNoSynth_0_r_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_0_r_buffer_firstValid
  assign msNoSynth_0_r_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_0_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit ;

  // submodule msNoSynth_1_b_buffer_ff
  assign msNoSynth_1_b_buffer_ff$D_IN = msNoSynth_1_b_buffer_enqw$wget ;
  assign msNoSynth_1_b_buffer_ff$ENQ = msNoSynth_1_b_buffer_enqw$whas ;
  assign msNoSynth_1_b_buffer_ff$DEQ = 1'b0 ;
  assign msNoSynth_1_b_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_1_b_buffer_firstValid
  assign msNoSynth_1_b_buffer_firstValid$D_IN = 1'b0 ;
  assign msNoSynth_1_b_buffer_firstValid$EN = 1'b0 ;

  // submodule msNoSynth_1_r_buffer_ff
  assign msNoSynth_1_r_buffer_ff$D_IN = msNoSynth_1_r_buffer_enqw$wget ;
  assign msNoSynth_1_r_buffer_ff$ENQ = msNoSynth_1_r_buffer_enqw$whas ;
  assign msNoSynth_1_r_buffer_ff$DEQ = 1'b0 ;
  assign msNoSynth_1_r_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_1_r_buffer_firstValid
  assign msNoSynth_1_r_buffer_firstValid$D_IN = 1'b0 ;
  assign msNoSynth_1_r_buffer_firstValid$EN = 1'b0 ;

  // submodule plic
  assign plic$axi4_slave_araddr =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_1_ar_buffer_enqw$wget[92:29] ;
  assign plic$axi4_slave_arburst =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_1_ar_buffer_enqw$wget[17:16] ;
  assign plic$axi4_slave_arcache =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_1_ar_buffer_enqw$wget[14:11] ;
  assign plic$axi4_slave_arid =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_1_ar_buffer_enqw$wget[97:93] ;
  assign plic$axi4_slave_arlen =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_1_ar_buffer_enqw$wget[28:21] ;
  assign plic$axi4_slave_arlock =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[15] :
	       ssNoSynth_1_ar_buffer_enqw$wget[15] ;
  assign plic$axi4_slave_arprot =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_1_ar_buffer_enqw$wget[10:8] ;
  assign plic$axi4_slave_arqos =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_1_ar_buffer_enqw$wget[7:4] ;
  assign plic$axi4_slave_arregion =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_1_ar_buffer_enqw$wget[3:0] ;
  assign plic$axi4_slave_arsize =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_1_ar_buffer_enqw$wget[20:18] ;
  assign plic$axi4_slave_awaddr =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_1_aw_buffer_enqw$wget[92:29] ;
  assign plic$axi4_slave_awburst =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_1_aw_buffer_enqw$wget[17:16] ;
  assign plic$axi4_slave_awcache =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_1_aw_buffer_enqw$wget[14:11] ;
  assign plic$axi4_slave_awid =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_1_aw_buffer_enqw$wget[97:93] ;
  assign plic$axi4_slave_awlen =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_1_aw_buffer_enqw$wget[28:21] ;
  assign plic$axi4_slave_awlock =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[15] :
	       ssNoSynth_1_aw_buffer_enqw$wget[15] ;
  assign plic$axi4_slave_awprot =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_1_aw_buffer_enqw$wget[10:8] ;
  assign plic$axi4_slave_awqos =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_1_aw_buffer_enqw$wget[7:4] ;
  assign plic$axi4_slave_awregion =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_1_aw_buffer_enqw$wget[3:0] ;
  assign plic$axi4_slave_awsize =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_1_aw_buffer_enqw$wget[20:18] ;
  assign plic$axi4_slave_bready = ssNoSynth_1_b_dwReady$whas ;
  assign plic$axi4_slave_rready = ssNoSynth_1_r_dwReady$whas ;
  assign plic$axi4_slave_wdata =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[73:10] :
	       ssNoSynth_1_w_buffer_enqw$wget[73:10] ;
  assign plic$axi4_slave_wlast =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[1] :
	       ssNoSynth_1_w_buffer_enqw$wget[1] ;
  assign plic$axi4_slave_wstrb =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[9:2] :
	       ssNoSynth_1_w_buffer_enqw$wget[9:2] ;
  assign plic$axi4_slave_wuser =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[0] :
	       ssNoSynth_1_w_buffer_enqw$wget[0] ;
  assign plic$set_addr_map_addr_base = soc_map$m_plic_addr_range[127:64] ;
  assign plic$set_addr_map_addr_lim =
	     soc_map$m_plic_addr_range[127:64] +
	     soc_map$m_plic_addr_range[63:0] ;
  assign plic$set_verbosity_verbosity = 4'h0 ;
  assign plic$v_sources_0_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_0_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_10_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_10_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_11_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_11_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_12_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_12_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_13_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_13_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_14_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_14_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_15_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_15_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_1_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_1_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_2_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_2_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_3_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_3_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_4_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_4_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_5_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_5_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_6_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_6_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_7_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_7_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_8_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_8_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_9_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_9_m_interrupt_req_set_not_clear ;
  assign plic$EN_set_verbosity = 1'b0 ;
  assign plic$EN_show_PLIC_state = 1'b0 ;
  assign plic$EN_server_reset_request_put = 1'b0 ;
  assign plic$EN_server_reset_response_get = 1'b0 ;
  assign plic$EN_set_addr_map = EN_start ;
  assign plic$axi4_slave_awvalid = CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit ;
  assign plic$axi4_slave_wvalid = CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit ;
  assign plic$axi4_slave_arvalid = CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit ;

  // submodule proc
  assign proc$debug_module_mem_server_araddr =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_2_ar_buffer_enqw$wget[92:29] ;
  assign proc$debug_module_mem_server_arburst =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_2_ar_buffer_enqw$wget[17:16] ;
  assign proc$debug_module_mem_server_arcache =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_2_ar_buffer_enqw$wget[14:11] ;
  assign proc$debug_module_mem_server_arid =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_2_ar_buffer_enqw$wget[97:93] ;
  assign proc$debug_module_mem_server_arlen =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_2_ar_buffer_enqw$wget[28:21] ;
  assign proc$debug_module_mem_server_arlock =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[15] :
	       ssNoSynth_2_ar_buffer_enqw$wget[15] ;
  assign proc$debug_module_mem_server_arprot =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_2_ar_buffer_enqw$wget[10:8] ;
  assign proc$debug_module_mem_server_arqos =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_2_ar_buffer_enqw$wget[7:4] ;
  assign proc$debug_module_mem_server_arregion =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_2_ar_buffer_enqw$wget[3:0] ;
  assign proc$debug_module_mem_server_arsize =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_2_ar_buffer_enqw$wget[20:18] ;
  assign proc$debug_module_mem_server_awaddr =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_2_aw_buffer_enqw$wget[92:29] ;
  assign proc$debug_module_mem_server_awburst =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_2_aw_buffer_enqw$wget[17:16] ;
  assign proc$debug_module_mem_server_awcache =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_2_aw_buffer_enqw$wget[14:11] ;
  assign proc$debug_module_mem_server_awid =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_2_aw_buffer_enqw$wget[97:93] ;
  assign proc$debug_module_mem_server_awlen =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_2_aw_buffer_enqw$wget[28:21] ;
  assign proc$debug_module_mem_server_awlock =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[15] :
	       ssNoSynth_2_aw_buffer_enqw$wget[15] ;
  assign proc$debug_module_mem_server_awprot =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_2_aw_buffer_enqw$wget[10:8] ;
  assign proc$debug_module_mem_server_awqos =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_2_aw_buffer_enqw$wget[7:4] ;
  assign proc$debug_module_mem_server_awregion =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_2_aw_buffer_enqw$wget[3:0] ;
  assign proc$debug_module_mem_server_awsize =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_2_aw_buffer_enqw$wget[20:18] ;
  assign proc$debug_module_mem_server_bready = ssNoSynth_2_b_dwReady$whas ;
  assign proc$debug_module_mem_server_rready = ssNoSynth_2_r_dwReady$whas ;
  assign proc$debug_module_mem_server_wdata =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[73:10] :
	       ssNoSynth_2_w_buffer_enqw$wget[73:10] ;
  assign proc$debug_module_mem_server_wlast =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[1] :
	       ssNoSynth_2_w_buffer_enqw$wget[1] ;
  assign proc$debug_module_mem_server_wstrb =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[9:2] :
	       ssNoSynth_2_w_buffer_enqw$wget[9:2] ;
  assign proc$debug_module_mem_server_wuser =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[0] :
	       ssNoSynth_2_w_buffer_enqw$wget[0] ;
  assign proc$m_external_interrupt_req_set_not_clear =
	     plic$v_targets_0_m_eip ;
  assign proc$master0_arready = CAN_FIRE_RL_tmp1_u_ar_doDrop ;
  assign proc$master0_awready = CAN_FIRE_RL_tmp1_u_aw_doDrop ;
  assign proc$master0_bid =
	     tmp0_b_buffer_ff$EMPTY_N ?
	       tmp0_b_buffer_ff$D_OUT[6:2] :
	       tmp0_b_buffer_enqw$wget[6:2] ;
  assign proc$master0_bresp =
	     tmp0_b_buffer_ff$EMPTY_N ?
	       tmp0_b_buffer_ff$D_OUT[1:0] :
	       tmp0_b_buffer_enqw$wget[1:0] ;
  assign proc$master0_rdata =
	     tmp0_r_buffer_ff$EMPTY_N ?
	       tmp0_r_buffer_ff$D_OUT[67:4] :
	       tmp0_r_buffer_enqw$wget[67:4] ;
  assign proc$master0_rid =
	     tmp0_r_buffer_ff$EMPTY_N ?
	       tmp0_r_buffer_ff$D_OUT[72:68] :
	       tmp0_r_buffer_enqw$wget[72:68] ;
  assign proc$master0_rlast =
	     tmp0_r_buffer_ff$EMPTY_N ?
	       tmp0_r_buffer_ff$D_OUT[1] :
	       tmp0_r_buffer_enqw$wget[1] ;
  assign proc$master0_rresp =
	     tmp0_r_buffer_ff$EMPTY_N ?
	       tmp0_r_buffer_ff$D_OUT[3:2] :
	       tmp0_r_buffer_enqw$wget[3:2] ;
  assign proc$master0_ruser =
	     tmp0_r_buffer_ff$EMPTY_N ?
	       tmp0_r_buffer_ff$D_OUT[0] :
	       tmp0_r_buffer_enqw$wget[0] ;
  assign proc$master0_wready = CAN_FIRE_RL_tmp1_u_w_doDrop ;
  assign proc$master1_arready = msNoSynth_0_ar_dwReady$whas ;
  assign proc$master1_awready = CAN_FIRE_RL_merged_0_genFirst ;
  assign proc$master1_bid =
	     msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       msNoSynth_0_b_buffer_ff$D_OUT[5:2] :
	       msNoSynth_0_b_buffer_enqw$wget[5:2] ;
  assign proc$master1_bresp =
	     msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       msNoSynth_0_b_buffer_ff$D_OUT[1:0] :
	       msNoSynth_0_b_buffer_enqw$wget[1:0] ;
  assign proc$master1_rdata =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[67:4] :
	       msNoSynth_0_r_buffer_enqw$wget[67:4] ;
  assign proc$master1_rid =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[71:68] :
	       msNoSynth_0_r_buffer_enqw$wget[71:68] ;
  assign proc$master1_rlast =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[1] :
	       msNoSynth_0_r_buffer_enqw$wget[1] ;
  assign proc$master1_rresp =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[3:2] :
	       msNoSynth_0_r_buffer_enqw$wget[3:2] ;
  assign proc$master1_ruser =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[0] :
	       msNoSynth_0_r_buffer_enqw$wget[0] ;
  assign proc$master1_wready = msNoSynth_0_w_dwReady$whas ;
  assign proc$non_maskable_interrupt_req_set_not_clear = 1'd0 ;
  assign proc$s_external_interrupt_req_set_not_clear =
	     plic$v_targets_1_m_eip ;
  assign proc$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign proc$start_fromhostAddr = start_fromhost_addr ;
  assign proc$start_startpc = 64'h0000000000001000 ;
  assign proc$start_tohostAddr = start_tohost_addr ;
  assign proc$EN_start = EN_start ;
  assign proc$master0_bvalid = CAN_FIRE_RL_tmp0_b_forwardFlit ;
  assign proc$master0_rvalid = CAN_FIRE_RL_tmp0_r_forwardFlit ;
  assign proc$master1_bvalid = CAN_FIRE_RL_msNoSynth_0_b_forwardFlit ;
  assign proc$master1_rvalid = CAN_FIRE_RL_msNoSynth_0_r_forwardFlit ;
  assign proc$EN_set_verbosity = EN_set_verbosity ;
  assign proc$debug_module_mem_server_awvalid =
	     CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit ;
  assign proc$debug_module_mem_server_wvalid =
	     CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit ;
  assign proc$debug_module_mem_server_arvalid =
	     CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule ssNoSynth_0_ar_buffer_ff
  assign ssNoSynth_0_ar_buffer_ff$D_IN = ssNoSynth_0_ar_buffer_enqw$wget ;
  assign ssNoSynth_0_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue ;
  assign ssNoSynth_0_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue ;
  assign ssNoSynth_0_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_ar_buffer_firstValid
  assign ssNoSynth_0_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ;

  // submodule ssNoSynth_0_aw_buffer_ff
  assign ssNoSynth_0_aw_buffer_ff$D_IN = split_0_doPut$wget[171:74] ;
  assign ssNoSynth_0_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue ;
  assign ssNoSynth_0_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue ;
  assign ssNoSynth_0_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_aw_buffer_firstValid
  assign ssNoSynth_0_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ;

  // submodule ssNoSynth_0_w_buffer_ff
  assign ssNoSynth_0_w_buffer_ff$D_IN = split_0_doPut$wget[73:0] ;
  assign ssNoSynth_0_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue ;
  assign ssNoSynth_0_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue ;
  assign ssNoSynth_0_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_w_buffer_firstValid
  assign ssNoSynth_0_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ;

  // submodule ssNoSynth_1_ar_buffer_ff
  assign ssNoSynth_1_ar_buffer_ff$D_IN = ssNoSynth_1_ar_buffer_enqw$wget ;
  assign ssNoSynth_1_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue ;
  assign ssNoSynth_1_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue ;
  assign ssNoSynth_1_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_ar_buffer_firstValid
  assign ssNoSynth_1_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ;

  // submodule ssNoSynth_1_aw_buffer_ff
  assign ssNoSynth_1_aw_buffer_ff$D_IN = split_1_doPut$wget[171:74] ;
  assign ssNoSynth_1_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue ;
  assign ssNoSynth_1_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue ;
  assign ssNoSynth_1_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_aw_buffer_firstValid
  assign ssNoSynth_1_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ;

  // submodule ssNoSynth_1_w_buffer_ff
  assign ssNoSynth_1_w_buffer_ff$D_IN = split_1_doPut$wget[73:0] ;
  assign ssNoSynth_1_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue ;
  assign ssNoSynth_1_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue ;
  assign ssNoSynth_1_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_w_buffer_firstValid
  assign ssNoSynth_1_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ;

  // submodule ssNoSynth_2_ar_buffer_ff
  assign ssNoSynth_2_ar_buffer_ff$D_IN = ssNoSynth_2_ar_buffer_enqw$wget ;
  assign ssNoSynth_2_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue ;
  assign ssNoSynth_2_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue ;
  assign ssNoSynth_2_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_ar_buffer_firstValid
  assign ssNoSynth_2_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ;

  // submodule ssNoSynth_2_aw_buffer_ff
  assign ssNoSynth_2_aw_buffer_ff$D_IN = split_2_doPut$wget[171:74] ;
  assign ssNoSynth_2_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue ;
  assign ssNoSynth_2_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue ;
  assign ssNoSynth_2_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_aw_buffer_firstValid
  assign ssNoSynth_2_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ;

  // submodule ssNoSynth_2_w_buffer_ff
  assign ssNoSynth_2_w_buffer_ff$D_IN = split_2_doPut$wget[73:0] ;
  assign ssNoSynth_2_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue ;
  assign ssNoSynth_2_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue ;
  assign ssNoSynth_2_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_w_buffer_firstValid
  assign ssNoSynth_2_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ;

  // submodule tagController_tmp_awreqff
  assign tagController_tmp_awreqff$D_IN =
	     tagController_tmp_shimSlave_awff_rv$port1__read[97:0] ;
  assign tagController_tmp_awreqff$ENQ =
	     CAN_FIRE_RL_tagController_tmp_getCacheAW ;
  assign tagController_tmp_awreqff$DEQ =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite &&
	     tagController_tmp_shimSlave_wff_rv$port1__read[1] ;
  assign tagController_tmp_awreqff$CLR = 1'b0 ;

  // submodule tagController_tmp_newRst
  assign tagController_tmp_newRst$ASSERT_IN = 1'b0 ;

  // submodule tagController_tmp_tagCon
  assign tagController_tmp_tagCon$cache_request_put_val =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite ?
	       MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_1 :
	       MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_2 ;
  assign tagController_tmp_tagCon$memory_response_put_val =
	     WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite ?
	       MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_1 :
	       MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_2 ;
  assign tagController_tmp_tagCon$EN_cache_request_put =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite ||
	     WILL_FIRE_RL_tagController_tmp_passCacheRead ;
  assign tagController_tmp_tagCon$EN_cache_response_get =
	     CAN_FIRE_RL_tagController_tmp_passCacheResponse ;
  assign tagController_tmp_tagCon$EN_memory_request_get =
	     CAN_FIRE_RL_tagController_tmp_passMemoryRequest ;
  assign tagController_tmp_tagCon$EN_memory_response_put =
	     WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite ||
	     WILL_FIRE_RL_tagController_tmp_passMemoryResponseRead ;

  // submodule tmp0_b_buffer_ff
  assign tmp0_b_buffer_ff$D_IN = tmp0_b_buffer_enqw$wget ;
  assign tmp0_b_buffer_ff$ENQ = CAN_FIRE_RL_tmp0_b_buffer_enqueue ;
  assign tmp0_b_buffer_ff$DEQ = CAN_FIRE_RL_tmp0_b_buffer_dequeue ;
  assign tmp0_b_buffer_ff$CLR = 1'b0 ;

  // submodule tmp0_b_buffer_firstValid
  assign tmp0_b_buffer_firstValid$D_IN = 1'd1 ;
  assign tmp0_b_buffer_firstValid$EN = CAN_FIRE_RL_tmp0_b_dropFlit ;

  // submodule tmp0_r_buffer_ff
  assign tmp0_r_buffer_ff$D_IN = tmp0_r_buffer_enqw$wget ;
  assign tmp0_r_buffer_ff$ENQ = CAN_FIRE_RL_tmp0_r_buffer_enqueue ;
  assign tmp0_r_buffer_ff$DEQ = CAN_FIRE_RL_tmp0_r_buffer_dequeue ;
  assign tmp0_r_buffer_ff$CLR = 1'b0 ;

  // submodule tmp0_r_buffer_firstValid
  assign tmp0_r_buffer_firstValid$D_IN = 1'd1 ;
  assign tmp0_r_buffer_firstValid$EN = CAN_FIRE_RL_tmp0_r_dropFlit ;

  // remaining internal signals
  assign IF_IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_m_ETC___d977 =
	     (IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d965 ?
		2'd1 :
		2'd0) +
	     (IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d970 ?
		2'd1 :
		2'd0) +
	     ((proc$master1_awaddr[63:40] == 24'd0 &&
	       !IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d950 &&
	       IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d953) ?
		2'd1 :
		2'd0) ;
  assign IF_NOT_ifcs_0_1_innerRoute_first__702_BIT_1_71_ETC___d1724 =
	     (!ifcs_0_1_innerRoute$D_OUT[1] ||
	      !ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ifcs_0_1_innerRoute$D_OUT[2] &&
	       ssNoSynth_2_ar_buffer_ff$FULL_N :
	       ifcs_0_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_0_innerRoute_first__110_BIT_1_119__ETC___d1132 =
	     (!ifcs_0_innerRoute$D_OUT[1] ||
	      !IF_split_1_flitLeft_79_EQ_0_80_THEN_ssNoSynth__ETC___d1103) ?
	       ifcs_0_innerRoute$D_OUT[2] &&
	       IF_split_2_flitLeft_08_EQ_0_09_THEN_ssNoSynth__ETC___d1104 :
	       ifcs_0_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_1_innerRoute_first__731_BIT_1_73_ETC___d1740 =
	     (!ifcs_1_1_innerRoute$D_OUT[1] ||
	      !ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ifcs_1_1_innerRoute$D_OUT[2] &&
	       ssNoSynth_2_ar_buffer_ff$FULL_N :
	       ifcs_1_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_innerRoute_first__139_BIT_1_143__ETC___d1148 =
	     (!ifcs_1_innerRoute$D_OUT[1] ||
	      !IF_split_1_flitLeft_79_EQ_0_80_THEN_ssNoSynth__ETC___d1103) ?
	       ifcs_1_innerRoute$D_OUT[2] &&
	       IF_split_2_flitLeft_08_EQ_0_09_THEN_ssNoSynth__ETC___d1104 :
	       ifcs_1_innerRoute$D_OUT[1] ;
  assign IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1976 =
	     (SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_934__ETC___d1945 ||
	      SEXT_arbiter_1_1_lastSelect_1_936_937_BIT_0_93_ETC___d1951 ||
	      SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957) ?
	       x__h89242 | y__h89243 :
	       arbiter_1_1_lastSelect ;
  assign IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1982 =
	     (SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_934__ETC___d1945 ||
	      SEXT_arbiter_1_1_lastSelect_1_936_937_BIT_0_93_ETC___d1951 ||
	      SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957) ?
	       x__h89430 | y__h89431 :
	       arbiter_1_1_lastSelect_1 ;
  assign IF_SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_9_ETC___d1988 =
	     (SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_934__ETC___d1945 ||
	      SEXT_arbiter_1_1_lastSelect_1_936_937_BIT_0_93_ETC___d1951 ||
	      SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957) ?
	       x__h89611 | y__h89612 :
	       arbiter_1_1_firstHot ;
  assign IF_SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_7_ETC___d1776 =
	     (SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_754__ETC___d1760 ||
	      SEXT_arbiter_1_firstHot_1_756_757_BIT_0_758_AN_ETC___d1764) ?
	       x__h77300 | y__h77301 :
	       arbiter_1_lastSelect_2 ;
  assign IF_SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_7_ETC___d1780 =
	     (SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_754__ETC___d1760 ||
	      SEXT_arbiter_1_firstHot_1_756_757_BIT_0_758_AN_ETC___d1764) ?
	       x__h77441 | y__h77442 :
	       arbiter_1_firstHot_1 ;
  assign IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1394 =
	     (SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_AN_ETC___d1363 ||
	      SEXT_arbiter_1_lastSelect_1_354_355_BIT_0_356__ETC___d1369 ||
	      SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375) ?
	       x__h58017 | y__h58018 :
	       arbiter_1_lastSelect ;
  assign IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1400 =
	     (SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_AN_ETC___d1363 ||
	      SEXT_arbiter_1_lastSelect_1_354_355_BIT_0_356__ETC___d1369 ||
	      SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375) ?
	       x__h58205 | y__h58206 :
	       arbiter_1_lastSelect_1 ;
  assign IF_SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_ETC___d1406 =
	     (SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_AN_ETC___d1363 ||
	      SEXT_arbiter_1_lastSelect_1_354_355_BIT_0_356__ETC___d1369 ||
	      SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375) ?
	       x__h58386 | y__h58387 :
	       arbiter_1_firstHot ;
  assign IF_SEXT_arbiter_lastSelect_160_161_BIT_0_162_A_ETC___d1184 =
	     (SEXT_arbiter_lastSelect_160_161_BIT_0_162_AND__ETC___d1168 ||
	      SEXT_arbiter_firstHot_164_165_BIT_0_166_AND_re_ETC___d1172) ?
	       x__h43534 | y__h43535 :
	       arbiter_lastSelect ;
  assign IF_SEXT_arbiter_lastSelect_160_161_BIT_0_162_A_ETC___d1188 =
	     (SEXT_arbiter_lastSelect_160_161_BIT_0_162_AND__ETC___d1168 ||
	      SEXT_arbiter_firstHot_164_165_BIT_0_166_AND_re_ETC___d1172) ?
	       x__h43675 | y__h43676 :
	       arbiter_firstHot ;
  assign IF_merged_0_flitLeft_26_EQ_0_27_THEN_NOT_proc__ETC___d1012 =
	     (IF_merged_0_flitLeft_26_EQ_0_27_THEN_NOT_proc__ETC___d936 ||
	      proc$master1_awvalid) &&
	     (merged_0_flitLeft != 8'd0 ||
	      !ifcs_0_noRoute_inner_pendingReq && proc$master1_awvalid) ;
  assign IF_merged_0_flitLeft_26_EQ_0_27_THEN_NOT_proc__ETC___d936 =
	     ((merged_0_flitLeft == 8'd0) ?
		!proc$master1_awvalid || !proc$master1_wvalid :
		!proc$master1_wvalid) ||
	     merged_0_flitLeft != 8'd0 ;
  assign IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d929 =
	     (merged_0_flitLeft == 8'd0) ?
	       proc$master1_awvalid && proc$master1_wvalid :
	       proc$master1_wvalid ;
  assign IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d950 =
	     proc$master1_awaddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d953 =
	     x__h32032 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d958 =
	     proc$master1_awaddr < soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d961 =
	     x__h32067 < soc_map$m_plic_addr_range[63:0] ;
  assign IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d965 =
	     proc$master1_awaddr[63:40] == 24'd0 &&
	     (IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d950 ||
	      !IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d953) &&
	     (IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d958 ||
	      !IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d961) ;
  assign IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d970 =
	     proc$master1_awaddr[63:40] == 24'd0 &&
	     (IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d950 ||
	      !IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d953) &&
	     !IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d958 &&
	     IF_merged_0_flitLeft_26_EQ_0_27_THEN_proc_mast_ETC___d961 ;
  assign IF_proc_master1_ar_araddr__520_BITS_63_TO_40_5_ETC___d1546 =
	     (proc_master1_ar_araddr__520_BITS_63_TO_40_521__ETC___d1534 ?
		2'd1 :
		2'd0) +
	     (proc_master1_ar_araddr__520_BITS_63_TO_40_521__ETC___d1539 ?
		2'd1 :
		2'd0) +
	     ((proc$master1_araddr[63:40] == 24'd0 &&
	       !proc_master1_ar_araddr__520_ULT_soc_map_m_mem0_ETC___d1523 &&
	       proc_master1_ar_araddr__520_MINUS_soc_map_m_me_ETC___d1525) ?
		2'd1 :
		2'd0) ;
  assign IF_split_0_flitLeft_50_EQ_0_51_THEN_ssNoSynth__ETC___d1102 =
	     (split_0_flitLeft == 8'd0) ?
	       ssNoSynth_0_aw_buffer_ff$FULL_N &&
	       ssNoSynth_0_w_buffer_ff$FULL_N :
	       ssNoSynth_0_w_buffer_ff$FULL_N ;
  assign IF_split_1_flitLeft_79_EQ_0_80_THEN_ssNoSynth__ETC___d1103 =
	     (split_1_flitLeft == 8'd0) ?
	       ssNoSynth_1_aw_buffer_ff$FULL_N &&
	       ssNoSynth_1_w_buffer_ff$FULL_N :
	       ssNoSynth_1_w_buffer_ff$FULL_N ;
  assign IF_split_2_flitLeft_08_EQ_0_09_THEN_ssNoSynth__ETC___d1104 =
	     (split_2_flitLeft == 8'd0) ?
	       ssNoSynth_2_aw_buffer_ff$FULL_N &&
	       ssNoSynth_2_w_buffer_ff$FULL_N :
	       ssNoSynth_2_w_buffer_ff$FULL_N ;
  assign SEXT_SEXT_arbiter_1_1_firstHot_941_942_BIT_0_9_ETC__q22 =
	     {2{SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_1_756_757_BIT_0_7_ETC__q17 =
	     {2{SEXT_arbiter_1_firstHot_1_756_757_BIT_0_758_AN_ETC___d1764}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_359_360_BIT_0_361_ETC__q12 =
	     {2{SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375}} ;
  assign SEXT_SEXT_arbiter_firstHot_164_165_BIT_0_166_A_ETC__q7 =
	     {2{SEXT_arbiter_firstHot_164_165_BIT_0_166_AND_re_ETC___d1172}} ;
  assign SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957 =
	     x__h88770 | y__h88771 ;
  assign SEXT_arbiter_1_1_firstHot__q19 = {2{arbiter_1_1_firstHot}} ;
  assign SEXT_arbiter_1_1_lastSelect_1_936_937_BIT_0_93_ETC___d1951 =
	     x__h88634 | y__h88635 ;
  assign SEXT_arbiter_1_1_lastSelect_1__q21 = {2{arbiter_1_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_934__ETC___d1945 =
	     x__h88483 | y__h88484 ;
  assign SEXT_arbiter_1_1_lastSelect__q20 = {2{arbiter_1_1_lastSelect}} ;
  assign SEXT_arbiter_1_firstHot_1_756_757_BIT_0_758_AN_ETC___d1764 =
	     x__h76935 | y__h76936 ;
  assign SEXT_arbiter_1_firstHot_1__q15 = {2{arbiter_1_firstHot_1}} ;
  assign SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375 =
	     x__h57545 | y__h57546 ;
  assign SEXT_arbiter_1_firstHot__q9 = {2{arbiter_1_firstHot}} ;
  assign SEXT_arbiter_1_lastSelect_1_354_355_BIT_0_356__ETC___d1369 =
	     x__h57409 | y__h57410 ;
  assign SEXT_arbiter_1_lastSelect_1__q11 = {2{arbiter_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_754__ETC___d1760 =
	     x__h76832 | y__h76833 ;
  assign SEXT_arbiter_1_lastSelect_2__q16 = {2{arbiter_1_lastSelect_2}} ;
  assign SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_AN_ETC___d1363 =
	     x__h57258 | y__h57259 ;
  assign SEXT_arbiter_1_lastSelect__q10 = {2{arbiter_1_lastSelect}} ;
  assign SEXT_arbiter_firstHot_164_165_BIT_0_166_AND_re_ETC___d1172 =
	     x__h43169 | y__h43170 ;
  assign SEXT_arbiter_firstHot__q5 = {2{arbiter_firstHot}} ;
  assign SEXT_arbiter_lastSelect_160_161_BIT_0_162_AND__ETC___d1168 =
	     x__h43066 | y__h43067 ;
  assign SEXT_arbiter_lastSelect__q6 = {2{arbiter_lastSelect}} ;
  assign SEXT_x3593__q8 = {2{x__h43593}} ;
  assign SEXT_x7359__q18 = {2{x__h77359}} ;
  assign SEXT_x8079__q13 = {2{x__h58079}} ;
  assign SEXT_x8113__q14 = {2{x__h58113}} ;
  assign SEXT_x9304__q23 = {2{x__h89304}} ;
  assign SEXT_x9338__q24 = {2{x__h89338}} ;
  assign _0_CONCAT_tagController_tmp_tagCon_memory_reque_ETC___d258 =
	     x__h11223 + y__h11224 ;
  assign a_awid__h33202 = { 1'd0, proc$master1_awid } ;
  assign araddr__h14146 =
	     { 24'd0, tagController_tmp_tagCon$memory_request_get[140:101] } ;
  assign arcache__h14151 =
	     tagController_tmp_tagCon$memory_request_get[8] ? 4'd0 : 4'd15 ;
  assign arlen__h14147 =
	     { 5'd0, tagController_tmp_tagCon$memory_request_get[5:3] } ;
  assign aw_awaddr__h9414 = tmp__h9197 + { 60'd0, x__h9489 } ;
  assign aw_awsize_val__h11153 =
	     _0_CONCAT_tagController_tmp_tagCon_memory_reque_ETC___d258[0] ?
	       3'd0 :
	       (_0_CONCAT_tagController_tmp_tagCon_memory_reque_ETC___d258[1] ?
		  3'd1 :
		  (_0_CONCAT_tagController_tmp_tagCon_memory_reque_ETC___d258[2] ?
		     3'd2 :
		     (_0_CONCAT_tagController_tmp_tagCon_memory_reque_ETC___d258[3] ?
			3'd3 :
			3'd4))) ;
  assign fatReq_arid__h66891 = { 1'd0, proc$master1_arid } ;
  assign proc_master1_ar_araddr__520_BITS_63_TO_40_521__ETC___d1534 =
	     proc$master1_araddr[63:40] == 24'd0 &&
	     (proc_master1_ar_araddr__520_ULT_soc_map_m_mem0_ETC___d1523 ||
	      !proc_master1_ar_araddr__520_MINUS_soc_map_m_me_ETC___d1525) &&
	     (proc_master1_ar_araddr__520_ULT_soc_map_m_plic_ETC___d1528 ||
	      !proc_master1_ar_araddr__520_MINUS_soc_map_m_pl_ETC___d1530) ;
  assign proc_master1_ar_araddr__520_BITS_63_TO_40_521__ETC___d1539 =
	     proc$master1_araddr[63:40] == 24'd0 &&
	     (proc_master1_ar_araddr__520_ULT_soc_map_m_mem0_ETC___d1523 ||
	      !proc_master1_ar_araddr__520_MINUS_soc_map_m_me_ETC___d1525) &&
	     !proc_master1_ar_araddr__520_ULT_soc_map_m_plic_ETC___d1528 &&
	     proc_master1_ar_araddr__520_MINUS_soc_map_m_pl_ETC___d1530 ;
  assign proc_master1_ar_araddr__520_MINUS_soc_map_m_me_ETC___d1525 =
	     x__h66323 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign proc_master1_ar_araddr__520_MINUS_soc_map_m_pl_ETC___d1530 =
	     x__h66348 < soc_map$m_plic_addr_range[63:0] ;
  assign proc_master1_ar_araddr__520_ULT_soc_map_m_mem0_ETC___d1523 =
	     proc$master1_araddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign proc_master1_ar_araddr__520_ULT_soc_map_m_plic_ETC___d1528 =
	     proc$master1_araddr < soc_map$m_plic_addr_range[127:64] ;
  assign reqWires_1_0_whas__336_AND_reqWires_1_0_wget___ETC___d1346 =
	     CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget ||
	     CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget ||
	     CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget ;
  assign reqWires_1_1_0_whas__918_AND_reqWires_1_1_0_wg_ETC___d1928 =
	     CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget ||
	     CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget ||
	     CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget ;
  assign split_0_doPut_whas__42_AND_split_0_doPut_wget__ETC___d849 =
	     CAN_FIRE_RL_sink_selected &&
	     (split_0_doPut$wget[172] ||
	      ssNoSynth_0_aw_buffer_ff$FULL_N &&
	      ssNoSynth_0_w_buffer_ff$FULL_N) ;
  assign split_1_doPut_whas__71_AND_split_1_doPut_wget__ETC___d878 =
	     CAN_FIRE_RL_sink_selected_1 &&
	     (split_1_doPut$wget[172] ||
	      ssNoSynth_1_aw_buffer_ff$FULL_N &&
	      ssNoSynth_1_w_buffer_ff$FULL_N) ;
  assign split_2_doPut_whas__00_AND_split_2_doPut_wget__ETC___d907 =
	     CAN_FIRE_RL_sink_selected_2 &&
	     (split_2_doPut$wget[172] ||
	      ssNoSynth_2_aw_buffer_ff$FULL_N &&
	      ssNoSynth_2_w_buffer_ff$FULL_N) ;
  assign state_157_AND_activeSource_0_230_231_AND_ifcs__ETC___d1233 =
	     state && activeSource_0 && ifcs_0_innerRoute$EMPTY_N &&
	     ((!ifcs_0_innerRoute$D_OUT[0] ||
	       !IF_split_0_flitLeft_50_EQ_0_51_THEN_ssNoSynth__ETC___d1102) ?
		IF_NOT_ifcs_0_innerRoute_first__110_BIT_1_119__ETC___d1132 :
		ifcs_0_innerRoute$D_OUT[0]) ;
  assign state_157_AND_activeSource_1_274_275_AND_ifcs__ETC___d1277 =
	     state && activeSource_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_innerRoute$D_OUT[0] ||
	       !IF_split_0_flitLeft_50_EQ_0_51_THEN_ssNoSynth__ETC___d1102) ?
		IF_NOT_ifcs_1_innerRoute_first__139_BIT_1_143__ETC___d1148 :
		ifcs_1_innerRoute$D_OUT[0]) ;
  assign state_1_1_1_929_AND_activeSource_1_1_0_023_024_ETC___d2026 =
	     state_1_1_1 && activeSource_1_1_0 &&
	     ifcs_0_1_routeBack$EMPTY_N &&
	     ((!ifcs_0_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_0_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_0_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_929_AND_activeSource_1_1_1_1_059_0_ETC___d2062 =
	     state_1_1_1 && activeSource_1_1_1_1 &&
	     ifcs_1_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_1_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_1_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_929_AND_activeSource_1_1_2_095_096_ETC___d2098 =
	     state_1_1_1 && activeSource_1_1_2 &&
	     ifcs_2_1_routeBack$EMPTY_N &&
	     ((!ifcs_2_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_2_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_2_1_routeBack$D_OUT[0]) ;
  assign state_1_1_749_AND_activeSource_1_0_1_816_817_A_ETC___d1819 =
	     state_1_1 && activeSource_1_0_1 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ((!ifcs_0_1_innerRoute$D_OUT[0] ||
	       !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_ifcs_0_1_innerRoute_first__702_BIT_1_71_ETC___d1724 :
		ifcs_0_1_innerRoute$D_OUT[0]) ;
  assign state_1_1_749_AND_activeSource_1_1_1_856_857_A_ETC___d1859 =
	     state_1_1 && activeSource_1_1_1 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_1_innerRoute$D_OUT[0] ||
	       !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_ifcs_1_1_innerRoute_first__731_BIT_1_73_ETC___d1740 :
		ifcs_1_1_innerRoute$D_OUT[0]) ;
  assign state_1_347_AND_activeSource_1_0_435_436_AND_i_ETC___d1438 =
	     state_1 && activeSource_1_0 && ifcs_0_routeBack$EMPTY_N &&
	     ((!ifcs_0_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_0_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_0_routeBack$D_OUT[0]) ;
  assign state_1_347_AND_activeSource_1_1_468_469_AND_i_ETC___d1471 =
	     state_1 && activeSource_1_1 && ifcs_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_1_routeBack$D_OUT[0]) ;
  assign state_1_347_AND_activeSource_1_2_502_503_AND_i_ETC___d1505 =
	     state_1 && activeSource_1_2 && ifcs_2_routeBack$EMPTY_N &&
	     ((!ifcs_2_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_2_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_2_routeBack$D_OUT[0]) ;
  assign tagController_tmp_shimMaster_arff_rvport1__re_ETC__q4 =
	     tagController_tmp_shimMaster_arff_rv$port1__read[98:0] ;
  assign tagController_tmp_shimMaster_awff_rvport1__re_ETC__q2 =
	     tagController_tmp_shimMaster_awff_rv$port1__read[98:0] ;
  assign tagController_tmp_shimMaster_wff_rvport1__rea_ETC__q3 =
	     tagController_tmp_shimMaster_wff_rv$port1__read[72:0] ;
  assign tagController_tmp_shimSlave_rff_rvport1__read_ETC__q1 =
	     tagController_tmp_shimSlave_rff_rv$port1__read[72:0] ;
  assign tagController_tmp_ug_slave_u_b_peekWirewget_B_ETC__q26 =
	     tagController_tmp_ug_slave_u_b_peekWire$wget[6:2] ;
  assign tagController_tmp_ug_slave_u_r_peekWirewget_B_ETC__q25 =
	     tagController_tmp_ug_slave_u_r_peekWire$wget[72:68] ;
  assign tmp__h6972 =
	     tagController_tmp_awreqff$D_OUT[92:29] +
	     tagController_tmp_addrOffset ;
  assign tmp__h9197 = { 24'd0, x__h9446 } ;
  assign v_araddr__h14163 =
	     (tagController_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       araddr__h14146 :
	       64'hAAAAAAAAAAAAAAAA ;
  assign v_arid__h14162 =
	     (tagController_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       tagController_tmp_tagCon$memory_request_get[100:95] :
	       6'd0 ;
  assign v_arlen__h14164 =
	     (tagController_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       arlen__h14147 :
	       8'd0 ;
  assign v_arsize_val__h14209 =
	     (tagController_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       tagController_tmp_tagCon$memory_request_get[2:0] :
	       3'b0 ;
  assign x__h11223 = x__h11235 + y__h11236 ;
  assign x__h11235 = x__h11247 + y__h11248 ;
  assign x__h11247 = x__h11259 + y__h11260 ;
  assign x__h11259 = x__h11271 + y__h11272 ;
  assign x__h11271 = x__h11283 + y__h11284 ;
  assign x__h11283 = x__h11295 + y__h11296 ;
  assign x__h11295 =
	     { 3'd0, tagController_tmp_tagCon$memory_request_get[88] } ;
  assign x__h12819 =
	     tagController_tmp_tagCon$memory_request_get[90] ? 4'd0 : 4'd15 ;
  assign x__h14227 =
	     (tagController_tmp_tagCon$memory_request_get[93:92] == 2'd0) ?
	       arcache__h14151 :
	       4'd0 ;
  assign x__h32032 =
	     proc$master1_awaddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h32067 = proc$master1_awaddr - soc_map$m_plic_addr_range[127:64] ;
  assign x__h43066 =
	     SEXT_arbiter_lastSelect__q6[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h43169 =
	     SEXT_arbiter_firstHot__q5[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h43534 =
	     SEXT_SEXT_arbiter_firstHot_164_165_BIT_0_166_A_ETC__q7[0] &
	     arbiter_firstHot ;
  assign x__h43593 =
	     !SEXT_arbiter_firstHot_164_165_BIT_0_166_AND_re_ETC___d1172 &&
	     SEXT_arbiter_lastSelect_160_161_BIT_0_162_AND__ETC___d1168 ;
  assign x__h43675 = SEXT_x3593__q8[0] & arbiter_firstHot ;
  assign x__h57258 = x__h57260 | y__h57261 ;
  assign x__h57260 =
	     SEXT_arbiter_1_lastSelect__q10[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h57409 = x__h57411 | y__h57412 ;
  assign x__h57411 =
	     SEXT_arbiter_1_lastSelect_1__q11[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h57545 = x__h57547 | y__h57548 ;
  assign x__h57547 =
	     SEXT_arbiter_1_firstHot__q9[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h58017 = x__h58019 | y__h58020 ;
  assign x__h58019 =
	     SEXT_SEXT_arbiter_1_firstHot_359_360_BIT_0_361_ETC__q12[0] &
	     arbiter_1_firstHot ;
  assign x__h58079 =
	     !SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375 &&
	     SEXT_arbiter_1_lastSelect_1_354_355_BIT_0_356__ETC___d1369 ;
  assign x__h58113 =
	     !SEXT_arbiter_1_lastSelect_1_354_355_BIT_0_356__ETC___d1369 &&
	     !SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375 &&
	     SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_AN_ETC___d1363 ;
  assign x__h58205 = x__h58207 | y__h58208 ;
  assign x__h58207 = SEXT_x8079__q13[0] & arbiter_1_firstHot ;
  assign x__h58386 = x__h58388 | y__h58389 ;
  assign x__h58388 = SEXT_x8113__q14[0] & arbiter_1_firstHot ;
  assign x__h66323 =
	     proc$master1_araddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h66348 = proc$master1_araddr - soc_map$m_plic_addr_range[127:64] ;
  assign x__h6813 =
	     tagController_tmp_addrOffset +
	     (64'd1 << tagController_tmp_awreqff$D_OUT[20:18]) ;
  assign x__h76832 =
	     SEXT_arbiter_1_lastSelect_2__q16[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget) ;
  assign x__h76935 =
	     SEXT_arbiter_1_firstHot_1__q15[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget) ;
  assign x__h77300 =
	     SEXT_SEXT_arbiter_1_firstHot_1_756_757_BIT_0_7_ETC__q17[0] &
	     arbiter_1_firstHot_1 ;
  assign x__h77359 =
	     !SEXT_arbiter_1_firstHot_1_756_757_BIT_0_758_AN_ETC___d1764 &&
	     SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_754__ETC___d1760 ;
  assign x__h77441 = SEXT_x7359__q18[0] & arbiter_1_firstHot_1 ;
  assign x__h88483 = x__h88485 | y__h88486 ;
  assign x__h88485 =
	     SEXT_arbiter_1_1_lastSelect__q20[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h88634 = x__h88636 | y__h88637 ;
  assign x__h88636 =
	     SEXT_arbiter_1_1_lastSelect_1__q21[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h88770 = x__h88772 | y__h88773 ;
  assign x__h88772 =
	     SEXT_arbiter_1_1_firstHot__q19[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h89242 = x__h89244 | y__h89245 ;
  assign x__h89244 =
	     SEXT_SEXT_arbiter_1_1_firstHot_941_942_BIT_0_9_ETC__q22[0] &
	     arbiter_1_1_firstHot ;
  assign x__h89304 =
	     !SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957 &&
	     SEXT_arbiter_1_1_lastSelect_1_936_937_BIT_0_93_ETC___d1951 ;
  assign x__h89338 =
	     !SEXT_arbiter_1_1_lastSelect_1_936_937_BIT_0_93_ETC___d1951 &&
	     !SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957 &&
	     SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_934__ETC___d1945 ;
  assign x__h89430 = x__h89432 | y__h89433 ;
  assign x__h89432 = SEXT_x9304__q23[0] & arbiter_1_1_firstHot ;
  assign x__h89611 = x__h89613 | y__h89614 ;
  assign x__h89613 = SEXT_x9338__q24[0] & arbiter_1_1_firstHot ;
  assign x__h9446 =
	     { tagController_tmp_tagCon$memory_request_get[140:104], 3'd0 } ;
  assign x__h9489 =
	     tagController_tmp_tagCon$memory_request_get[81] ?
	       4'd0 :
	       (tagController_tmp_tagCon$memory_request_get[82] ?
		  4'd1 :
		  (tagController_tmp_tagCon$memory_request_get[83] ?
		     4'd2 :
		     (tagController_tmp_tagCon$memory_request_get[84] ?
			4'd3 :
			(tagController_tmp_tagCon$memory_request_get[85] ?
			   4'd4 :
			   (tagController_tmp_tagCon$memory_request_get[86] ?
			      4'd5 :
			      (tagController_tmp_tagCon$memory_request_get[87] ?
				 4'd6 :
				 (tagController_tmp_tagCon$memory_request_get[88] ?
				    4'd7 :
				    4'd8))))))) ;
  assign x_port1__read__h67452 =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       ifcs_0_1_noRoute_flitCount$port0__write_1 :
	       ifcs_0_1_noRoute_flitCount ;
  assign y__h11224 =
	     { 3'd0, tagController_tmp_tagCon$memory_request_get[81] } ;
  assign y__h11236 =
	     { 3'd0, tagController_tmp_tagCon$memory_request_get[82] } ;
  assign y__h11248 =
	     { 3'd0, tagController_tmp_tagCon$memory_request_get[83] } ;
  assign y__h11260 =
	     { 3'd0, tagController_tmp_tagCon$memory_request_get[84] } ;
  assign y__h11272 =
	     { 3'd0, tagController_tmp_tagCon$memory_request_get[85] } ;
  assign y__h11284 =
	     { 3'd0, tagController_tmp_tagCon$memory_request_get[86] } ;
  assign y__h11296 =
	     { 3'd0, tagController_tmp_tagCon$memory_request_get[87] } ;
  assign y__h43067 =
	     SEXT_arbiter_firstHot__q5[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h43170 =
	     SEXT_arbiter_lastSelect__q6[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h43535 = SEXT_x3593__q8[0] & arbiter_lastSelect ;
  assign y__h43676 =
	     SEXT_SEXT_arbiter_firstHot_164_165_BIT_0_166_A_ETC__q7[0] &
	     arbiter_lastSelect ;
  assign y__h57259 =
	     SEXT_arbiter_1_firstHot__q9[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h57261 =
	     SEXT_arbiter_1_lastSelect_1__q11[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h57410 =
	     SEXT_arbiter_1_lastSelect__q10[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h57412 =
	     SEXT_arbiter_1_firstHot__q9[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h57546 =
	     SEXT_arbiter_1_lastSelect_1__q11[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h57548 =
	     SEXT_arbiter_1_lastSelect__q10[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h58018 = SEXT_x8113__q14[0] & arbiter_1_lastSelect ;
  assign y__h58020 = SEXT_x8079__q13[0] & arbiter_1_lastSelect_1 ;
  assign y__h58206 =
	     SEXT_SEXT_arbiter_1_firstHot_359_360_BIT_0_361_ETC__q12[0] &
	     arbiter_1_lastSelect ;
  assign y__h58208 = SEXT_x8113__q14[0] & arbiter_1_lastSelect_1 ;
  assign y__h58387 = SEXT_x8079__q13[0] & arbiter_1_lastSelect ;
  assign y__h58389 =
	     SEXT_SEXT_arbiter_1_firstHot_359_360_BIT_0_361_ETC__q12[0] &
	     arbiter_1_lastSelect_1 ;
  assign y__h76833 =
	     SEXT_arbiter_1_firstHot_1__q15[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) ;
  assign y__h76936 =
	     SEXT_arbiter_1_lastSelect_2__q16[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) ;
  assign y__h77301 = SEXT_x7359__q18[0] & arbiter_1_lastSelect_2 ;
  assign y__h77442 =
	     SEXT_SEXT_arbiter_1_firstHot_1_756_757_BIT_0_7_ETC__q17[0] &
	     arbiter_1_lastSelect_2 ;
  assign y__h88484 =
	     SEXT_arbiter_1_1_firstHot__q19[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h88486 =
	     SEXT_arbiter_1_1_lastSelect_1__q21[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h88635 =
	     SEXT_arbiter_1_1_lastSelect__q20[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h88637 =
	     SEXT_arbiter_1_1_firstHot__q19[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h88771 =
	     SEXT_arbiter_1_1_lastSelect_1__q21[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h88773 =
	     SEXT_arbiter_1_1_lastSelect__q20[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h89243 = SEXT_x9338__q24[0] & arbiter_1_1_lastSelect ;
  assign y__h89245 = SEXT_x9304__q23[0] & arbiter_1_1_lastSelect_1 ;
  assign y__h89431 =
	     SEXT_SEXT_arbiter_1_1_firstHot_941_942_BIT_0_9_ETC__q22[0] &
	     arbiter_1_1_lastSelect ;
  assign y__h89433 = SEXT_x9338__q24[0] & arbiter_1_1_lastSelect_1 ;
  assign y__h89612 = SEXT_x9304__q23[0] & arbiter_1_1_lastSelect ;
  assign y__h89614 =
	     SEXT_SEXT_arbiter_1_1_firstHot_941_942_BIT_0_9_ETC__q22[0] &
	     arbiter_1_1_lastSelect_1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tagController_tmp_addrOffset <= `BSV_ASSIGNMENT_DELAY 64'd0;
	tagController_tmp_doneSendingAW <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tagController_tmp_shimMaster_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    100'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	tagController_tmp_shimMaster_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    100'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	tagController_tmp_shimMaster_bff_rv <= `BSV_ASSIGNMENT_DELAY 9'd170;
	tagController_tmp_shimMaster_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	tagController_tmp_shimMaster_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	tagController_tmp_shimSlave_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	tagController_tmp_shimSlave_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	tagController_tmp_shimSlave_bff_rv <= `BSV_ASSIGNMENT_DELAY 8'd42;
	tagController_tmp_shimSlave_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	tagController_tmp_shimSlave_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (activeSource_0$EN)
	  activeSource_0 <= `BSV_ASSIGNMENT_DELAY activeSource_0$D_IN;
	if (activeSource_1$EN)
	  activeSource_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1$D_IN;
	if (activeSource_1_0$EN)
	  activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0$D_IN;
	if (activeSource_1_0_1$EN)
	  activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0_1$D_IN;
	if (activeSource_1_1$EN)
	  activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1$D_IN;
	if (activeSource_1_1_0$EN)
	  activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_0$D_IN;
	if (activeSource_1_1_1$EN)
	  activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_1$D_IN;
	if (activeSource_1_1_1_1$EN)
	  activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY
	      activeSource_1_1_1_1$D_IN;
	if (activeSource_1_1_2$EN)
	  activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_2$D_IN;
	if (activeSource_1_2$EN)
	  activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_2$D_IN;
	if (arbiter_1_1_firstHot$EN)
	  arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_firstHot$D_IN;
	if (arbiter_1_1_lastSelect$EN)
	  arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect$D_IN;
	if (arbiter_1_1_lastSelect_1$EN)
	  arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect_1$D_IN;
	if (arbiter_1_firstHot$EN)
	  arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_1_firstHot$D_IN;
	if (arbiter_1_firstHot_1$EN)
	  arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_firstHot_1$D_IN;
	if (arbiter_1_lastSelect$EN)
	  arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect$D_IN;
	if (arbiter_1_lastSelect_1$EN)
	  arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_1$D_IN;
	if (arbiter_1_lastSelect_2$EN)
	  arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_2$D_IN;
	if (arbiter_firstHot$EN)
	  arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_firstHot$D_IN;
	if (arbiter_lastSelect$EN)
	  arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY arbiter_lastSelect$D_IN;
	if (ifcs_0_1_noRoute_currentReq$EN)
	  ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_currentReq$D_IN;
	if (ifcs_0_1_noRoute_flitCount$EN)
	  ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_flitCount$D_IN;
	if (ifcs_0_1_state$EN)
	  ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state$D_IN;
	if (ifcs_0_1_state_1$EN)
	  ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state_1$D_IN;
	if (ifcs_0_noRoute_inner_currentReq$EN)
	  ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_currentReq$D_IN;
	if (ifcs_0_noRoute_inner_pendingReq$EN)
	  ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_pendingReq$D_IN;
	if (ifcs_0_state$EN)
	  ifcs_0_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_state$D_IN;
	if (ifcs_0_state_1$EN)
	  ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_state_1$D_IN;
	if (ifcs_1_1_noRoute_currentReq$EN)
	  ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_currentReq$D_IN;
	if (ifcs_1_1_noRoute_flitCount$EN)
	  ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_flitCount$D_IN;
	if (ifcs_1_1_state$EN)
	  ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state$D_IN;
	if (ifcs_1_1_state_1$EN)
	  ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state_1$D_IN;
	if (ifcs_1_noRoute_inner_currentReq$EN)
	  ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_currentReq$D_IN;
	if (ifcs_1_noRoute_inner_pendingReq$EN)
	  ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_pendingReq$D_IN;
	if (ifcs_1_state$EN)
	  ifcs_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_state$D_IN;
	if (ifcs_1_state_1$EN)
	  ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_state_1$D_IN;
	if (ifcs_2_1_state$EN)
	  ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_1_state$D_IN;
	if (ifcs_2_state$EN)
	  ifcs_2_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_state$D_IN;
	if (merged_0_flitLeft$EN)
	  merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_0_flitLeft$D_IN;
	if (merged_1_flitLeft$EN)
	  merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_1_flitLeft$D_IN;
	if (split_0_flitLeft$EN)
	  split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY split_0_flitLeft$D_IN;
	if (split_1_flitLeft$EN)
	  split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY split_1_flitLeft$D_IN;
	if (split_2_flitLeft$EN)
	  split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY split_2_flitLeft$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
	if (state_1$EN) state_1 <= `BSV_ASSIGNMENT_DELAY state_1$D_IN;
	if (state_1_1$EN) state_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1$D_IN;
	if (state_1_1_1$EN)
	  state_1_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1_1$D_IN;
	if (tagController_tmp_addrOffset$EN)
	  tagController_tmp_addrOffset <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_addrOffset$D_IN;
	if (tagController_tmp_doneSendingAW$EN)
	  tagController_tmp_doneSendingAW <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_doneSendingAW$D_IN;
	if (tagController_tmp_shimMaster_arff_rv$EN)
	  tagController_tmp_shimMaster_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimMaster_arff_rv$D_IN;
	if (tagController_tmp_shimMaster_awff_rv$EN)
	  tagController_tmp_shimMaster_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimMaster_awff_rv$D_IN;
	if (tagController_tmp_shimMaster_bff_rv$EN)
	  tagController_tmp_shimMaster_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimMaster_bff_rv$D_IN;
	if (tagController_tmp_shimMaster_rff_rv$EN)
	  tagController_tmp_shimMaster_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimMaster_rff_rv$D_IN;
	if (tagController_tmp_shimMaster_wff_rv$EN)
	  tagController_tmp_shimMaster_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimMaster_wff_rv$D_IN;
	if (tagController_tmp_shimSlave_arff_rv$EN)
	  tagController_tmp_shimSlave_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimSlave_arff_rv$D_IN;
	if (tagController_tmp_shimSlave_awff_rv$EN)
	  tagController_tmp_shimSlave_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimSlave_awff_rv$D_IN;
	if (tagController_tmp_shimSlave_bff_rv$EN)
	  tagController_tmp_shimSlave_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimSlave_bff_rv$D_IN;
	if (tagController_tmp_shimSlave_rff_rv$EN)
	  tagController_tmp_shimSlave_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimSlave_rff_rv$D_IN;
	if (tagController_tmp_shimSlave_wff_rv$EN)
	  tagController_tmp_shimSlave_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      tagController_tmp_shimSlave_wff_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    activeSource_0 = 1'h0;
    activeSource_1 = 1'h0;
    activeSource_1_0 = 1'h0;
    activeSource_1_0_1 = 1'h0;
    activeSource_1_1 = 1'h0;
    activeSource_1_1_0 = 1'h0;
    activeSource_1_1_1 = 1'h0;
    activeSource_1_1_1_1 = 1'h0;
    activeSource_1_1_2 = 1'h0;
    activeSource_1_2 = 1'h0;
    arbiter_1_1_firstHot = 1'h0;
    arbiter_1_1_lastSelect = 1'h0;
    arbiter_1_1_lastSelect_1 = 1'h0;
    arbiter_1_firstHot = 1'h0;
    arbiter_1_firstHot_1 = 1'h0;
    arbiter_1_lastSelect = 1'h0;
    arbiter_1_lastSelect_1 = 1'h0;
    arbiter_1_lastSelect_2 = 1'h0;
    arbiter_firstHot = 1'h0;
    arbiter_lastSelect = 1'h0;
    ifcs_0_1_noRoute_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_1_noRoute_flitCount = 9'h0AA;
    ifcs_0_1_state = 2'h2;
    ifcs_0_1_state_1 = 1'h0;
    ifcs_0_noRoute_inner_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_noRoute_inner_pendingReq = 1'h0;
    ifcs_0_state = 2'h2;
    ifcs_0_state_1 = 1'h0;
    ifcs_1_1_noRoute_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_1_noRoute_flitCount = 9'h0AA;
    ifcs_1_1_state = 2'h2;
    ifcs_1_1_state_1 = 1'h0;
    ifcs_1_noRoute_inner_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_noRoute_inner_pendingReq = 1'h0;
    ifcs_1_state = 2'h2;
    ifcs_1_state_1 = 1'h0;
    ifcs_2_1_state = 1'h0;
    ifcs_2_state = 1'h0;
    merged_0_flitLeft = 8'hAA;
    merged_1_flitLeft = 8'hAA;
    split_0_flitLeft = 8'hAA;
    split_1_flitLeft = 8'hAA;
    split_2_flitLeft = 8'hAA;
    state = 1'h0;
    state_1 = 1'h0;
    state_1_1 = 1'h0;
    state_1_1_1 = 1'h0;
    tagController_tmp_addrOffset = 64'hAAAAAAAAAAAAAAAA;
    tagController_tmp_doneSendingAW = 1'h0;
    tagController_tmp_shimMaster_arff_rv = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    tagController_tmp_shimMaster_awff_rv = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    tagController_tmp_shimMaster_bff_rv = 9'h0AA;
    tagController_tmp_shimMaster_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    tagController_tmp_shimMaster_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    tagController_tmp_shimSlave_arff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    tagController_tmp_shimSlave_awff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    tagController_tmp_shimSlave_bff_rv = 8'hAA;
    tagController_tmp_shimSlave_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    tagController_tmp_shimSlave_wff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_160_161_BIT_0_162_AND__ETC___d1168 &&
	  !SEXT_arbiter_firstHot_164_165_BIT_0_166_AND_re_ETC___d1172)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_160_161_BIT_0_162_AND__ETC___d1168 &&
	  !SEXT_arbiter_firstHot_164_165_BIT_0_166_AND_re_ETC___d1172)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h45074 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h45074,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	begin
	  v__h44463 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h44463,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h49083 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h49083,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	begin
	  v__h48472 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h48472,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && WILL_FIRE_RL_burst)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected] and\n  [RL_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected || WILL_FIRE_RL_burst) &&
	  (WILL_FIRE_RL_source_selected_1 || WILL_FIRE_RL_burst_1))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected, RL_burst]\n  and [RL_source_selected_1, RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && WILL_FIRE_RL_burst_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_1] and\n  [RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected && WILL_FIRE_RL_sink_selected_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected] and\n  [RL_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected || WILL_FIRE_RL_sink_selected_1) &&
	  WILL_FIRE_RL_sink_selected_2)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected,\n  RL_sink_selected_1] and [RL_sink_selected_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_754__ETC___d1760 &&
	  !SEXT_arbiter_1_firstHot_1_756_757_BIT_0_758_AN_ETC___d1764)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_2_752_753_BIT_0_754__ETC___d1760 &&
	  !SEXT_arbiter_1_firstHot_1_756_757_BIT_0_758_AN_ETC___d1764)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h78834 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h78834,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	begin
	  v__h78223 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h78223,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h81727 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h81727,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	begin
	  v__h81116 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h81116,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && WILL_FIRE_RL_burst_5)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_5] and\n  [RL_burst_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_5 || WILL_FIRE_RL_burst_5) &&
	  (WILL_FIRE_RL_source_selected_6 || WILL_FIRE_RL_burst_6))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_5,\n  RL_burst_5] and [RL_source_selected_6, RL_burst_6] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && WILL_FIRE_RL_burst_6)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_6] and\n  [RL_burst_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_5 && WILL_FIRE_RL_sink_selected_6)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_5] and\n  [RL_sink_selected_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected_5 || WILL_FIRE_RL_sink_selected_6) &&
	  WILL_FIRE_RL_sink_selected_7)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_5,\n  RL_sink_selected_6] and [RL_sink_selected_7] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tmp1_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tmp1_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tmp1_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tmp1_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tmp1_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[172])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  split_0_doPut$wget[1] &&
	  split_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  split_0_doPut$wget[1] &&
	  split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  !split_0_doPut$wget[1] &&
	  split_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[172] &&
	  !split_0_doPut$wget[1] &&
	  split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[172])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[172])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  split_1_doPut$wget[1] &&
	  split_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  split_1_doPut$wget[1] &&
	  split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  !split_1_doPut$wget[1] &&
	  split_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[172] &&
	  !split_1_doPut$wget[1] &&
	  split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[172])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[172])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  split_2_doPut$wget[1] &&
	  split_2_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  split_2_doPut$wget[1] &&
	  split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  !split_2_doPut$wget[1] &&
	  split_2_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[172] &&
	  !split_2_doPut$wget[1] &&
	  split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[172])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[172])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_nonRoutableFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  !SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_AN_ETC___d1363 &&
	  !SEXT_arbiter_1_lastSelect_1_354_355_BIT_0_356__ETC___d1369 &&
	  !SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  !SEXT_arbiter_1_lastSelect_350_351_BIT_0_352_AN_ETC___d1363 &&
	  !SEXT_arbiter_1_lastSelect_1_354_355_BIT_0_356__ETC___d1369 &&
	  !SEXT_arbiter_1_firstHot_359_360_BIT_0_361_AND__ETC___d1375)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h59778 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h59778,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	begin
	  v__h59397 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h59397,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h61848 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h61848,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	begin
	  v__h61467 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h61467,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && WILL_FIRE_RL_burst_3)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_3] and\n  [RL_burst_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h63747 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h63747,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	begin
	  v__h63366 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h63366,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && WILL_FIRE_RL_burst_2)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2] and\n  [RL_burst_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2) &&
	  (WILL_FIRE_RL_source_selected_3 || WILL_FIRE_RL_burst_3))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2] and [RL_source_selected_3, RL_burst_3] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2 ||
	   WILL_FIRE_RL_source_selected_3 ||
	   WILL_FIRE_RL_burst_3) &&
	  (WILL_FIRE_RL_source_selected_4 || WILL_FIRE_RL_burst_4))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2, RL_source_selected_3, RL_burst_3] and [RL_source_selected_4,\n  RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && WILL_FIRE_RL_burst_4)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_4] and\n  [RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_3 && WILL_FIRE_RL_sink_selected_4)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_3] and\n  [RL_sink_selected_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_drainFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && proc$master1_wlast &&
	  merged_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && proc$master1_wlast &&
	  merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !proc$master1_wlast &&
	  merged_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !proc$master1_wlast &&
	  merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_followFlits_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit_1] and\n  [RL_ifcs_0_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_followFlits_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit_1] and\n  [RL_ifcs_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_firstFlit && WILL_FIRE_RL_ifcs_2_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_firstFlit] and\n  [RL_ifcs_2_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_nonRoutableFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  !SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_934__ETC___d1945 &&
	  !SEXT_arbiter_1_1_lastSelect_1_936_937_BIT_0_93_ETC___d1951 &&
	  !SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  !SEXT_arbiter_1_1_lastSelect_932_933_BIT_0_934__ETC___d1945 &&
	  !SEXT_arbiter_1_1_lastSelect_1_936_937_BIT_0_93_ETC___d1951 &&
	  !SEXT_arbiter_1_1_firstHot_941_942_BIT_0_943_AN_ETC___d1957)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h91007 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h91007,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	begin
	  v__h90626 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h90626,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h93498 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h93498,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	begin
	  v__h93117 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h93117,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && WILL_FIRE_RL_burst_8)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_8] and\n  [RL_burst_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h95808 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h95808,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	begin
	  v__h95427 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h95427,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && WILL_FIRE_RL_burst_7)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7] and\n  [RL_burst_7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_7 || WILL_FIRE_RL_burst_7) &&
	  (WILL_FIRE_RL_source_selected_8 || WILL_FIRE_RL_burst_8))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7,\n  RL_burst_7] and [RL_source_selected_8, RL_burst_8] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_7 || WILL_FIRE_RL_burst_7 ||
	   WILL_FIRE_RL_source_selected_8 ||
	   WILL_FIRE_RL_burst_8) &&
	  (WILL_FIRE_RL_source_selected_9 || WILL_FIRE_RL_burst_9))
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7,\n  RL_burst_7, RL_source_selected_8, RL_burst_8] and [RL_source_selected_9,\n  RL_burst_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && WILL_FIRE_RL_burst_9)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_9] and\n  [RL_burst_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_8 && WILL_FIRE_RL_sink_selected_9)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_8] and\n  [RL_sink_selected_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit && WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_drainFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit_1] and\n  [RL_ifcs_0_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_tagController_tmp_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_1_followFlits_1)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit_1] and\n  [RL_ifcs_1_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_start)
	begin
	  v__h98199 = $stime;
	  #0;
	end
    v__h98193 = v__h98199 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_start)
	$display("%0d: %m.method start: proc.start (pc %0h, tohostAddr %0h, fromhostAddr %0h)",
		 v__h98193,
		 64'h0000000000001000,
		 start_tohost_addr,
		 start_fromhost_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_2_1_followFlits)
	$display("Error: \"../../libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_1_firstFlit] and\n  [RL_ifcs_2_1_followFlits] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkCoreW

